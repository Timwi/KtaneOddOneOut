using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using OddOneOut;
using UnityEngine;
using Rnd = UnityEngine.Random;

/// <summary>
/// On the Subject of Odd One Out
/// Created by Timwi
/// </summary>
public class OddOneOutModule : MonoBehaviour
{
    public KMBombInfo Bomb;
    public KMBombModule Module;
    public KMAudio Audio;
    public KMColorblindMode ColorblindMode;

    public KMSelectable[] Buttons;
    public TextMesh[] ButtonLabels;
    public MeshRenderer[] ButtonRenderers;
    public MeshRenderer[] ButtonImages; // NOTE: There are two of these per button
    public TextMesh Display;
    public Color[] MorseOnOff;
    public MeshRenderer[] Leds;
    public Material LedOn;
    public Material LedOff;
    public Material LedOnRed;   // to indicate reset
    public TextMesh ColorblindIndicator;

    public MeshRenderer LedPuzzleIndicator;
    public Color[] PuzzleIndicatorColors;

    public Texture[] MaritimeFlagTextures;
    public Texture[] BrailleTextures;
    public Texture[] PigpenTextures;
    public Texture SemaphoreTexture;
    public Texture[] CountryFlagTextures;
    public Texture[] ZooAnimalTextures;
    public Texture[] QuestionMarkTextures;
    public Texture[] FriendshipSymbols;
    public Texture[] DragonEnergyTextures;

    public Font StandardFont;
    public Font ZoniFont;
    public Font LombaxFont;
    public Font SgaFont;
    public Font MusicFont;
    public Font TunnelFont;

    public Material StandardFontMaterial;
    public Material ZoniFontMaterial;
    public Material LombaxFontMaterial;
    public Material SgaFontMaterial;
    public Material MusicFontMaterial;
    public Material TunnelFontMaterial;

    private readonly char?[] _showMorse = new char?[6];
    private readonly string[] _showOnHover = new string[6];
    private Coroutine _curCoroutine;
    private int _puzzleLedColor;

    private Coroutine _longPressCoroutine;
    private bool _longPress;

    private static int _moduleIdCounter = 1;
    private int _moduleId;
    private StageInfo[] _stages;
    private int _curStage;
    private int? _curHover;
    private static readonly int[] _modNumbers = new[] { 4, 7, 9, 11 };
    private static readonly int[] _zoniCountDots = new[] { 0, 1, 2, 3, 2, 3, 3, 4, 4, 5 };
    private static readonly int[] _zoniCountDashes = new[] { 1, 1, 1, 1, 2, 2, 2, 2, 2, 2 };
    private static readonly List<List<int>> _zoniDotNumbers, _zoniDashNumbers;

    private static readonly string[] _common5LetterWords = @"ABACK,ABBEY,ABBOT,ABOUT,ABOVE,ABUSE,ACIDS,ACRES,ACTED,ACTOR,ACUTE,ADAPT,ADDED,ADMIT,ADOPT,ADULT,AFTER,AGAIN,AGENT,AGONY,AGREE,AHEAD,AIDED,AIMED,AISLE,ALARM,ALBUM,ALERT,ALGAE,ALIEN,ALIKE,ALIVE,ALLEY,ALLOW,ALLOY,ALONE,ALONG,ALOUD,ALPHA,ALTAR,ALTER,AMEND,AMINO,AMONG,AMPLE,ANGEL,ANGER,ANGLE,ANGRY,ANKLE,APART,APPLE,APPLY,APRON,AREAS,ARENA,ARGUE,ARISE,ARMED,AROMA,AROSE,ARRAY,ARROW,ARSON,ASHES,ASIDE,ASKED,ASSAY,ASSET,ATOMS,ATTIC,AUDIO,AUDIT,AVOID,AWAIT,AWAKE,AWARD,AWARE,AWFUL,AWOKE,BACKS,BACON,BADGE,BADLY,BAKED,BAKER,BALLS,BANDS,BANKS,BARGE,BARON,BARRY,BASAL,BASED,BASES,BASIC,BASIL,BASIN,BASIS,BATCH,BATES,BATHS,BATTY,BEACH,BEADS,BEAMS,BEANS,BEARD,BEARS,BEAST,BEECH,BEERS,BEGAN,BEGIN,BEGUN,BEING,BELLE,BELLS,BELLY,BELOW,BELTS,BENCH,BENNY,BERRY,BETTY,BIBLE,BIKES,BILLS,BILLY,BIRDS,BIRTH,BITCH,BLACK,BLADE,BLAME,BLAND,BLANK,BLAST,BLAZE,BLEAK,BLEND,BLESS,BLIND,BLOCK,BLOKE,BLOND,BLOOD,BLOOM,BLOWN,BLOWS,BLUES,BLUNT,BOARD,BOATS,BOBBY,BOGUS,BOLTS,BOMBS,BONDS,BONES,BONUS,BOOKS,BOOST,BOOTS,BORED,BORNE,BOUND,BOWED,BOWEL,BOWLS,BOXER,BOXES,BRAIN,BRAKE,BRAND,BRASS,BRAVE,BREAD,BREAK,BREAM,BREED,BRICK,BRIDE,BRIEF,BRING,BRINK,BRISK,BROAD,BROKE,BROOK,BROOM,BROWN,BROWS,BRUSH,BUILD,BUILT,BULBS,BULKY,BULLS,BUNCH,BUNNY,BURKE,BURNS,BURNT,BURST,BUSES,BUYER,CABIN,CABLE,CACHE,CAKES,CALLS,CAMPS,CANAL,CANDY,CANOE,CANON,CARDS,CARED,CARER,CARES,CARGO,CAROL,CARRY,CASES,CATCH,CATER,CAUSE,CAVES,CEASE,CELLS,CENTS,CHAIN,CHAIR,CHALK,CHAOS,CHAPS,CHARM,CHART,CHASE,CHEAP,CHECK,CHEEK,CHEER,CHESS,CHEST,CHIEF,CHILD,CHILE,CHILL,CHINA,CHIPS,CHOIR,CHORD,CHOSE,CHUNK,CIDER,CIGAR,CITED,CITES,CIVIC,CIVIL,CLAIM,CLASH,CLASS,CLAWS,CLEAN,CLEAR,CLERK,CLICK,CLIFF,CLIMB,CLOAK,CLOCK,CLOSE,CLOTH,CLOUD,CLOWN,CLUBS,CLUES,CLUNG,COACH,COAST,COATS,COCOA,CODES,COINS,COLIN,COLON,COMES,COMIC,CORAL,CORPS,COSTA,COSTS,COUCH,COUGH,COULD,COUNT,COURT,COVER,CRACK,CRAFT,CRAIG,CRANE,CRASH,CRAZY,CREAM,CREED,CREPT,CREST,CREWE,CREWS,CRIED,CRIES,CRIME,CRISP,CROPS,CROSS,CROWD,CROWN,CRUDE,CRUEL,CRUST,CRYPT,CUBIC,CURLS,CURLY,CURRY,CURSE,CURVE,CYCLE,DADDY,DAILY,DAIRY,DAISY,DANCE,DANNY,DARED,DATED,DATES,DEALS,DEALT,DEATH,DEBTS,DEBUT,DECAY,DECOR,DEEDS,DEITY,DELAY,DENIS,DENSE,DEPOT,DEPTH,DERBY,DERRY,DESKS,DETER,DEVIL,DEVON,DIARY,DIETS,DIMLY,DIRTY,DISCO,DISCS,DISKS,DITCH,DIVED,DIZZY,DOCKS,DODGY,DOING,DOLLS,DOLLY,DONNA,DONOR,DOORS,DORIS,DOSES,DOUBT,DOUGH,DOVER,DOWNS,DOZEN,DRAFT,DRAIN,DRAMA,DRANK,DRAWN,DRAWS,DREAD,DREAM,DRESS,DRIED,DRIFT,DRILL,DRILY,DRINK,DRIVE,DROPS,DROVE,DROWN,DRUGS,DRUMS,DRUNK,DUCHY,DUCKS,DUNES,DUSTY,DUTCH,DWARF,DYING,EAGER,EAGLE,EARLY,EARTH,EASED,EATEN,EDGES,EERIE,EIGHT,ELBOW,ELDER,ELECT,ELITE,ELVES,EMPTY,ENDED,ENEMY,ENJOY,ENTER,ENTRY,ENVOY,EQUAL,ERECT,ERROR,ESSAY,ETHOS,EVENT,EVERY,EXACT,EXAMS,EXERT,EXILE,EXIST,EXTRA,FACED,FACES,FACTS,FADED,FAILS,FAINT,FAIRS,FAIRY,FAITH,FALLS,FALSE,FAMED,FANCY,FARES,FARMS,FATAL,FATTY,FAULT,FAUNA,FEARS,FEAST,FEELS,FELLA,FENCE,FERRY,FETAL,FETCH,FEVER,FEWER,FIBRE,FIELD,FIERY,FIFTH,FIFTY,FIGHT,FILED,FILES,FILLS,FILMS,FINAL,FINDS,FINED,FINER,FINES,FIRED,FIRES,FIRMS,FIRST,FIRTH,FISTS,FIVER,FIXED,FLAGS,FLAIR,FLAME,FLANK,FLASH,FLASK,FLATS,FLAWS,FLEET,FLESH,FLIES,FLINT,FLOAT,FLOCK,FLOOD,FLOOR,FLORA,FLOUR,FLOWN,FLOWS,FLUID,FLUNG,FLUSH,FLUTE,FOCAL,FOCUS,FOLDS,FOLKS,FOLLY,FONTS,FOODS,FOOLS,FORCE,FORMS,FORTH,FORTY,FORUM,FOUND,FOURS,FOXES,FOYER,FRAIL,FRAME,FRANC,FRANK,FRAUD,FREED,FRESH,FRIED,FROGS,FRONT,FROST,FROWN,FROZE,FRUIT,FUELS,FULLY,FUMES,FUNDS,FUNNY,GAINS,GAMES,GANGS,GASES,GATES,GAUGE,GAZED,GEESE,GEMMA,GENES,GENRE,GENUS,GHOST,GIANT,GIFTS,GIRLS,GIVEN,GIVES,GLARE,GLASS,GLEAM,GLOBE,GLOOM,GLORY,GLOSS,GLOVE,GOALS,GOATS,GOING,GOODS,GOOSE,GORGE,GRACE,GRADE,GRAIN,GRAND,GRANT,GRAPH,GRASP,GRASS,GRAVE,GREAT,GREED,GREEK,GREEN,GREET,GRIEF,GRILL,GRIPS,GROIN,GROOM,GROSS,GROUP,GROVE,GROWN,GROWS,GUARD,GUESS,GUEST,GUIDE,GUILD,GUILT,GUISE,GULLS,GULLY,GYPSY,HABIT,HAIRS,HAIRY,HALLS,HANDS,HANDY,HANGS,HAPPY,HARDY,HARRY,HARSH,HASTE,HASTY,HATCH,HATED,HATES,HAVEN,HAVOC,HAZEL,HEADS,HEADY,HEARD,HEARS,HEART,HEATH,HEAVY,HEDGE,HEELS,HEFTY,HEIRS,HELLO,HELPS,HENCE,HENRY,HERBS,HERDS,HILLS,HINTS,HIRED,HOBBY,HOLDS,HOLES,HOLLY,HOMES,HONEY,HOOKS,HOPED,HOPES,HORNS,HORSE,HOSTS,HOTEL,HOURS,HOUSE,HUMAN,HURRY,HURTS,HYMNS,ICING,ICONS,IDEAL,IDEAS,IDIOT,IMAGE,IMPLY,INDEX,INERT,INFER,INNER,INPUT,INTEL,IRONY,ISLES,ISSUE,ITEMS,IVORY,JAMES,JAPAN,JEANS,JELLY,JENNY,JERRY,JESUS,JEWEL,JIMMY,JOINS,JOINT,JOKES,JOLLY,JONES,JUDGE,JUICE,KEEPS,KELLY,KERRY,KICKS,KILLS,KINDS,KINGS,KNEES,KNELT,KNIFE,KNOCK,KNOTS,KNOWN,KNOWS,LABEL,LACKS,LAGER,LAKES,LAMBS,LAMPS,LANDS,LANES,LARGE,LASER,LASTS,LATER,LAUGH,LAWNS,LAYER,LEADS,LEAPT,LEARN,LEASE,LEAST,LEAVE,LEDGE,LEGAL,LEMON,LEVEL,LEVER,LEWIS,LIBEL,LIFTS,LIGHT,LIKED,LIKES,LIMBS,LIMIT,LINED,LINEN,LINER,LINES,LINKS,LIONS,LISTS,LITRE,LIVED,LIVER,LIVES,LOADS,LOANS,LOBBY,LOCAL,LOCKS,LOCUS,LODGE,LOFTY,LOGIC,LOOKS,LOOPS,LOOSE,LORDS,LORRY,LOSER,LOSES,LOTUS,LOUIS,LOVED,LOVER,LOVES,LOWER,LOYAL,LUCKY,LUMPS,LUNCH,LUNGS,LYING,LYNCH,MACHO,MADAM,MAGIC,MAINS,MAIZE,MAJOR,MAKER,MAKES,MALES,MANOR,MARCH,MARKS,MARRY,MARSH,MASKS,MASON,MATCH,MATES,MATHS,MAXIM,MAYBE,MAYOR,MEALS,MEANS,MEANT,MEDAL,MEDIA,MEETS,MENUS,MERCY,MERGE,MERIT,MERRY,MESSY,METAL,METER,METRE,MICRO,MIDST,MIGHT,MILES,MILLS,MINDS,MINER,MINES,MINOR,MINUS,MISTY,MIXED,MODEL,MODEM,MODES,MOIRA,MOIST,MOLES,MOLLA,MOLLY,MONEY,MONKS,MONTE,MONTH,MOODS,MOORS,MORAL,MORSE,MOSES,MOTIF,MOTOR,MOTTO,MOULD,MOUND,MOUNT,MOUSE,MOUTH,MOVED,MOVES,MOVIE,MUDDY,MUMMY,MUSED,MUSIC,MYTHS,NAILS,NAIVE,NAKED,NAMED,NAMES,NANCY,NANNY,NASTY,NAVAL,NAZIS,NECKS,NEEDS,NERVE,NESTS,NEVER,NEWER,NEWLY,NICER,NICHE,NICKY,NIECE,NIGHT,NINTH,NOBLE,NODES,NOISE,NOISY,NOMES,NORMS,NORTH,NOSES,NOTED,NOTES,NOVEL,NURSE,NUTTY,NYLON,OCCUR,OCEAN,ODDLY,ODOUR,OFFER,OFTEN,OLDER,OLIVE,ONION,ONSET,OPENS,OPERA,ORBIT,ORDER,ORGAN,OSCAR,OTHER,OUGHT,OUNCE,OUTER,OVERS,OVERT,OWNED,OWNER,OXIDE,OZONE,PACKS,PADDY,PAGES,PAINS,PAINT,PAIRS,PALMS,PANEL,PANIC,PANTS,PAPAL,PAPER,PARIS,PARKS,PARTS,PARTY,PASTA,PASTE,PATCH,PATHS,PATIO,PAUSE,PEACE,PEAKS,PEARL,PEARS,PEERS,PEGGY,PENAL,PENCE,PENIS,PENNY,PERRY,PESTS,PETER,PETTY,PHASE,PHONE,PHOTO,PIANO,PICKS,PIECE,PIERS,PILED,PILES,PILLS,PILOT,PINCH,PINTS,PIOUS,PIPER,PIPES,PITCH,PIZZA,PLACE,PLAIN,PLANE,PLANS,PLANT,PLATE,PLAYS,PLEAD,PLEAS,PLOTS,PLUMP,POEMS,POETS,POINT,POLAR,POLES,POLLS,POLLY,PONDS,POOLS,PORCH,PORES,PORTS,POSED,POSES,POSTS,POUND,POWER,PRESS,PRICE,PRIDE,PRIME,PRINT,PRIOR,PRIVY,PRIZE,PROBE,PRONE,PROOF,PROSE,PROUD,PROVE,PROXY,PULLS,PULSE,PUMPS,PUNCH,PUPIL,PUPPY,PURSE,QUEEN,QUERY,QUEST,QUEUE,QUICK,QUIET,QUITE,QUOTA,QUOTE,RACED,RACES,RADAR,RADIO,RAIDS,RAILS,RAISE,RALLY,RANGE,RANKS,RAPED,RAPID,RATED,RATES,RATIO,RAZOR,REACH,REACT,READS,READY,REALM,REBEL,REFER,REIGN,REINS,RELAX,REMIT,RENAL,RENEW,RENTS,REPAY,REPLY,RESIN,RESTS,RIDER,RIDGE,RIFLE,RIGHT,RIGID,RINGS,RIOTS,RISEN,RISES,RISKS,RISKY,RITES,RIVAL,RIVEN,RIVER,ROADS,ROBES,ROBIN,ROBOT,ROCKS,ROCKY,ROGER,ROGUE,ROLES,ROLLS,ROMAN,ROOFS,ROOMS,ROOTS,ROPES,ROSES,ROTOR,ROUGE,ROUGH,ROUND,ROUTE,ROVER,ROYAL,RUGBY,RUINS,RULED,RULER,RULES,RURAL,RUSTY,SADLY,SAFER,SAILS,SAINT,SALAD,SALES,SALLY,SALON,SALTS,SANDS,SANDY,SATIN,SAUCE,SAVED,SAVES,SCALE,SCALP,SCANT,SCARF,SCARS,SCENE,SCENT,SCOPE,SCORE,SCOTS,SCRAP,SCREW,SCRUM,SEALS,SEAMS,SEATS,SEEDS,SEEKS,SEEMS,SEIZE,SELLS,SENDS,SENSE,SERUM,SERVE,SEVEN,SEXES,SHADE,SHADY,SHAFT,SHAKE,SHAKY,SHALL,SHAME,SHAPE,SHARE,SHARP,SHEEP,SHEER,SHEET,SHELF,SHELL,SHIFT,SHINY,SHIPS,SHIRE,SHIRT,SHOCK,SHOES,SHONE,SHOOK,SHOOT,SHOPS,SHORE,SHORT,SHOTS,SHOUT,SHOWN,SHOWS,SHRUG,SIDES,SIEGE,SIGHT,SIGNS,SILLY,SINCE,SINGS,SITES,SIXTH,SIXTY,SIZES,SKIES,SKILL,SKINS,SKIRT,SKULL,SLABS,SLATE,SLAVE,SLEEK,SLEEP,SLEPT,SLICE,SLIDE,SLOPE,SLOTS,SLUMP,SMALL,SMART,SMELL,SMILE,SMITH,SMOKE,SNAKE,SOBER,SOCKS,SOILS,SOLAR,SOLID,SOLVE,SONGS,SORRY,SORTS,SOULS,SOUND,SOUTH,SPACE,SPADE,SPAIN,SPARE,SPARK,SPATE,SPEAK,SPEED,SPELL,SPEND,SPENT,SPIES,SPINE,SPLIT,SPOIL,SPOKE,SPOON,SPORT,SPOTS,SPRAY,SPURS,SQUAD,STACK,STAFF,STAGE,STAIN,STAIR,STAKE,STALE,STALL,STAMP,STAND,STARE,STARK,STARS,START,STATE,STAYS,STEAK,STEAL,STEAM,STEEL,STEEP,STEER,STEMS,STEPS,STERN,STICK,STIFF,STILL,STING,STOCK,STOKE,STOLE,STONE,STONY,STOOD,STOOL,STOPS,STORE,STORM,STORY,STOUT,STOVE,STRAP,STRAW,STRAY,STRIP,STUCK,STUDY,STUFF,STYLE,SUEDE,SUGAR,SUITE,SUITS,SUNNY,SUPER,SURGE,SWANS,SWEAR,SWEAT,SWEEP,SWEET,SWEPT,SWIFT,SWING,SWISS,SWORD,SWORE,SWORN,SWUNG,SYBIL,TABLE,TACIT,TAILS,TAKEN,TAKES,TALES,TALKS,TANKS,TAPES,TASKS,TASTE,TASTY,TAXED,TAXES,TAXIS,TEACH,TEAMS,TEARS,TEDDY,TEENS,TEETH,TELLS,TELLY,TEMPO,TENDS,TENOR,TENSE,TENTH,TENTS,TERMS,TERRY,TESTS,TEXAS,TEXTS,THANK,THEFT,THEIR,THEME,THERE,THESE,THICK,THIEF,THIGH,THING,THINK,THIRD,THOSE,THREE,THREW,THROW,THUMB,TIDAL,TIDES,TIGER,TIGHT,TILES,TIMES,TIMID,TIRED,TITLE,TOAST,TODAY,TOKEN,TOMMY,TONES,TONIC,TONNE,TOOLS,TOOTH,TOPAZ,TOPIC,TORCH,TOTAL,TOUCH,TOUGH,TOURS,TOWEL,TOWER,TOWNS,TOXIC,TRACE,TRACK,TRACT,TRADE,TRAIL,TRAIN,TRAIT,TRAMP,TRAMS,TRAYS,TREAT,TREES,TREND,TRIAL,TRIBE,TRICK,TRIED,TRIES,TRIPS,TROOP,TROUT,TRUCE,TRUCK,TRULY,TRUNK,TRUST,TRUTH,TUBES,TUMMY,TUNES,TUNIC,TURKS,TURNS,TUTOR,TWICE,TWINS,TWIST,TYING,TYPES,TYRES,ULCER,UNCLE,UNDER,UNDUE,UNFIT,UNION,UNITE,UNITS,UNITY,UNTIL,UPPER,UPSET,URBAN,URGED,URINE,USAGE,USERS,USING,USUAL,UTTER,VAGUE,VALID,VALUE,VALVE,VAULT,VEINS,VENUE,VENUS,VERBS,VERGE,VERSE,VICAR,VIDEO,VIEWS,VILLA,VINES,VINYL,VIRUS,VISIT,VITAL,VIVID,VOCAL,VODKA,VOICE,VOTED,VOTER,VOTES,VOWED,VOWEL,WAGES,WAGON,WAIST,WAITS,WALES,WALKS,WALLS,WANTS,WARDS,WARES,WARNS,WASTE,WATCH,WATER,WATTS,WAVED,WAVES,WEARS,WEARY,WEBER,WEDGE,WEEDS,WEEKS,WEIGH,WEIRD,WELLS,WELSH,WHALE,WHEAT,WHEEL,WHERE,WHICH,WHILE,WHITE,WHOLE,WHOSE,WIDEN,WIDER,WIDOW,WIDTH,WIGAN,WIGHT,WILLS,WINDS,WINDY,WINES,WINGS,WIPED,WIRES,WISER,WITCH,WITTY,WIVES,WOKEN,WOMAN,WOMEN,WOODS,WORDS,WORKS,WORLD,WORMS,WORRY,WORSE,WORST,WORTH,WOULD,WOUND,WOVEN,WRATH,WRECK,WRIST,WRITE,WRONG,WROTE,WRYLY,YACHT,YARDS,YEARS,YEAST,YIELD,YOUNG,YOURS,YOUTH,ZONES".Split(',');
    private static readonly HashSet<string> _all5LetterWords = new HashSet<string>(@"AAHED,AALII,AARGH,AARTI,ABACA,ABACI,ABACK,ABACS,ABAFT,ABAKA,ABAMP,ABAND,ABASE,ABASH,ABASK,ABATE,ABAYA,ABBAS,ABBED,ABBES,ABBEY,ABBOT,ABCEE,ABEAM,ABEAR,ABELE,ABETS,ABHOR,ABIDE,ABIES,ABLED,ABLER,ABLES,ABLET,ABLOW,ABMHO,ABODE,ABOHM,ABOIL,ABOMA,ABOON,ABORD,ABORE,ABORT,ABOUT,ABOVE,ABRAM,ABRAY,ABRIM,ABRIN,ABRIS,ABSEY,ABSIT,ABUNA,ABUNE,ABUSE,ABUTS,ABUZZ,ABYES,ABYSM,ABYSS,ACAIS,ACARI,ACCAS,ACCOY,ACERB,ACERS,ACETA,ACHED,ACHES,ACHOO,ACIDS,ACIDY,ACING,ACINI,ACKEE,ACKER,ACMES,ACMIC,ACNED,ACNES,ACOCK,ACOLD,ACORN,ACRED,ACRES,ACRID,ACTED,ACTIN,ACTON,ACTOR,ACUTE,ACYLS,ADAGE,ADAPT,ADAWS,ADAYS,ADDAX,ADDED,ADDER,ADDIO,ADDLE,ADEEM,ADEPT,ADHAN,ADIEU,ADIOS,ADITS,ADMAN,ADMEN,ADMIN,ADMIT,ADMIX,ADOBE,ADOBO,ADOPT,ADORE,ADORN,ADOWN,ADOZE,ADRAD,ADRED,ADSUM,ADUKI,ADULT,ADUNC,ADUST,ADVEW,ADYTA,ADZED,ADZES,AECIA,AEDES,AEGIS,AEONS,AERIE,AEROS,AESIR,AFALD,AFARA,AFARS,AFEAR,AFFIX,AFIRE,AFLAJ,AFOOT,AFORE,AFOUL,AFRIT,AFROS,AFTER,AGAIN,AGAMA,AGAMI,AGAPE,AGARS,AGAST,AGATE,AGAVE,AGAZE,AGENE,AGENT,AGERS,AGGER,AGGIE,AGGRI,AGGRO,AGGRY,AGHAS,AGILA,AGILE,AGING,AGIOS,AGISM,AGIST,AGITA,AGLEE,AGLET,AGLEY,AGLOO,AGLOW,AGLUS,AGMAS,AGOGE,AGONE,AGONS,AGONY,AGOOD,AGORA,AGREE,AGRIA,AGRIN,AGUED,AGUES,AGUTI,AHEAD,AHEAP,AHENT,AHIGH,AHIND,AHING,AHINT,AHOLD,AHULL,AHURU,AIDED,AIDER,AIDES,AIDOI,AIDOS,AIERY,AIGAS,AILED,AIMED,AIMER,AINEE,AINGA,AIOLI,AIRED,AIRER,AIRNS,AIRTH,AIRTS,AISLE,AITCH,AITUS,AIVER,AIZLE,AJIVA,AJUGA,AJWAN,AKEES,AKELA,AKENE,AKING,AKITA,AKKAS,ALAAP,ALACK,ALAMO,ALAND,ALANE,ALANG,ALANS,ALANT,ALAPA,ALAPS,ALARM,ALARY,ALATE,ALAYS,ALBAS,ALBEE,ALBUM,ALCID,ALCOS,ALDEA,ALDER,ALDOL,ALECK,ALECS,ALEFS,ALEFT,ALEPH,ALERT,ALEWS,ALEYE,ALFAS,ALGAE,ALGAL,ALGAS,ALGID,ALGIN,ALGOR,ALGUM,ALIAS,ALIBI,ALIEN,ALIFS,ALIGN,ALIKE,ALINE,ALIST,ALIVE,ALIYA,ALKIE,ALKOS,ALKYD,ALKYL,ALLAY,ALLEE,ALLEL,ALLEY,ALLIS,ALLOD,ALLOT,ALLOW,ALLOY,ALLYL,ALMAH,ALMAS,ALMEH,ALMES,ALMUD,ALMUG,ALODS,ALOED,ALOES,ALOFT,ALOHA,ALOIN,ALONE,ALONG,ALOOF,ALOUD,ALOWE,ALPHA,ALTAR,ALTER,ALTHO,ALTOS,ALULA,ALUMS,ALURE,ALWAY,AMAHS,AMAIN,AMASS,AMATE,AMAUT,AMAZE,AMBAN,AMBER,AMBIT,AMBLE,AMBOS,AMBRY,AMEBA,AMEER,AMEND,AMENE,AMENS,AMENT,AMIAS,AMICE,AMICI,AMIDE,AMIDO,AMIDS,AMIES,AMIGA,AMIGO,AMINE,AMINO,AMINS,AMIRS,AMISS,AMITY,AMLAS,AMMAN,AMMON,AMMOS,AMNIA,AMNIC,AMNIO,AMOKS,AMOLE,AMONG,AMORT,AMOUR,AMOVE,AMOWT,AMPED,AMPLE,AMPLY,AMPUL,AMRIT,AMUCK,AMUSE,AMYLS,ANANA,ANATA,ANCHO,ANCLE,ANCON,ANDRO,ANEAR,ANELE,ANENT,ANGAS,ANGEL,ANGER,ANGLE,ANGLO,ANGRY,ANGST,ANIGH,ANILE,ANILS,ANIMA,ANIME,ANIMI,ANION,ANISE,ANKER,ANKHS,ANKLE,ANKUS,ANLAS,ANNAL,ANNAS,ANNAT,ANNEX,ANNOY,ANNUL,ANOAS,ANODE,ANOLE,ANOMY,ANSAE,ANTAE,ANTAR,ANTAS,ANTED,ANTES,ANTIC,ANTIS,ANTRA,ANTRE,ANTSY,ANVIL,ANYON,AORTA,APACE,APAGE,APAID,APART,APAYD,APAYS,APEAK,APEEK,APERS,APERT,APERY,APGAR,APHID,APHIS,APIAN,APING,APIOL,APISH,APISM,APNEA,APODE,APODS,APOOP,APORT,APPAL,APPAY,APPEL,APPLE,APPLY,APPRO,APPUI,APPUY,APRES,APRON,APSES,APSIS,APSOS,APTED,APTER,APTLY,AQUAE,AQUAS,ARABA,ARAKS,ARAME,ARARS,ARBAS,ARBOR,ARCED,ARCUS,ARDEB,ARDOR,ARDRI,AREAD,AREAE,AREAL,AREAR,AREAS,ARECA,AREDD,AREDE,AREFY,AREIC,ARENA,ARENE,AREPA,ARERE,ARETE,ARETS,ARETT,ARGAL,ARGAN,ARGIL,ARGLE,ARGOL,ARGON,ARGOT,ARGUE,ARGUS,ARHAT,ARIAS,ARIEL,ARIKI,ARILS,ARIOT,ARISE,ARISH,ARKED,ARLED,ARLES,ARMED,ARMER,ARMET,ARMIL,ARMOR,ARNAS,ARNUT,AROBA,AROHA,AROID,AROMA,AROSE,ARPAS,ARPEN,ARRAH,ARRAS,ARRAY,ARRET,ARRIS,ARROW,ARSED,ARSES,ARSEY,ARSIS,ARSON,ARTAL,ARTEL,ARTIC,ARTIS,ARTSY,ARUHE,ARUMS,ARVAL,ARVOS,ARYLS,ASANA,ASCOT,ASCUS,ASDIC,ASHED,ASHEN,ASHES,ASHET,ASIDE,ASKED,ASKER,ASKEW,ASKOI,ASKOS,ASPEN,ASPER,ASPIC,ASPIS,ASPRO,ASSAI,ASSAM,ASSAY,ASSES,ASSET,ASSEZ,ASSOT,ASTER,ASTIR,ASTUN,ASWAY,ASWIM,ASYLA,ATAPS,ATAXY,ATIGI,ATILT,ATIMY,ATLAS,ATMAN,ATMAS,ATOCS,ATOKE,ATOKS,ATOLL,ATOMS,ATOMY,ATONE,ATONY,ATOPY,ATRIA,ATRIP,ATTAP,ATTAR,ATTIC,ATUAS,AUDAD,AUDIO,AUDIT,AUGER,AUGHT,AUGUR,AULAS,AULIC,AULOI,AULOS,AUMIL,AUNES,AUNTS,AUNTY,AURAE,AURAL,AURAR,AURAS,AUREI,AURES,AURIC,AURIS,AURUM,AUTOS,AUXIN,AVAIL,AVALE,AVANT,AVAST,AVELS,AVENS,AVERS,AVERT,AVGAS,AVIAN,AVINE,AVION,AVISE,AVISO,AVIZE,AVOID,AVOWS,AVYZE,AWAIT,AWAKE,AWARD,AWARE,AWARN,AWASH,AWATO,AWAVE,AWAYS,AWDLS,AWEEL,AWETO,AWFUL,AWING,AWMRY,AWNED,AWNER,AWOKE,AWOLS,AWORK,AXELS,AXIAL,AXILE,AXILS,AXING,AXIOM,AXION,AXITE,AXLED,AXLES,AXMAN,AXMEN,AXOID,AXONE,AXONS,AYAHS,AYELP,AYGRE,AYINS,AYONT,AYRES,AYRIE,AZANS,AZIDE,AZIDO,AZINE,AZLON,AZOIC,AZOLE,AZONS,AZOTE,AZOTH,AZUKI,AZURE,AZURN,AZURY,AZYGY,AZYME,AZYMS,BAAED,BAALS,BABAS,BABEL,BABES,BABKA,BABOO,BABUL,BABUS,BACCA,BACCO,BACCY,BACHA,BACHS,BACKS,BACON,BADDY,BADGE,BADLY,BAELS,BAFFS,BAFFY,BAFTS,BAGEL,BAGGY,BAGHS,BAGIE,BAHTS,BAHUT,BAILS,BAIRN,BAITH,BAITS,BAIZA,BAIZE,BAJAN,BAJRA,BAJRI,BAJUS,BAKED,BAKEN,BAKER,BAKES,BAKRA,BALAS,BALDS,BALDY,BALED,BALER,BALES,BALKS,BALKY,BALLS,BALLY,BALMS,BALMY,BALOO,BALSA,BALTI,BALUN,BALUS,BAMBI,BANAK,BANAL,BANCO,BANCS,BANDA,BANDH,BANDS,BANDY,BANED,BANES,BANGS,BANIA,BANJO,BANKS,BANNS,BANTS,BANTU,BANTY,BAPUS,BARBE,BARBS,BARBY,BARCA,BARDE,BARDO,BARDS,BARDY,BARED,BARER,BARES,BARFS,BARGE,BARIC,BARKS,BARKY,BARMS,BARMY,BARNS,BARNY,BARON,BARPS,BARRA,BARRE,BARRO,BARRY,BARYE,BASAL,BASAN,BASED,BASER,BASES,BASHO,BASIC,BASIL,BASIN,BASIS,BASKS,BASON,BASSE,BASSI,BASSO,BASSY,BASTA,BASTE,BASTI,BASTO,BASTS,BATCH,BATED,BATES,BATHE,BATHS,BATIK,BATON,BATTA,BATTS,BATTU,BATTY,BAUDS,BAUKS,BAULK,BAURS,BAVIN,BAWDS,BAWDY,BAWLS,BAWNS,BAWRS,BAWTY,BAYED,BAYES,BAYLE,BAYOU,BAYTS,BAZAR,BAZOO,BEACH,BEADS,BEADY,BEAKS,BEAKY,BEAMS,BEAMY,BEANO,BEANS,BEANY,BEARD,BEARE,BEARS,BEAST,BEATH,BEATS,BEATY,BEAUS,BEAUT,BEAUX,BEBOP,BECAP,BECKE,BECKS,BEDAD,BEDEL,BEDES,BEDEW,BEDIM,BEDYE,BEECH,BEEDI,BEEFS,BEEFY,BEEPS,BEERS,BEERY,BEETS,BEFIT,BEFOG,BEGAD,BEGAN,BEGAR,BEGAT,BEGEM,BEGET,BEGIN,BEGOT,BEGUM,BEGUN,BEIGE,BEIGY,BEING,BEKAH,BELAH,BELAR,BELAY,BELCH,BELEE,BELGA,BELIE,BELLE,BELLS,BELLY,BELON,BELOW,BELTS,BEMAD,BEMAS,BEMIX,BEMUD,BENCH,BENDS,BENDY,BENES,BENET,BENIS,BENNE,BENNI,BENNY,BENTO,BENTS,BENTY,BEPAT,BERAY,BERES,BERET,BERGS,BERKO,BERKS,BERME,BERMS,BEROB,BERRY,BERTH,BERYL,BESAT,BESAW,BESEE,BESES,BESET,BESIT,BESOM,BESOT,BESTI,BESTS,BETAS,BETED,BETEL,BETES,BETHS,BETID,BETON,BETTA,BETTY,BEVEL,BEVER,BEVOR,BEVUE,BEVVY,BEWET,BEWIG,BEZEL,BEZES,BEZIL,BHAJI,BHANG,BHELS,BHOOT,BHUNA,BHUTS,BIALI,BIALY,BIBBS,BIBLE,BICCY,BICEP,BICES,BIDDY,BIDED,BIDER,BIDES,BIDET,BIDIS,BIDON,BIELD,BIERS,BIFFO,BIFFS,BIFFY,BIFID,BIGAE,BIGGS,BIGGY,BIGHA,BIGHT,BIGLY,BIGOS,BIGOT,BIJOU,BIKED,BIKER,BIKES,BIKIE,BILBO,BILBY,BILED,BILES,BILGE,BILGY,BILKS,BILLS,BILLY,BIMAH,BIMAS,BIMBO,BINAL,BINDI,BINDS,BINER,BINES,BINGE,BINGO,BINGS,BINGY,BINIT,BINKS,BINTS,BIOGS,BIOME,BIONT,BIOTA,BIPED,BIPOD,BIRCH,BIRDS,BIRKS,BIRLE,BIRLS,BIROS,BIRRS,BIRSE,BIRSY,BIRTH,BISES,BISKS,BISON,BITCH,BITER,BITES,BITOS,BITOU,BITSY,BITTE,BITTS,BITTY,BIVIA,BIVVY,BIZES,BIZZO,BIZZY,BLABS,BLACK,BLADE,BLADS,BLADY,BLAER,BLAES,BLAFF,BLAGS,BLAHS,BLAIN,BLAME,BLAMS,BLAND,BLANK,BLARE,BLART,BLASE,BLASH,BLAST,BLATE,BLATS,BLATT,BLAUD,BLAWN,BLAWS,BLAYS,BLAZE,BLEAK,BLEAR,BLEAT,BLEBS,BLEED,BLEEP,BLEES,BLEND,BLENT,BLERT,BLESS,BLEST,BLETS,BLEYS,BLIMP,BLIMY,BLIND,BLING,BLINI,BLINK,BLINS,BLINY,BLIPS,BLISS,BLIST,BLITE,BLITZ,BLIVE,BLOAT,BLOBS,BLOCK,BLOCS,BLOGS,BLOKE,BLOND,BLOOD,BLOOM,BLOOP,BLORE,BLOTS,BLOWN,BLOWS,BLOWY,BLUBS,BLUDE,BLUDY,BLUED,BLUER,BLUES,BLUET,BLUEY,BLUFF,BLUID,BLUME,BLUNK,BLUNT,BLURB,BLURS,BLURT,BLUSH,BLYPE,BOABS,BOAKS,BOARD,BOARS,BOART,BOAST,BOATS,BOBAC,BOBAK,BOBAS,BOBBY,BOBOL,BOCCA,BOCCE,BOCCI,BOCHE,BOCKS,BODED,BODES,BODGE,BODLE,BOEPS,BOETS,BOEUF,BOFFO,BOFFS,BOGAN,BOGEY,BOGGY,BOGIE,BOGLE,BOGUS,BOHEA,BOHOS,BOILS,BOING,BOINK,BOITE,BOKED,BOKES,BOKOS,BOLAR,BOLAS,BOLDS,BOLES,BOLIX,BOLLS,BOLOS,BOLTS,BOLUS,BOMAS,BOMBE,BOMBO,BOMBS,BONCE,BONDS,BONED,BONER,BONES,BONEY,BONGO,BONGS,BONIE,BONKS,BONNE,BONNY,BONUS,BONZA,BONZE,BOOBS,BOOBY,BOODY,BOOED,BOOFY,BOOGY,BOOHS,BOOKS,BOOKY,BOOLS,BOOMS,BOOMY,BOONG,BOONS,BOORD,BOORS,BOOSE,BOOST,BOOTH,BOOTS,BOOTY,BOOZE,BOOZY,BORAK,BORAL,BORAS,BORAX,BORDE,BORDS,BORED,BOREE,BOREL,BORER,BORES,BORGO,BORIC,BORKS,BORMS,BORNA,BORNE,BORON,BORTS,BORTY,BORTZ,BOSKS,BOSKY,BOSOM,BOSON,BOSSY,BOSUN,BOTAS,BOTCH,BOTEL,BOTHY,BOTTE,BOTTS,BOTTY,BOUGE,BOUGH,BOUKS,BOULE,BOULT,BOUND,BOUNS,BOURD,BOURG,BOURN,BOUSE,BOUSY,BOUTS,BOVID,BOWAT,BOWED,BOWEL,BOWER,BOWES,BOWET,BOWIE,BOWLS,BOWNE,BOWRS,BOWSE,BOXED,BOXEN,BOXER,BOXES,BOYAR,BOYAU,BOYED,BOYFS,BOYGS,BOYLA,BOYOS,BOYSY,BOZOS,BRAAI,BRACE,BRACH,BRACK,BRACT,BRADS,BRAES,BRAGS,BRAID,BRAIL,BRAIN,BRAKE,BRAKS,BRAKY,BRAME,BRAND,BRANK,BRANS,BRANT,BRASH,BRASS,BRAST,BRATS,BRAVA,BRAVE,BRAVI,BRAVO,BRAWL,BRAWN,BRAWS,BRAXY,BRAYS,BRAZA,BRAZE,BREAD,BREAK,BREAM,BREDE,BREDS,BREED,BREEM,BREER,BREES,BREID,BREIS,BREME,BRENS,BRENT,BRERE,BRERS,BREVE,BREWS,BREYS,BRIAR,BRIBE,BRICK,BRIDE,BRIEF,BRIER,BRIES,BRIGS,BRIKS,BRILL,BRIMS,BRINE,BRING,BRINK,BRINS,BRINY,BRIOS,BRISE,BRISK,BRISS,BRITH,BRITS,BRITT,BRIZE,BROAD,BROCH,BROCK,BRODS,BROGH,BROGS,BROIL,BROKE,BROME,BROMO,BRONC,BROND,BROOD,BROOK,BROOL,BROOM,BROOS,BROSE,BROSY,BROTH,BROWN,BROWS,BRUGH,BRUIN,BRUIT,BRULE,BRUME,BRUNG,BRUNT,BRUSH,BRUSK,BRUST,BRUTE,BRUTS,BUATS,BUAZE,BUBAL,BUBAS,BUBBA,BUBBY,BUBUS,BUCHU,BUCKO,BUCKS,BUCKU,BUDAS,BUDDY,BUDGE,BUDIS,BUDOS,BUFFA,BUFFE,BUFFI,BUFFO,BUFFS,BUFFY,BUFOS,BUGGY,BUGLE,BUHLS,BUHRS,BUIKS,BUILD,BUILT,BUIST,BUKES,BULBS,BULGE,BULGY,BULKS,BULKY,BULLA,BULLS,BULLY,BULSE,BUMBO,BUMFS,BUMPH,BUMPS,BUMPY,BUNAS,BUNCE,BUNCH,BUNCO,BUNDE,BUNDH,BUNDS,BUNDT,BUNDU,BUNDY,BUNGS,BUNGY,BUNIA,BUNJE,BUNJY,BUNKO,BUNKS,BUNNS,BUNNY,BUNTS,BUNTY,BUNYA,BUOYS,BUPPY,BURAN,BURAS,BURBS,BURDS,BURET,BURGH,BURGS,BURIN,BURKA,BURKE,BURKS,BURLS,BURLY,BURNS,BURNT,BUROO,BURPS,BURQA,BURRO,BURRS,BURRY,BURSA,BURSE,BURST,BUSBY,BUSED,BUSES,BUSHY,BUSKS,BUSKY,BUSSU,BUSTI,BUSTS,BUSTY,BUTCH,BUTEO,BUTES,BUTLE,BUTTE,BUTTS,BUTTY,BUTUT,BUTYL,BUXOM,BUYER,BUZZY,BWANA,BWAZI,BYDED,BYDES,BYKED,BYKES,BYLAW,BYRES,BYRLS,BYSSI,BYTES,BYWAY,CAAED,CABAL,CABAS,CABBY,CABER,CABIN,CABLE,CABOB,CABOC,CABRE,CACAO,CACAS,CACHE,CACKY,CACTI,CADDY,CADEE,CADES,CADET,CADGE,CADGY,CADIE,CADIS,CADRE,CAECA,CAESE,CAFES,CAFFS,CAGED,CAGER,CAGES,CAGEY,CAGOT,CAHOW,CAIDS,CAINS,CAIRD,CAIRN,CAJON,CAJUN,CAKED,CAKES,CAKEY,CALFS,CALID,CALIF,CALIX,CALKS,CALLA,CALLS,CALMS,CALMY,CALOS,CALPA,CALPS,CALVE,CALYX,CAMAN,CAMAS,CAMEL,CAMEO,CAMES,CAMIS,CAMOS,CAMPI,CAMPO,CAMPS,CAMPY,CAMUS,CANAL,CANDY,CANED,CANEH,CANER,CANES,CANGS,CANID,CANNA,CANNS,CANNY,CANOE,CANON,CANSO,CANST,CANTO,CANTS,CANTY,CAPAS,CAPED,CAPER,CAPES,CAPHS,CAPIZ,CAPLE,CAPON,CAPOS,CAPOT,CAPUL,CAPUT,CARAP,CARAT,CARBO,CARBS,CARBY,CARDI,CARDS,CARDY,CARED,CARER,CARES,CARET,CAREX,CARGO,CARKS,CARLE,CARLS,CARNS,CARNY,CAROB,CAROL,CAROM,CARPI,CARPS,CARRS,CARRY,CARSE,CARTA,CARTE,CARTS,CARVE,CARVY,CASAS,CASCO,CASED,CASES,CASKS,CASKY,CASTE,CASTS,CASUS,CATCH,CATER,CATES,CATTY,CAUDA,CAUKS,CAULD,CAULK,CAULS,CAUMS,CAUPS,CAUSA,CAUSE,CAVAS,CAVED,CAVEL,CAVER,CAVES,CAVIE,CAVIL,CAWED,CAWKS,CAXON,CEASE,CEAZE,CEBID,CECAL,CECUM,CEDAR,CEDED,CEDER,CEDES,CEDIS,CEIBA,CEILI,CEILS,CELEB,CELLA,CELLI,CELLO,CELLS,CELOM,CELTS,CENSE,CENTO,CENTS,CENTU,CEORL,CEPES,CERCI,CERED,CERES,CERGE,CERIA,CERIC,CERNE,CEROS,CERTS,CESSE,CESTA,CESTI,CETES,CETYL,CHACE,CHACK,CHACO,CHADO,CHADS,CHAFE,CHAFF,CHAFT,CHAIN,CHAIR,CHAIS,CHALK,CHALS,CHAMP,CHAMS,CHANG,CHANK,CHANT,CHAOS,CHAPE,CHAPS,CHAPT,CHARA,CHARD,CHARE,CHARK,CHARM,CHARR,CHARS,CHART,CHARY,CHASE,CHASM,CHATS,CHAVE,CHAVS,CHAWK,CHAWS,CHAYA,CHAYS,CHEAP,CHEAT,CHECK,CHEEK,CHEEP,CHEER,CHEFS,CHEKA,CHELA,CHELP,CHEMO,CHERE,CHERT,CHESS,CHEST,CHETH,CHEVY,CHEWS,CHEWY,CHIAO,CHIAS,CHIBS,CHICA,CHICH,CHICK,CHICO,CHICS,CHIDE,CHIEF,CHIEL,CHIKS,CHILD,CHILE,CHILI,CHILL,CHIMB,CHIME,CHIMO,CHIMP,CHINA,CHINE,CHINK,CHINO,CHINS,CHIPS,CHIRK,CHIRL,CHIRM,CHIRO,CHIRP,CHIRR,CHIRT,CHIRU,CHITS,CHIVE,CHIVS,CHIVY,CHIZZ,CHOCK,CHOCO,CHOCS,CHODE,CHOGS,CHOIR,CHOKE,CHOKO,CHOKY,CHOLA,CHOLI,CHOLO,CHOMP,CHONS,CHOOF,CHOOK,CHOOM,CHOPS,CHORD,CHORE,CHOSE,CHOTA,CHOTT,CHOUT,CHOUX,CHOWK,CHOWS,CHUBS,CHUCK,CHUFA,CHUFF,CHUGS,CHUMP,CHUMS,CHUNK,CHURL,CHURN,CHURR,CHUSE,CHUTE,CHYLE,CHYME,CHYND,CIAOS,CIBOL,CIDED,CIDER,CIDES,CIELS,CIGAR,CIGGY,CILIA,CILLS,CIMAR,CIMEX,CINCH,CINCT,CINES,CIONS,CIPPI,CIRCA,CIRCS,CIRES,CIRLS,CIRRI,CISCO,CISSY,CISTS,CITAL,CITED,CITER,CITES,CIVES,CIVET,CIVIC,CIVIE,CIVIL,CIVVY,CLACH,CLACK,CLADE,CLADS,CLAES,CLAGS,CLAIM,CLAME,CLAMP,CLAMS,CLANG,CLANK,CLANS,CLAPS,CLAPT,CLARO,CLART,CLARY,CLASH,CLASP,CLASS,CLAST,CLATS,CLAUT,CLAVE,CLAVI,CLAWS,CLAYS,CLEAN,CLEAR,CLEAT,CLECK,CLEEK,CLEEP,CLEFS,CLEFT,CLEGS,CLEIK,CLEMS,CLEPE,CLEPT,CLERK,CLEVE,CLEWS,CLICK,CLIED,CLIES,CLIFF,CLIFT,CLIMB,CLIME,CLINE,CLING,CLINK,CLINT,CLIPE,CLIPS,CLIPT,CLOAK,CLOAM,CLOCK,CLODS,CLOFF,CLOGS,CLOKE,CLOMB,CLOMP,CLONE,CLONK,CLONS,CLOOP,CLOOT,CLOPS,CLOSE,CLOTE,CLOTH,CLOTS,CLOUD,CLOUR,CLOUS,CLOUT,CLOVE,CLOWN,CLOWS,CLOYE,CLOYS,CLOZE,CLUBS,CLUCK,CLUED,CLUES,CLUMP,CLUNG,CLUNK,CLYPE,CNIDA,COACH,COACT,COALA,COALS,COALY,COAPT,COARB,COAST,COATE,COATI,COATS,COBBS,COBBY,COBIA,COBLE,COBRA,COBZA,COCAS,COCCI,COCCO,COCKS,COCKY,COCOA,COCOS,CODAS,CODEC,CODED,CODEN,CODER,CODES,CODEX,CODON,COEDS,COFFS,COGIE,COGON,COGUE,COHAB,COHOE,COHOG,COHOS,COIFS,COIGN,COILS,COINS,COIRS,COITS,COKED,COKES,COLAS,COLBY,COLDS,COLED,COLES,COLEY,COLIC,COLIN,COLLS,COLLY,COLOG,COLON,COLOR,COLTS,COLZA,COMAE,COMAL,COMAS,COMBE,COMBI,COMBO,COMBS,COMBY,COMER,COMES,COMET,COMFY,COMIC,COMIX,COMMA,COMMO,COMMS,COMMY,COMPO,COMPS,COMPT,COMTE,COMUS,CONCH,CONDO,CONED,CONES,CONEY,CONFS,CONGA,CONGE,CONGO,CONIA,CONIC,CONIN,CONKS,CONKY,CONNE,CONNS,CONTE,CONTO,CONUS,CONVO,COOCH,COOED,COOEE,COOER,COOEY,COOFS,COOKS,COOKY,COOLS,COOLY,COOMB,COOMS,COOMY,COONS,COOPS,COOPT,COOST,COOTS,COOZE,COPAL,COPAY,COPED,COPEN,COPER,COPES,COPPY,COPRA,COPSE,COPSY,CORAL,CORAM,CORBE,CORBY,CORDS,CORED,CORER,CORES,COREY,CORGI,CORIA,CORKS,CORKY,CORMS,CORNI,CORNO,CORNS,CORNU,CORNY,CORPS,CORSE,CORSO,COSEC,COSED,COSES,COSET,COSEY,COSIE,COSTA,COSTE,COSTS,COTAN,COTED,COTES,COTHS,COTTA,COTTS,COUCH,COUDE,COUGH,COULD,COUNT,COUPE,COUPS,COURB,COURD,COURE,COURS,COURT,COUTH,COVED,COVEN,COVER,COVES,COVET,COVEY,COVIN,COWAL,COWAN,COWED,COWER,COWKS,COWLS,COWPS,COWRY,COXAE,COXAL,COXED,COXES,COYED,COYER,COYLY,COYPU,COZED,COZEN,COZES,COZEY,COZIE,CRAAL,CRABS,CRACK,CRAFT,CRAGS,CRAIC,CRAIG,CRAKE,CRAME,CRAMP,CRAMS,CRANE,CRANK,CRANS,CRAPE,CRAPS,CRAPY,CRARE,CRASH,CRASS,CRATE,CRAVE,CRAWL,CRAWS,CRAYS,CRAZE,CRAZY,CREAK,CREAM,CREDO,CREDS,CREED,CREEK,CREEL,CREEP,CREES,CREME,CREMS,CRENA,CREPE,CREPT,CREPY,CRESS,CREST,CREWE,CREWS,CRIBS,CRICK,CRIED,CRIER,CRIES,CRIME,CRIMP,CRIMS,CRINE,CRIOS,CRIPE,CRISE,CRISP,CRITH,CRITS,CROAK,CROCI,CROCK,CROCS,CROFT,CROGS,CROMB,CROME,CRONE,CRONK,CRONY,CROOK,CROOL,CROON,CROPS,CRORE,CROSS,CROST,CROUP,CROUT,CROWD,CROWN,CROWS,CROZE,CRUCK,CRUDE,CRUDS,CRUDY,CRUEL,CRUES,CRUET,CRUMB,CRUMP,CRUOR,CRURA,CRUSE,CRUSH,CRUST,CRUSY,CRUVE,CRWTH,CRYPT,CTENE,CUBBY,CUBEB,CUBED,CUBER,CUBES,CUBIC,CUBIT,CUDDY,CUFFO,CUFFS,CUIFS,CUING,CUISH,CUITS,CUKES,CULCH,CULET,CULEX,CULLS,CULLY,CULMS,CULPA,CULTI,CULTS,CULTY,CUMEC,CUMIN,CUNDY,CUNEI,CUNTS,CUPEL,CUPID,CUPPA,CUPPY,CURAT,CURBS,CURCH,CURDS,CURDY,CURED,CURER,CURES,CURET,CURFS,CURIA,CURIE,CURIO,CURLI,CURLS,CURLY,CURNS,CURNY,CURRS,CURRY,CURSE,CURSI,CURST,CURVE,CURVY,CUSEC,CUSHY,CUSKS,CUSPS,CUSSO,CUTCH,CUTER,CUTES,CUTEY,CUTIE,CUTIN,CUTIS,CUTTO,CUTTY,CUTUP,CUVEE,CWTCH,CYANO,CYANS,CYBER,CYCAD,CYCAS,CYCLE,CYCLO,CYDER,CYLIX,CYMAE,CYMAR,CYMAS,CYMES,CYMOL,CYNIC,CYSTS,CYTES,CYTON,CZARS,DABBA,DACES,DACHA,DACKS,DADAH,DADAS,DADDY,DADOS,DAFFS,DAFFY,DAGGA,DAGGY,DAGOS,DAHLS,DAILY,DAINE,DAINT,DAIRY,DAISY,DAKER,DALED,DALES,DALIS,DALLE,DALLY,DALTS,DAMAN,DAMAR,DAMES,DAMME,DAMNS,DAMPS,DAMPY,DANCE,DANDY,DANGS,DANIO,DANKS,DANNY,DANTS,DARAF,DARBS,DARCY,DARED,DARER,DARES,DARGA,DARGS,DARIC,DARIS,DARKS,DARKY,DARNS,DARRE,DARTS,DARZI,DASHI,DASHY,DATAL,DATED,DATER,DATES,DATOS,DATTO,DATUM,DAUBE,DAUBS,DAUBY,DAUDS,DAULT,DAUNT,DAURS,DAUTS,DAVEN,DAVIT,DAWAH,DAWDS,DAWED,DAWEN,DAWKS,DAWNS,DAWTS,DAYAN,DAYCH,DAYNT,DAZED,DAZER,DAZES,DEADS,DEAIR,DEALS,DEALT,DEANS,DEARE,DEARN,DEARS,DEARY,DEASH,DEATH,DEAVE,DEAWS,DEAWY,DEBAG,DEBAR,DEBBY,DEBEL,DEBES,DEBIT,DEBTS,DEBUD,DEBUG,DEBUS,DEBUT,DEBYE,DECAD,DECAF,DECAL,DECAY,DECKO,DECKS,DECOR,DECOS,DECOY,DECRY,DEDAL,DEEDS,DEEDY,DEELY,DEEMS,DEENS,DEEPS,DEERE,DEERS,DEETS,DEEVE,DEEVS,DEFAT,DEFER,DEFFO,DEFIS,DEFOG,DEGAS,DEGUM,DEICE,DEIDS,DEIFY,DEIGN,DEILS,DEISM,DEIST,DEITY,DEKED,DEKES,DEKKO,DELAY,DELED,DELES,DELFS,DELFT,DELIS,DELLS,DELLY,DELOS,DELPH,DELTA,DELTS,DELVE,DEMAN,DEMES,DEMIC,DEMIT,DEMOB,DEMON,DEMOS,DEMPT,DEMUR,DENAR,DENAY,DENES,DENET,DENIM,DENIS,DENSE,DENTS,DEOXY,DEPOT,DEPTH,DERAT,DERAY,DERBY,DERED,DERES,DERIG,DERMA,DERMS,DERNS,DEROS,DERRO,DERRY,DERTH,DERVS,DESEX,DESHI,DESKS,DESSE,DETER,DETOX,DEUCE,DEVAS,DEVEL,DEVIL,DEVON,DEVOT,DEWAN,DEWAR,DEWAX,DEWED,DEXES,DEXIE,DHAKS,DHALS,DHOBI,DHOLE,DHOLL,DHOLS,DHOTI,DHOWS,DHUTI,DIACT,DIALS,DIARY,DIAZO,DIBBS,DICED,DICER,DICES,DICEY,DICHT,DICKS,DICKY,DICOT,DICTA,DICTS,DICTY,DIDDY,DIDIE,DIDOS,DIDST,DIEBS,DIENE,DIETS,DIFFS,DIGHT,DIGIT,DIKAS,DIKED,DIKER,DIKES,DIKEY,DILDO,DILLI,DILLS,DILLY,DIMER,DIMES,DIMLY,DIMPS,DINAR,DINED,DINER,DINES,DINGE,DINGO,DINGS,DINGY,DINIC,DINKS,DINKY,DINNA,DINOS,DINTS,DIODE,DIOLS,DIOTA,DIPPY,DIPSO,DIRAM,DIRER,DIRGE,DIRKE,DIRKS,DIRLS,DIRTS,DIRTY,DISAS,DISCI,DISCO,DISCS,DISHY,DISKS,DISME,DITAL,DITAS,DITCH,DITED,DITES,DITSY,DITTO,DITTS,DITTY,DITZY,DIVAN,DIVAS,DIVED,DIVER,DIVES,DIVIS,DIVOT,DIVVY,DIWAN,DIXIE,DIXIT,DIZEN,DIZZY,DJINN,DJINS,DOABS,DOATS,DOBBY,DOBIE,DOBLA,DOBRA,DOBRO,DOCHT,DOCKS,DOCOS,DODDY,DODGE,DODGY,DODOS,DOEKS,DOERS,DOEST,DOETH,DOFFS,DOGES,DOGEY,DOGGO,DOGGY,DOGIE,DOGMA,DOHYO,DOILT,DOILY,DOING,DOITS,DOJOS,DOLCE,DOLCI,DOLED,DOLES,DOLIA,DOLLS,DOLLY,DOLMA,DOLOR,DOLOS,DOLTS,DOMAL,DOMED,DOMES,DOMIC,DONAH,DONAS,DONEE,DONER,DONGA,DONGS,DONKO,DONNA,DONNE,DONNY,DONOR,DONSY,DONUT,DOOBS,DOODY,DOOKS,DOOLE,DOOLS,DOOLY,DOOMS,DOOMY,DOONA,DOORN,DOORS,DOOZY,DOPAS,DOPED,DOPER,DOPES,DOPEY,DORAD,DORBA,DORBS,DOREE,DORIC,DORIS,DORKS,DORKY,DORMS,DORMY,DORPS,DORRS,DORSA,DORSE,DORTS,DORTY,DOSED,DOSEH,DOSER,DOSES,DOTAL,DOTED,DOTER,DOTES,DOTTY,DOUAR,DOUBT,DOUCE,DOUCS,DOUGH,DOUKS,DOULA,DOUMA,DOUMS,DOUPS,DOURA,DOUSE,DOUTS,DOVED,DOVEN,DOVER,DOVES,DOVIE,DOWAR,DOWDS,DOWDY,DOWED,DOWEL,DOWER,DOWIE,DOWLE,DOWLS,DOWLY,DOWNA,DOWNS,DOWNY,DOWPS,DOWRY,DOWSE,DOWTS,DOXIE,DOYEN,DOYLY,DOZED,DOZEN,DOZER,DOZES,DRABS,DRACK,DRACO,DRAFF,DRAFT,DRAGS,DRAIL,DRAIN,DRAKE,DRAMA,DRAMS,DRANK,DRANT,DRAPE,DRAPS,DRATS,DRAVE,DRAWL,DRAWN,DRAWS,DRAYS,DREAD,DREAM,DREAR,DRECK,DREED,DREES,DREGS,DREKS,DRENT,DRERE,DRESS,DREST,DREYS,DRIBS,DRICE,DRIED,DRIER,DRIES,DRIFT,DRILL,DRILY,DRINK,DRIPS,DRIPT,DRIVE,DROID,DROIL,DROIT,DROLE,DROLL,DROME,DRONE,DRONY,DROOB,DROOG,DROOK,DROOL,DROOP,DROPS,DROPT,DROSS,DROUK,DROVE,DROWN,DROWS,DRUBS,DRUGS,DRUID,DRUMS,DRUNK,DRUPE,DRUSE,DRUSY,DRUXY,DRYAD,DRYER,DRYLY,DSOBO,DSOMO,DUADS,DUALS,DUANS,DUARS,DUBBO,DUCAL,DUCAT,DUCES,DUCHY,DUCKS,DUCKY,DUCTS,DUDDY,DUDED,DUDES,DUELS,DUETS,DUETT,DUFFS,DUFUS,DUING,DUITS,DUKAS,DUKED,DUKES,DUKKA,DULES,DULIA,DULLS,DULLY,DULSE,DUMAS,DUMBO,DUMBS,DUMKA,DUMKY,DUMMY,DUMPS,DUMPY,DUNAM,DUNCE,DUNCH,DUNES,DUNGS,DUNGY,DUNKS,DUNNO,DUNNY,DUNSH,DUNTS,DUOMI,DUOMO,DUPED,DUPER,DUPES,DUPLE,DUPLY,DUPPY,DURAL,DURAS,DURED,DURES,DURGY,DURNS,DUROC,DUROS,DUROY,DURRA,DURRS,DURRY,DURST,DURUM,DURZI,DUSKS,DUSKY,DUSTS,DUSTY,DUTCH,DUVET,DUXES,DWAAL,DWALE,DWALM,DWAMS,DWANG,DWARF,DWAUM,DWEEB,DWELL,DWELT,DWILE,DWINE,DYADS,DYERS,DYING,DYKED,DYKES,DYKEY,DYNEL,DYNES,DZHOS,EAGER,EAGLE,EAGRE,EALES,EANED,EARDS,EARED,EARLS,EARLY,EARNS,EARST,EARTH,EASED,EASEL,EASER,EASES,EASLE,EASTS,EATEN,EATER,EATHE,EAVED,EAVES,EBBED,EBBET,EBONS,EBONY,EBOOK,ECADS,ECHED,ECHES,ECHOS,ECLAT,ECRUS,EDEMA,EDGED,EDGER,EDGES,EDICT,EDIFY,EDILE,EDITS,EDUCE,EDUCT,EEJIT,EERIE,EEVEN,EEVNS,EFFED,EGADS,EGERS,EGEST,EGGAR,EGGED,EGGER,EGMAS,EGRET,EHING,EIDER,EIDOS,EIGHT,EIGNE,EIKED,EIKON,EILDS,EISEL,EJECT,EKING,EKKAS,ELAIN,ELAND,ELANS,ELATE,ELBOW,ELCHI,ELDER,ELDIN,ELECT,ELEGY,ELEMI,ELFED,ELFIN,ELIAD,ELIDE,ELINT,ELITE,ELMEN,ELOGE,ELOGY,ELOIN,ELOPE,ELOPS,ELPEE,ELSIN,ELUDE,ELUTE,ELVAN,ELVER,ELVES,EMACS,EMAIL,EMBAR,EMBAY,EMBED,EMBER,EMBOG,EMBOW,EMBOX,EMBUS,EMCEE,EMEER,EMEND,EMERY,EMEUS,EMIRS,EMITS,EMMAS,EMMER,EMMET,EMMEW,EMMYS,EMONG,EMOTE,EMOVE,EMPTS,EMPTY,EMULE,EMURE,EMYDE,EMYDS,ENACT,ENARM,ENATE,ENDED,ENDER,ENDEW,ENDOW,ENDUE,ENEMA,ENEMY,ENEWS,ENFIX,ENIAC,ENJOY,ENLIT,ENMEW,ENNOG,ENNUI,ENOKI,ENOLS,ENORM,ENOWS,ENROL,ENSEW,ENSKY,ENSUE,ENTER,ENTIA,ENTRY,ENURE,ENVOI,ENVOY,ENZYM,EORLS,EOSIN,EPACT,EPEES,EPHAH,EPHAS,EPHOD,EPHOR,EPICS,EPOCH,EPODE,EPOPT,EPOXY,EPRIS,EPROM,EQUAL,EQUID,EQUIP,ERASE,ERBIA,ERECT,EREVS,ERGON,ERGOS,ERGOT,ERICA,ERICK,ERICS,ERING,ERNED,ERNES,ERODE,EROSE,ERRED,ERROR,ERSES,ERUCT,ERUGO,ERUPT,ERUVS,ERVEN,ERVIL,ESCAR,ESCOT,ESILE,ESKAR,ESKER,ESNES,ESSAY,ESSES,ESTER,ESTOC,ESTOP,ESTRO,ETAGE,ETAPE,ETATS,ETENS,ETHAL,ETHER,ETHIC,ETHOS,ETHYL,ETNAS,ETTIN,ETTLE,ETUDE,ETUIS,ETWEE,ETYMA,EUGHS,EUKED,EUPAD,EUROS,EUSOL,EVADE,EVENS,EVENT,EVERT,EVERY,EVETS,EVHOE,EVICT,EVILS,EVITE,EVOHE,EVOKE,EWERS,EWEST,EWHOW,EWKED,EXACT,EXALT,EXAMS,EXCEL,EXEAT,EXECS,EXEEM,EXEME,EXERT,EXIES,EXILE,EXINE,EXING,EXIST,EXITS,EXODE,EXONS,EXPAT,EXPEL,EXPOS,EXTOL,EXTRA,EXUDE,EXULS,EXULT,EXURB,EYASS,EYERS,EYING,EYOTS,EYRAS,EYRES,EYRIE,EYRIR,FABLE,FACED,FACER,FACES,FACET,FACIA,FACTS,FADDY,FADED,FADER,FADES,FADGE,FADOS,FAENA,FAERY,FAFFS,FAGGY,FAGIN,FAGOT,FAIKS,FAILS,FAINE,FAINS,FAINT,FAIRS,FAIRY,FAITH,FAKED,FAKER,FAKES,FAKEY,FAKIR,FALAJ,FALLS,FALSE,FAMED,FAMES,FANAL,FANCY,FANDS,FANES,FANGA,FANGO,FANGS,FANKS,FANNY,FANON,FANOS,FANUM,FAQIR,FARAD,FARCE,FARCI,FARCY,FARDS,FARED,FARER,FARES,FARLE,FARLS,FARMS,FAROS,FARSE,FARTS,FASCI,FASTI,FASTS,FATAL,FATED,FATES,FATLY,FATSO,FATTY,FATWA,FAUGH,FAULD,FAULT,FAUNA,FAUNS,FAURD,FAUTS,FAUVE,FAVAS,FAVEL,FAVER,FAVES,FAVOR,FAVUS,FAWNS,FAWNY,FAXED,FAXES,FAYED,FAYER,FAYNE,FAYRE,FAZED,FAZES,FEALS,FEARE,FEARS,FEASE,FEAST,FEATS,FEAZE,FECAL,FECES,FECHT,FECIT,FECKS,FEDEX,FEEBS,FEEDS,FEELS,FEENS,FEERS,FEESE,FEEZE,FEHME,FEIGN,FEINT,FEIST,FELID,FELLA,FELLS,FELLY,FELON,FELTS,FELTY,FEMAL,FEMES,FEMME,FEMMY,FEMUR,FENCE,FENDS,FENDY,FENIS,FENKS,FENNY,FENTS,FEODS,FEOFF,FERAL,FERER,FERES,FERIA,FERLY,FERMI,FERMS,FERNS,FERNY,FERRY,FESSE,FESTA,FESTS,FESTY,FETAL,FETAS,FETCH,FETED,FETES,FETID,FETOR,FETTA,FETTS,FETUS,FETWA,FEUAR,FEUDS,FEUED,FEVER,FEWER,FEYED,FEYER,FEYLY,FEZES,FEZZY,FIARS,FIATS,FIBER,FIBRE,FIBRO,FICES,FICHE,FICHU,FICIN,FICOS,FICUS,FIDGE,FIDOS,FIEFS,FIELD,FIEND,FIENT,FIERE,FIERS,FIERY,FIEST,FIFED,FIFER,FIFES,FIFTH,FIFTY,FIGHT,FIGOS,FIKED,FIKES,FILAR,FILCH,FILED,FILER,FILES,FILET,FILLE,FILLO,FILLS,FILLY,FILMI,FILMS,FILMY,FILOS,FILTH,FILUM,FINAL,FINCA,FINCH,FINDS,FINED,FINER,FINES,FINIS,FINKS,FINNY,FINOS,FIORD,FIQUE,FIRED,FIRER,FIRES,FIRIE,FIRKS,FIRMS,FIRNS,FIRRY,FIRST,FIRTH,FISCS,FISHY,FISKS,FISTS,FISTY,FITCH,FITLY,FITNA,FITTE,FITTS,FIVER,FIVES,FIXED,FIXER,FIXES,FIXIT,FIZZY,FJELD,FJORD,FLABS,FLACK,FLAFF,FLAGS,FLAIL,FLAIR,FLAKE,FLAKS,FLAKY,FLAME,FLAMM,FLAMS,FLAMY,FLANK,FLANS,FLAPS,FLARE,FLARY,FLASH,FLASK,FLATS,FLAWN,FLAWS,FLAWY,FLAXY,FLAYS,FLEAM,FLEAS,FLECK,FLEER,FLEES,FLEET,FLEGS,FLEME,FLESH,FLEWS,FLEXO,FLEYS,FLICK,FLICS,FLIED,FLIER,FLIES,FLIMP,FLIMS,FLING,FLINT,FLIPS,FLIRS,FLIRT,FLISK,FLITE,FLITS,FLITT,FLOAT,FLOCK,FLOCS,FLOES,FLOGS,FLONG,FLOOD,FLOOR,FLOPS,FLORA,FLORS,FLORY,FLOSH,FLOSS,FLOTA,FLOTE,FLOUR,FLOUT,FLOWN,FLOWS,FLUBS,FLUED,FLUES,FLUEY,FLUFF,FLUID,FLUKE,FLUKY,FLUME,FLUMP,FLUNG,FLUNK,FLUOR,FLURR,FLUSH,FLUTE,FLUTY,FLUYT,FLYBY,FLYER,FLYPE,FLYTE,FOALS,FOAMS,FOAMY,FOCAL,FOCUS,FOEHN,FOGEY,FOGGY,FOGIE,FOGLE,FOHNS,FOIDS,FOILS,FOINS,FOIST,FOLDS,FOLEY,FOLIA,FOLIC,FOLIE,FOLIO,FOLKS,FOLKY,FOLLY,FOMES,FONDA,FONDS,FONDU,FONLY,FONTS,FOODS,FOODY,FOOLS,FOOTS,FOOTY,FORAM,FORAY,FORBS,FORBY,FORCE,FORDO,FORDS,FOREL,FORES,FOREX,FORGE,FORGO,FORKS,FORKY,FORME,FORMS,FORTE,FORTH,FORTS,FORTY,FORUM,FORZA,FORZE,FOSSA,FOSSE,FOUAT,FOUDS,FOUER,FOUET,FOULE,FOULS,FOUND,FOUNT,FOURS,FOUTH,FOVEA,FOWLS,FOWTH,FOXED,FOXES,FOXIE,FOYER,FOYLE,FOYNE,FRABS,FRACK,FRACT,FRAGS,FRAIL,FRAIM,FRAME,FRANC,FRANK,FRAPE,FRAPS,FRASS,FRATE,FRATI,FRATS,FRAUD,FRAUS,FRAYS,FREAK,FREED,FREER,FREES,FREET,FREIT,FREMD,FRENA,FREON,FRERE,FRESH,FRETS,FRIAR,FRIBS,FRIED,FRIER,FRIES,FRIGS,FRILL,FRISE,FRISK,FRIST,FRITH,FRITS,FRITT,FRITZ,FRIZE,FRIZZ,FROCK,FROES,FROGS,FROND,FRONS,FRONT,FRORE,FRORN,FRORY,FROSH,FROST,FROTH,FROWN,FROWS,FROWY,FROZE,FRUGS,FRUIT,FRUMP,FRUSH,FRUST,FRYER,FUBAR,FUBBY,FUBSY,FUCKS,FUCUS,FUDDY,FUDGE,FUELS,FUERO,FUFFS,FUFFY,FUGAL,FUGGY,FUGIE,FUGIO,FUGLE,FUGLY,FUGUE,FUGUS,FUJIS,FULLS,FULLY,FUMED,FUMER,FUMES,FUMET,FUNDI,FUNDS,FUNDY,FUNGI,FUNGO,FUNGS,FUNKS,FUNKY,FUNNY,FURAL,FURAN,FURCA,FURLS,FUROL,FUROR,FURRS,FURRY,FURTH,FURZE,FURZY,FUSED,FUSEE,FUSEL,FUSES,FUSIL,FUSSY,FUSTS,FUSTY,FUTON,FUZED,FUZEE,FUZES,FUZIL,FUZZY,FYCES,FYKED,FYKES,FYLES,FYRDS,FYTTE,GABBY,GABLE,GADDI,GADES,GADGE,GADID,GADIS,GADJE,GADJO,GADSO,GAFFE,GAFFS,GAGED,GAGER,GAGES,GAIDS,GAILY,GAINS,GAIRS,GAITS,GAITT,GAJOS,GALAH,GALAS,GALAX,GALEA,GALES,GALLS,GALLY,GALOP,GALUT,GALVO,GAMAS,GAMAY,GAMBA,GAMBE,GAMBO,GAMBS,GAMED,GAMER,GAMES,GAMEY,GAMIC,GAMIN,GAMMA,GAMME,GAMMY,GAMPS,GAMUT,GANCH,GANDY,GANEF,GANEV,GANGS,GANJA,GANOF,GANTS,GAOLS,GAPED,GAPER,GAPES,GAPOS,GAPPY,GARBE,GARBO,GARBS,GARDA,GARIS,GARNI,GARRE,GARTH,GARUM,GASES,GASPS,GASPY,GASSY,GASTS,GATED,GATER,GATES,GATHS,GATOR,GAUCY,GAUDS,GAUDY,GAUGE,GAUJE,GAULT,GAUMS,GAUMY,GAUNT,GAUPS,GAURS,GAUSS,GAUZE,GAUZY,GAVEL,GAVOT,GAWCY,GAWDS,GAWKS,GAWKY,GAWPS,GAWSY,GAYAL,GAYER,GAYLY,GAZAL,GAZAR,GAZED,GAZER,GAZES,GAZON,GAZOO,GEALS,GEANS,GEARE,GEARS,GEATS,GEBUR,GECKO,GECKS,GEEKS,GEEKY,GEEPS,GEESE,GEEST,GEIST,GEITS,GELDS,GELEE,GELID,GELLY,GELTS,GEMEL,GEMMA,GEMMY,GEMOT,GENAL,GENAS,GENES,GENET,GENIC,GENIE,GENII,GENIP,GENNY,GENOA,GENOM,GENRE,GENRO,GENTS,GENTY,GENUA,GENUS,GEODE,GEOID,GERAH,GERBE,GERES,GERLE,GERMS,GERMY,GERNE,GESSE,GESSO,GESTE,GESTS,GETAS,GETUP,GEUMS,GEYAN,GEYER,GHAST,GHATS,GHAUT,GHAZI,GHEES,GHEST,GHOST,GHOUL,GHYLL,GIANT,GIBED,GIBEL,GIBER,GIBES,GIBLI,GIBUS,GIDDY,GIFTS,GIGAS,GIGHE,GIGOT,GIGUE,GILAS,GILDS,GILET,GILLS,GILLY,GILPY,GILTS,GIMEL,GIMME,GIMPS,GIMPY,GINGE,GINGS,GINKS,GINNY,GINZO,GIPON,GIPPO,GIPPY,GIPSY,GIRDS,GIRLS,GIRLY,GIRNS,GIRON,GIROS,GIRRS,GIRSH,GIRTH,GIRTS,GISMO,GISMS,GISTS,GITES,GIUST,GIVED,GIVEN,GIVER,GIVES,GIZMO,GLACE,GLADE,GLADS,GLADY,GLAIK,GLAIR,GLAMS,GLAND,GLANS,GLARE,GLARY,GLASS,GLAUM,GLAUR,GLAZE,GLAZY,GLEAM,GLEAN,GLEBA,GLEBE,GLEBY,GLEDE,GLEDS,GLEED,GLEEK,GLEES,GLEET,GLEIS,GLENS,GLENT,GLEYS,GLIAL,GLIAS,GLIBS,GLIDE,GLIFF,GLIFT,GLIKE,GLIME,GLIMS,GLINT,GLISK,GLITS,GLITZ,GLOAM,GLOAT,GLOBE,GLOBI,GLOBS,GLOBY,GLODE,GLOGG,GLOMS,GLOOM,GLOOP,GLOPS,GLORY,GLOSS,GLOST,GLOUT,GLOVE,GLOWS,GLOZE,GLUED,GLUER,GLUES,GLUEY,GLUGS,GLUME,GLUMS,GLUON,GLUTE,GLUTS,GLYPH,GNARL,GNARR,GNARS,GNASH,GNATS,GNAWN,GNAWS,GNOME,GNOWS,GOADS,GOAFS,GOALS,GOARY,GOATS,GOATY,GOBAN,GOBBI,GOBBO,GOBBY,GOBOS,GODET,GODLY,GODSO,GOELS,GOERS,GOETY,GOFER,GOFFS,GOGGA,GOGOS,GOIER,GOING,GOLDS,GOLDY,GOLEM,GOLES,GOLFS,GOLLY,GOLPE,GOLPS,GOMBO,GOMER,GOMPA,GONAD,GONEF,GONER,GONGS,GONIA,GONIF,GONKS,GONNA,GONOF,GONYS,GONZO,GOOBY,GOODS,GOODY,GOOEY,GOOFS,GOOFY,GOOGS,GOOKS,GOOKY,GOOLD,GOOLS,GOOLY,GOONS,GOONY,GOOPS,GOOPY,GOORS,GOORY,GOOSE,GOOSY,GOPAK,GOPIK,GORAL,GORAS,GORED,GORES,GORGE,GORIS,GORMS,GORMY,GORPS,GORSE,GORSY,GOSHT,GOSSE,GOTHS,GOTTA,GOUGE,GOUKS,GOURA,GOURD,GOUTS,GOUTY,GOWAN,GOWDS,GOWFS,GOWKS,GOWLS,GOWNS,GOXES,GOYIM,GRAAL,GRABS,GRACE,GRADE,GRADS,GRAFF,GRAFT,GRAIL,GRAIN,GRAIP,GRAMA,GRAME,GRAMP,GRAMS,GRANA,GRAND,GRANS,GRANT,GRAPE,GRAPH,GRAPY,GRASP,GRASS,GRATE,GRAVE,GRAVS,GRAVY,GRAYS,GRAZE,GREAT,GREBE,GRECE,GREED,GREEK,GREEN,GREES,GREET,GREGE,GREGO,GREIN,GRENS,GRENZ,GRESE,GREVE,GREWS,GREYS,GRICE,GRIDE,GRIDS,GRIEF,GRIFF,GRIFT,GRIGS,GRIKE,GRILL,GRIME,GRIMY,GRIND,GRINS,GRIOT,GRIPE,GRIPS,GRIPT,GRIPY,GRISE,GRIST,GRISY,GRITH,GRITS,GRIZE,GROAN,GROAT,GRODY,GROGS,GROIN,GROKS,GROMA,GRONE,GROOF,GROOM,GROPE,GROSS,GROSZ,GROTS,GROUF,GROUP,GROUT,GROVE,GROWL,GROWN,GROWS,GRUBS,GRUED,GRUEL,GRUES,GRUFE,GRUFF,GRUME,GRUMP,GRUNT,GRYCE,GRYDE,GRYKE,GRYPE,GRYPT,GUACO,GUANA,GUANO,GUANS,GUARD,GUARS,GUAVA,GUCKS,GUCKY,GUDES,GUESS,GUEST,GUFFS,GUGAS,GUIDE,GUIDS,GUILD,GUILE,GUILT,GUIMP,GUIRO,GUISE,GULAG,GULAR,GULAS,GULCH,GULES,GULFS,GULFY,GULLS,GULLY,GULPH,GULPS,GULPY,GUMBO,GUMMA,GUMMY,GUMPS,GUNDY,GUNGE,GUNGY,GUNKS,GUNKY,GUNNY,GUPPY,GURGE,GURLS,GURLY,GURNS,GURRY,GURSH,GURUS,GUSHY,GUSLA,GUSLE,GUSLI,GUSSY,GUSTO,GUSTS,GUSTY,GUTSY,GUTTA,GUTTY,GUYED,GUYLE,GUYOT,GUYSE,GWINE,GYALS,GYBED,GYBES,GYELD,GYMPS,GYNAE,GYNIE,GYNNY,GYOZA,GYPPO,GYPPY,GYPSY,GYRAL,GYRED,GYRES,GYRON,GYROS,GYRUS,GYTES,GYVED,GYVES,HAAFS,HAARS,HABIT,HABLE,HABUS,HACEK,HACKS,HADAL,HADED,HADES,HADJI,HADST,HAEMS,HAETS,HAFFS,HAFIZ,HAFTS,HAGGS,HAHAS,HAICK,HAIKA,HAIKS,HAIKU,HAILS,HAILY,HAINS,HAINT,HAIRS,HAIRY,HAITH,HAJES,HAJIS,HAJJI,HAKAM,HAKAS,HAKEA,HAKES,HAKIM,HAKUS,HALAL,HALED,HALER,HALES,HALFA,HALFS,HALID,HALLO,HALLS,HALMA,HALMS,HALON,HALOS,HALSE,HALTS,HALVA,HALVE,HAMAL,HAMBA,HAMED,HAMES,HAMMY,HAMZA,HANAP,HANCE,HANCH,HANDS,HANDY,HANGI,HANGS,HANKS,HANKY,HANSA,HANSE,HANTS,HAOLE,HAOMA,HAPAX,HAPLY,HAPPY,HAPUS,HARAM,HARDS,HARDY,HARED,HAREM,HARES,HARIM,HARKS,HARLS,HARMS,HARNS,HAROS,HARPS,HARPY,HARRY,HARSH,HARTS,HASHY,HASKS,HASPS,HASTA,HASTE,HASTY,HATCH,HATED,HATER,HATES,HATHA,HAUDS,HAUFS,HAUGH,HAULD,HAULM,HAULS,HAULT,HAUNT,HAUSE,HAUTE,HAVEN,HAVER,HAVES,HAVOC,HAWED,HAWKS,HAWMS,HAWSE,HAYED,HAYER,HAYEY,HAYLE,HAZAN,HAZED,HAZEL,HAZER,HAZES,HEADS,HEADY,HEALD,HEALS,HEAME,HEAPS,HEAPY,HEARD,HEARE,HEARS,HEART,HEAST,HEATH,HEATS,HEAVE,HEAVY,HEBEN,HEBES,HECHT,HECKS,HEDER,HEDGE,HEDGY,HEEDS,HEEDY,HEELS,HEEZE,HEFTE,HEFTS,HEFTY,HEIDS,HEIGH,HEILS,HEIRS,HEIST,HEJAB,HEJRA,HELED,HELES,HELIO,HELIX,HELLO,HELLS,HELMS,HELOS,HELOT,HELPS,HELVE,HEMAL,HEMES,HEMIC,HEMIN,HEMPS,HEMPY,HENCE,HENDS,HENGE,HENNA,HENNY,HENRY,HENTS,HEPAR,HERBS,HERBY,HERDS,HERES,HERLS,HERMA,HERMS,HERNS,HEROE,HERON,HEROS,HERRY,HERSE,HERTZ,HERYE,HESPS,HESTS,HETES,HETHS,HEUCH,HEUGH,HEVEA,HEWED,HEWER,HEWGH,HEXAD,HEXED,HEXER,HEXES,HEXYL,HEYED,HIANT,HICKS,HIDED,HIDER,HIDES,HIEMS,HIGHS,HIGHT,HIJAB,HIJRA,HIKED,HIKER,HIKES,HIKOI,HILAR,HILCH,HILLO,HILLS,HILLY,HILTS,HILUM,HILUS,HIMBO,HINAU,HINDS,HINGE,HINGS,HINKY,HINNY,HINTS,HIOIS,HIPLY,HIPPO,HIPPY,HIRED,HIREE,HIRER,HIRES,HISSY,HISTS,HITCH,HITHE,HIVED,HIVER,HIVES,HIZEN,HOAED,HOAGY,HOARD,HOARS,HOARY,HOAST,HOBBY,HOBOS,HOCKS,HOCUS,HODAD,HODJA,HOERS,HOGAN,HOGEN,HOGGS,HOGHS,HOHED,HOICK,HOIKS,HOING,HOISE,HOIST,HOKED,HOKES,HOKEY,HOKIS,HOKKU,HOKUM,HOLDS,HOLED,HOLES,HOLEY,HOLKS,HOLLA,HOLLO,HOLLY,HOLMS,HOLON,HOLTS,HOMAS,HOMED,HOMER,HOMES,HOMEY,HOMIE,HOMME,HOMOS,HONAN,HONDA,HONDS,HONED,HONER,HONES,HONEY,HONGI,HONGS,HONKS,HONKY,HONOR,HOOCH,HOODS,HOODY,HOOEY,HOOFS,HOOKA,HOOKS,HOOKY,HOOLY,HOONS,HOOPS,HOORD,HOOSH,HOOTS,HOOTY,HOOVE,HOPED,HOPER,HOPES,HOPPY,HORAH,HORAL,HORAS,HORDE,HORIS,HORME,HORNS,HORNY,HORSE,HORST,HORSY,HOSED,HOSEL,HOSEN,HOSER,HOSES,HOSEY,HOSTA,HOSTS,HOTCH,HOTEL,HOTEN,HOTLY,HOTTY,HOUFF,HOUFS,HOUGH,HOUND,HOURI,HOURS,HOUSE,HOUTS,HOVEA,HOVED,HOVEL,HOVEN,HOVER,HOVES,HOWBE,HOWDY,HOWES,HOWFF,HOWFS,HOWKS,HOWLS,HOWRE,HOWSO,HOXED,HOXES,HOYAS,HOYED,HOYLE,HUBBY,HUCKS,HUDNA,HUDUD,HUERS,HUFFS,HUFFY,HUGER,HUGGY,HUHUS,HUIAS,HULAS,HULES,HULKS,HULKY,HULLO,HULLS,HULLY,HUMAN,HUMAS,HUMFS,HUMIC,HUMID,HUMOR,HUMPH,HUMPS,HUMPY,HUMUS,HUNCH,HUNKS,HUNKY,HUNTS,HURDS,HURLS,HURLY,HURRA,HURRY,HURST,HURTS,HUSHY,HUSKS,HUSKY,HUSOS,HUSSY,HUTCH,HUTIA,HUZZA,HUZZY,HWYLS,HYDRA,HYDRO,HYENA,HYENS,HYING,HYKES,HYLAS,HYLEG,HYLES,HYLIC,HYMEN,HYMNS,HYNDE,HYOID,HYPED,HYPER,HYPES,HYPHA,HYPOS,HYRAX,HYSON,HYTHE,IAMBI,IAMBS,ICERS,ICHED,ICHES,ICHOR,ICIER,ICILY,ICING,ICKER,ICKLE,ICONS,ICTAL,ICTIC,ICTUS,IDANT,IDEAL,IDEAS,IDEES,IDENT,IDIOM,IDIOT,IDLED,IDLER,IDLES,IDOLA,IDOLS,IDYLL,IDYLS,IFTAR,IGAPO,IGGED,IGLOO,IGLUS,IHRAM,IKANS,IKATS,IKONS,ILEAC,ILEAL,ILEUM,ILEUS,ILIAC,ILIAD,ILIAL,ILIUM,ILLER,ILLTH,IMAGE,IMAGO,IMAMS,IMARI,IMAUM,IMBAR,IMBED,IMBUE,IMIDE,IMIDO,IMIDS,IMINE,IMINO,IMMEW,IMMIT,IMMIX,IMPED,IMPEL,IMPIS,IMPLY,IMPOT,IMSHI,IMSHY,INANE,INAPT,INARM,INBYE,INCLE,INCOG,INCUR,INCUS,INCUT,INDEW,INDEX,INDIE,INDOL,INDOW,INDRI,INDUE,INEPT,INERM,INERT,INFER,INFIX,INFOS,INFRA,INGAN,INGLE,INGOT,INION,INKED,INKER,INKLE,INLAY,INLET,INNED,INNER,INORB,INPUT,INRUN,INSET,INTEL,INTER,INTIL,INTIS,INTRA,INTRO,INULA,INURE,INURN,INUST,INVAR,INWIT,IODIC,IODID,IODIN,IONIC,IOTAS,IPPON,IRADE,IRATE,IRIDS,IRING,IRKED,IROKO,IRONE,IRONS,IRONY,ISBAS,ISHES,ISLED,ISLES,ISLET,ISNAE,ISSEI,ISSUE,ISTLE,ITCHY,ITEMS,ITHER,IVIED,IVIES,IVORY,IXIAS,IXORA,IXTLE,IZARD,IZARS,IZZAT,JAAPS,JABOT,JACAL,JACKS,JACKY,JADED,JADES,JAFAS,JAGAS,JAGER,JAGGS,JAGGY,JAGIR,JAGRA,JAILS,JAKES,JAKEY,JALAP,JALOP,JAMBE,JAMBO,JAMBS,JAMBU,JAMES,JAMMY,JANES,JANNS,JANNY,JANTY,JAPAN,JAPED,JAPER,JAPES,JARKS,JARLS,JARPS,JARTA,JARUL,JASEY,JASPE,JASPS,JATOS,JAUKS,JAUNT,JAUPS,JAVAS,JAVEL,JAWAN,JAWED,JAXIE,JAZZY,JEANS,JEATS,JEBEL,JEDIS,JEELS,JEELY,JEEPS,JEERS,JEFES,JEFFS,JEHAD,JEHUS,JELAB,JELLO,JELLS,JELLY,JEMBE,JEMMY,JENNY,JERID,JERKS,JERKY,JERRY,JESSE,JESTS,JESUS,JETES,JETON,JETTY,JEUNE,JEWED,JEWEL,JEWIE,JHALA,JIAOS,JIBBS,JIBED,JIBER,JIBES,JIFFS,JIFFY,JIGGY,JIGOT,JIHAD,JILLS,JILTS,JIMMY,JIMPY,JINGO,JINKS,JINNE,JINNI,JINNS,JIRDS,JIRGA,JIRRE,JISMS,JIVED,JIVER,JIVES,JIVEY,JNANA,JOBED,JOBES,JOCKO,JOCKS,JODEL,JOEYS,JOHNS,JOINS,JOINT,JOIST,JOKED,JOKER,JOKES,JOKEY,JOKOL,JOLED,JOLES,JOLLS,JOLLY,JOLTS,JOLTY,JOMON,JOMOS,JONES,JONGS,JONTY,JOOKS,JORAM,JORUM,JOTAS,JOTTY,JOTUN,JOUAL,JOUGS,JOUKS,JOULE,JOURS,JOUST,JOWAR,JOWED,JOWLS,JOWLY,JOYED,JUBAS,JUBES,JUCOS,JUDAS,JUDGE,JUDOS,JUGAL,JUGUM,JUICE,JUICY,JUJUS,JUKED,JUKES,JUKUS,JULEP,JUMAR,JUMBO,JUMBY,JUMPS,JUMPY,JUNCO,JUNKS,JUNKY,JUNTA,JUNTO,JUPES,JUPON,JURAL,JURAT,JUREL,JUROR,JUSTS,JUTES,JUTTY,JUVES,KAAMA,KABAB,KABAR,KABOB,KACHA,KADES,KADIS,KAFIR,KAGOS,KAGUS,KAHAL,KAIAK,KAIDS,KAIES,KAIFS,KAIKA,KAIKS,KAILS,KAIMS,KAING,KAINS,KAKAS,KAKIS,KALAM,KALES,KALIF,KALIS,KALPA,KAMAS,KAMES,KAMIK,KAMIS,KAMME,KANAE,KANAS,KANDY,KANEH,KANES,KANGA,KANGS,KANJI,KANTS,KANZU,KAONS,KAPAS,KAPHS,KAPOK,KAPPA,KAPUT,KARAS,KARAT,KARKS,KARMA,KARNS,KAROO,KARRI,KARST,KARSY,KARTS,KARZY,KASHA,KASME,KATAS,KATIS,KATTI,KAUGH,KAURI,KAURU,KAURY,KAVAS,KAWAS,KAWAU,KAWED,KAYAK,KAYLE,KAYOS,KAZIS,KAZOO,KBARS,KEBAB,KEBAR,KEBOB,KECKS,KEDGE,KEDGY,KEECH,KEEFS,KEEKS,KEELS,KEENO,KEENS,KEEPS,KEETS,KEEVE,KEFIR,KEHUA,KEIRS,KELEP,KELIM,KELLS,KELLY,KELPS,KELPY,KELTS,KELTY,KEMBO,KEMBS,KEMPS,KEMPT,KEMPY,KENAF,KENCH,KENDO,KENOS,KENTE,KENTS,KEPIS,KERBS,KEREL,KERFS,KERKY,KERMA,KERNE,KERNS,KEROS,KERRY,KERVE,KESAR,KESTS,KETAS,KETCH,KETOL,KEVEL,KEVIL,KEXES,KEYED,KHADI,KHAFS,KHAKI,KHANS,KHAPH,KHATS,KHAYA,KHAZI,KHEDA,KHETH,KHETS,KHOJA,KHORS,KHOUM,KHUDS,KIAAT,KIANG,KIBBE,KIBBI,KIBEI,KIBES,KIBLA,KICKS,KICKY,KIDDO,KIDDY,KIDEL,KIDGE,KIEFS,KIERS,KIEVE,KIGHT,KIKES,KIKOI,KILEY,KILIM,KILLS,KILNS,KILOS,KILPS,KILTS,KILTY,KIMBO,KINAS,KINDA,KINDS,KINDY,KINES,KINGS,KININ,KINKS,KINKY,KINOS,KIORE,KIOSK,KIPES,KIPPA,KIPPS,KIRBY,KIRKS,KIRNS,KIRRI,KISAN,KISSY,KISTS,KITED,KITER,KITES,KITHE,KITHS,KITTY,KIVAS,KIWIS,KLANG,KLAPS,KLETT,KLICK,KLIEG,KLIKS,KLONG,KLOOF,KLUGE,KLUTZ,KNACK,KNAGS,KNAPS,KNARL,KNARS,KNAUR,KNAVE,KNAWE,KNEAD,KNEED,KNEEL,KNEES,KNELL,KNELT,KNIFE,KNISH,KNITS,KNIVE,KNOBS,KNOCK,KNOLL,KNOPS,KNOSP,KNOTS,KNOUT,KNOWE,KNOWN,KNOWS,KNUBS,KNURL,KNURR,KNURS,KNUTS,KOALA,KOANS,KOAPS,KOBAN,KOBOS,KOELS,KOFFS,KOFTA,KOHAS,KOHLS,KOINE,KOJIS,KOKER,KOKRA,KOKUM,KOLAS,KOLOS,KOMBU,KONBU,KONDO,KONKS,KOOKS,KOOKY,KOORI,KOPEK,KOPHS,KOPJE,KOPPA,KORAI,KORAS,KORAT,KORES,KORMA,KORUN,KORUS,KOSES,KOTCH,KOTOS,KOTOW,KOURA,KRAAL,KRABS,KRAFT,KRAIT,KRANG,KRANS,KRANZ,KRAUT,KREEP,KRENG,KREWE,KRILL,KRONA,KRONE,KROON,KRUBI,KSARS,KUDOS,KUDUS,KUDZU,KUFIS,KUGEL,KUIAS,KUKRI,KUKUS,KULAK,KULAN,KULAS,KULFI,KUMYS,KURIS,KURRE,KURTA,KURUS,KUSSO,KUTAS,KUTCH,KUTIS,KUTUS,KUZUS,KVASS,KVELL,KWELA,KYACK,KYAKS,KYANG,KYARS,KYATS,KYBOS,KYDST,KYLES,KYLIE,KYLIN,KYLIX,KYLOE,KYNDE,KYNDS,KYPES,KYRIE,KYTES,KYTHE,LAARI,LABDA,LABEL,LABIA,LABIS,LABOR,LABRA,LACED,LACER,LACES,LACET,LACEY,LACKS,LADED,LADEN,LADER,LADES,LADLE,LAERS,LAEVO,LAGAN,LAGER,LAHAR,LAICH,LAICS,LAIDS,LAIGH,LAIKA,LAIKS,LAIRD,LAIRS,LAIRY,LAITH,LAITY,LAKED,LAKER,LAKES,LAKHS,LAKIN,LAKSA,LALDY,LALLS,LAMAS,LAMBS,LAMBY,LAMED,LAMER,LAMES,LAMIA,LAMMY,LAMPS,LANAI,LANAS,LANCE,LANCH,LANDE,LANDS,LANES,LANKS,LANKY,LANTS,LAPEL,LAPIN,LAPIS,LAPJE,LAPSE,LARCH,LARDS,LARDY,LAREE,LARES,LARGE,LARGO,LARIS,LARKS,LARKY,LARNS,LARUM,LARVA,LASED,LASER,LASES,LASSI,LASSO,LASSU,LASTS,LATAH,LATCH,LATED,LATEN,LATER,LATEX,LATHE,LATHI,LATHS,LATHY,LATKE,LATTE,LAUAN,LAUCH,LAUDS,LAUFS,LAUGH,LAUND,LAURA,LAVAS,LAVED,LAVER,LAVES,LAVRA,LAWED,LAWER,LAWIN,LAWKS,LAWNS,LAWNY,LAXER,LAXES,LAXLY,LAYED,LAYER,LAYIN,LAYUP,LAZAR,LAZED,LAZES,LAZOS,LAZZI,LAZZO,LEACH,LEADS,LEADY,LEAFS,LEAFY,LEAKS,LEAKY,LEAMS,LEANS,LEANT,LEANY,LEAPS,LEAPT,LEARE,LEARN,LEARS,LEARY,LEASE,LEASH,LEAST,LEATS,LEAVE,LEAVY,LEAZE,LEBEN,LECCY,LEDGE,LEDGY,LEDUM,LEEAR,LEECH,LEEKS,LEEPS,LEERS,LEERY,LEESE,LEETS,LEFTE,LEFTS,LEFTY,LEGAL,LEGER,LEGES,LEGGE,LEGGY,LEGIT,LEHRS,LEHUA,LEIRS,LEISH,LEMAN,LEMED,LEMEL,LEMES,LEMMA,LEMON,LEMUR,LENDS,LENES,LENGS,LENIS,LENOS,LENSE,LENTI,LENTO,LEONE,LEPER,LEPID,LEPRA,LEPTA,LERED,LERES,LERPS,LESBO,LESES,LESTS,LETCH,LETHE,LETUP,LEUCH,LEUCO,LEUDS,LEUGH,LEVEE,LEVEL,LEVER,LEVIN,LEVIS,LEWIS,LEXES,LEXIS,LEZES,LEZZA,LEZZY,LIANA,LIANE,LIANG,LIARD,LIARS,LIART,LIBEL,LIBER,LIBRA,LIBRI,LICHI,LICHT,LICIT,LICKS,LIDAR,LIDOS,LIEFS,LIEGE,LIENS,LIERS,LIEUS,LIEVE,LIFER,LIFES,LIFTS,LIGAN,LIGER,LIGGE,LIGHT,LIGNE,LIKED,LIKEN,LIKER,LIKES,LIKIN,LILAC,LILLS,LILOS,LILTS,LIMAN,LIMAS,LIMAX,LIMBA,LIMBI,LIMBO,LIMBS,LIMBY,LIMED,LIMEN,LIMES,LIMEY,LIMIT,LIMMA,LIMNS,LIMOS,LIMPA,LIMPS,LINAC,LINCH,LINDS,LINDY,LINED,LINEN,LINER,LINES,LINEY,LINGA,LINGO,LINGS,LINGY,LININ,LINKS,LINKY,LINNS,LINNY,LINOS,LINTS,LINTY,LINUM,LINUX,LIONS,LIPID,LIPIN,LIPOS,LIPPY,LIRAS,LIRKS,LIROT,LISKS,LISLE,LISPS,LISTS,LITAI,LITAS,LITED,LITER,LITES,LITHE,LITHO,LITHS,LITRE,LIVED,LIVEN,LIVER,LIVES,LIVID,LIVOR,LIVRE,LLAMA,LLANO,LOACH,LOADS,LOAFS,LOAMS,LOAMY,LOANS,LOAST,LOATH,LOAVE,LOBAR,LOBBY,LOBED,LOBES,LOBOS,LOBUS,LOCAL,LOCHS,LOCKS,LOCOS,LOCUM,LOCUS,LODEN,LODES,LODGE,LOESS,LOFTS,LOFTY,LOGAN,LOGES,LOGGY,LOGIA,LOGIC,LOGIE,LOGIN,LOGOI,LOGON,LOGOS,LOHAN,LOIDS,LOINS,LOIPE,LOIRS,LOKES,LOLLS,LOLLY,LOLOG,LOMAS,LOMED,LOMES,LONER,LONGA,LONGE,LONGS,LOOBY,LOOED,LOOEY,LOOFA,LOOFS,LOOIE,LOOKS,LOOMS,LOONS,LOONY,LOOPS,LOOPY,LOORD,LOOSE,LOOTS,LOPED,LOPER,LOPES,LOPPY,LORAL,LORAN,LORDS,LORDY,LOREL,LORES,LORIC,LORIS,LORRY,LOSED,LOSEL,LOSEN,LOSER,LOSES,LOSSY,LOTAH,LOTAS,LOTES,LOTIC,LOTOS,LOTTE,LOTTO,LOTUS,LOUED,LOUGH,LOUIE,LOUIS,LOUMA,LOUND,LOUNS,LOUPE,LOUPS,LOURE,LOURS,LOURY,LOUSE,LOUSY,LOUTS,LOVAT,LOVED,LOVER,LOVES,LOVEY,LOWAN,LOWED,LOWER,LOWES,LOWLY,LOWND,LOWNE,LOWNS,LOWPS,LOWRY,LOWSE,LOWTS,LOXED,LOXES,LOYAL,LOZEN,LUACH,LUAUS,LUBED,LUBES,LUBRA,LUCES,LUCID,LUCKS,LUCKY,LUCRE,LUDES,LUDIC,LUDOS,LUFFA,LUFFS,LUGED,LUGER,LUGES,LULLS,LULUS,LUMAS,LUMEN,LUMME,LUMMY,LUMPS,LUMPY,LUNAR,LUNAS,LUNCH,LUNES,LUNET,LUNGE,LUNGI,LUNGS,LUNKS,LUNTS,LUPIN,LUPUS,LURCH,LURED,LURER,LURES,LUREX,LURGI,LURGY,LURID,LURKS,LURRY,LURVE,LUSER,LUSHY,LUSKS,LUSTS,LUSTY,LUSUS,LUTEA,LUTED,LUTER,LUTES,LUVVY,LUXES,LWEIS,LYAMS,LYARD,LYART,LYASE,LYCEA,LYCEE,LYCRA,LYING,LYMES,LYMPH,LYNCH,LYNES,LYRES,LYRIC,LYSED,LYSES,LYSIN,LYSIS,LYSOL,LYSSA,LYTED,LYTES,LYTHE,LYTIC,LYTTA,MAAED,MAARE,MAARS,MABES,MACAW,MACED,MACER,MACES,MACHE,MACHI,MACHO,MACHS,MACKS,MACLE,MACON,MACRO,MADAM,MADGE,MADID,MADLY,MADRE,MAFIA,MAFIC,MAGES,MAGGS,MAGIC,MAGMA,MAGOT,MAGUS,MAHOE,MAHUA,MAHWA,MAIDS,MAIKO,MAIKS,MAILE,MAILL,MAILS,MAIMS,MAINS,MAIRE,MAIRS,MAISE,MAIST,MAIZE,MAJOR,MAKAR,MAKER,MAKES,MAKIS,MAKOS,MALAM,MALAR,MALAS,MALAX,MALES,MALIC,MALIK,MALIS,MALLS,MALMS,MALMY,MALTS,MALTY,MALVA,MALWA,MAMAS,MAMBA,MAMBO,MAMEE,MAMEY,MAMIE,MAMMA,MAMMY,MANAS,MANAT,MANDI,MANED,MANEH,MANES,MANET,MANGA,MANGE,MANGO,MANGS,MANGY,MANIA,MANIC,MANIS,MANKY,MANLY,MANNA,MANOR,MANOS,MANSE,MANTA,MANTO,MANTY,MANUL,MANUS,MAPAU,MAPLE,MAQUI,MARAE,MARAH,MARAS,MARCH,MARCS,MARDY,MARES,MARGE,MARGS,MARIA,MARID,MARKA,MARKS,MARLE,MARLS,MARLY,MARMS,MARON,MAROR,MARRI,MARRY,MARSE,MARSH,MARTS,MARVY,MASAS,MASED,MASER,MASES,MASHY,MASKS,MASON,MASSA,MASSE,MASSY,MASTS,MASTY,MASUS,MATAI,MATCH,MATED,MATER,MATES,MATEY,MATHS,MATIN,MATLO,MATTE,MATTS,MATZA,MATZO,MAUBY,MAUDS,MAULS,MAUND,MAURI,MAUTS,MAUVE,MAVEN,MAVIE,MAVIN,MAVIS,MAWED,MAWKS,MAWKY,MAWRS,MAXED,MAXES,MAXIM,MAXIS,MAYAN,MAYAS,MAYBE,MAYED,MAYOR,MAYOS,MAYST,MAZED,MAZER,MAZES,MAZEY,MAZUT,MBIRA,MEADS,MEALS,MEALY,MEANE,MEANS,MEANT,MEANY,MEARE,MEASE,MEATH,MEATS,MEATY,MEBOS,MECCA,MECKS,MEDAL,MEDIA,MEDIC,MEDII,MEDLE,MEEDS,MEERS,MEETS,MEFFS,MEINS,MEINT,MEINY,MEITH,MEKKA,MELAS,MELDS,MELEE,MELIC,MELIK,MELLS,MELON,MELTS,MELTY,MEMES,MEMOS,MENAD,MENDS,MENED,MENES,MENGE,MENGS,MENSA,MENSE,MENSH,MENTA,MENTO,MENUS,MEOUS,MEOWS,MERCH,MERCS,MERCY,MERDE,MERED,MEREL,MERER,MERES,MERGE,MERIL,MERIS,MERIT,MERKS,MERLE,MERLS,MERRY,MERSE,MESAL,MESAS,MESEL,MESES,MESHY,MESIC,MESNE,MESON,MESSY,MESTO,METAL,METED,METER,METES,METHO,METHS,METIC,METIF,METIS,METOL,METRE,METRO,MEUSE,MEVED,MEVES,MEWED,MEWLS,MEYNT,MEZES,MEZZE,MEZZO,MHORR,MIAOU,MIAOW,MIASM,MIAUL,MICAS,MICHE,MICHT,MICKS,MICKY,MICOS,MICRA,MICRO,MIDDY,MIDGE,MIDGY,MIDIS,MIDST,MIENS,MIEVE,MIFFS,MIFFY,MIFTY,MIGGS,MIGHT,MIHIS,MIKED,MIKES,MIKRA,MILCH,MILDS,MILER,MILES,MILIA,MILKO,MILKS,MILKY,MILLE,MILLS,MILOR,MILOS,MILPA,MILTS,MILTY,MILTZ,MIMED,MIMEO,MIMER,MIMES,MIMIC,MIMSY,MINAE,MINAR,MINAS,MINCE,MINCY,MINDS,MINED,MINER,MINES,MINGE,MINGS,MINGY,MINIM,MINIS,MINKE,MINKS,MINNY,MINOR,MINOS,MINTS,MINTY,MINUS,MIRED,MIRES,MIREX,MIRIN,MIRKS,MIRKY,MIRLY,MIRTH,MIRVS,MIRZA,MISCH,MISDO,MISER,MISES,MISGO,MISOS,MISSA,MISSY,MISTS,MISTY,MITCH,MITER,MITES,MITIS,MITRE,MITTS,MIXED,MIXEN,MIXER,MIXES,MIXTE,MIXUP,MIZEN,MIZZY,MNEME,MOANS,MOATS,MOBBY,MOBES,MOBIE,MOBLE,MOCHA,MOCHS,MOCHY,MOCKS,MODAL,MODEL,MODEM,MODER,MODES,MODGE,MODII,MODUS,MOERS,MOFOS,MOGGY,MOGUL,MOHEL,MOHRS,MOHUA,MOHUR,MOILS,MOIRA,MOIRE,MOIST,MOITS,MOJOS,MOKES,MOKIS,MOKOS,MOLAL,MOLAR,MOLAS,MOLDS,MOLDY,MOLES,MOLLA,MOLLS,MOLLY,MOLTO,MOLTS,MOMES,MOMMA,MOMMY,MOMUS,MONAD,MONAL,MONAS,MONDE,MONDO,MONER,MONEY,MONGO,MONGS,MONIE,MONKS,MONOS,MONTE,MONTH,MONTY,MOOCH,MOODS,MOODY,MOOED,MOOKS,MOOLA,MOOLI,MOOLS,MOOLY,MOONS,MOONY,MOOPS,MOORS,MOORY,MOOSE,MOOTS,MOOVE,MOPED,MOPER,MOPES,MOPEY,MOPPY,MOPSY,MOPUS,MORAE,MORAL,MORAS,MORAT,MORAY,MOREL,MORES,MORIA,MORNE,MORNS,MORON,MORPH,MORRA,MORRO,MORSE,MORTS,MOSED,MOSES,MOSEY,MOSKS,MOSSO,MOSSY,MOSTE,MOSTS,MOTED,MOTEL,MOTEN,MOTES,MOTET,MOTEY,MOTHS,MOTHY,MOTIF,MOTIS,MOTOR,MOTTE,MOTTO,MOTTS,MOTTY,MOTUS,MOTZA,MOUCH,MOUES,MOULD,MOULS,MOULT,MOUND,MOUNT,MOUPS,MOURN,MOUSE,MOUST,MOUSY,MOUTH,MOVED,MOVER,MOVES,MOVIE,MOWAS,MOWED,MOWER,MOWRA,MOXAS,MOXIE,MOYAS,MOYLE,MOYLS,MOZED,MOZES,MOZOS,MPRET,MUCHO,MUCIC,MUCID,MUCIN,MUCKS,MUCKY,MUCOR,MUCRO,MUCUS,MUDDY,MUDGE,MUDIR,MUDRA,MUFFS,MUFTI,MUGGA,MUGGS,MUGGY,MUHLY,MUIDS,MUILS,MUIRS,MUIST,MUJIK,MULCH,MULCT,MULED,MULES,MULEY,MULGA,MULLA,MULLS,MULSE,MULSH,MUMMS,MUMMY,MUMPS,MUMSY,MUMUS,MUNCH,MUNGA,MUNGO,MUNGS,MUNIS,MUNTS,MUNTU,MUONS,MURAL,MURAS,MURED,MURES,MUREX,MURID,MURKS,MURKY,MURLS,MURLY,MURRA,MURRE,MURRI,MURRS,MURRY,MURTI,MURVA,MUSAR,MUSCA,MUSED,MUSER,MUSES,MUSET,MUSHA,MUSHY,MUSIC,MUSIT,MUSKS,MUSKY,MUSOS,MUSSE,MUSSY,MUSTH,MUSTS,MUSTY,MUTCH,MUTED,MUTER,MUTES,MUTHA,MUTIS,MUTON,MUTTS,MUXED,MUXES,MUZZY,MVULE,MYALL,MYLAR,MYNAH,MYNAS,MYOID,MYOMA,MYOPE,MYOPS,MYOPY,MYRRH,MYSID,MYTHI,MYTHS,MYTHY,MYXOS,MZEES,NAAMS,NAANS,NABES,NABIS,NABKS,NABLA,NABOB,NACHE,NACHO,NACRE,NADAS,NADIR,NAEVE,NAEVI,NAFFS,NAGAS,NAGGY,NAGOR,NAHAL,NAIAD,NAIFS,NAIKS,NAILS,NAIRA,NAIRU,NAIVE,NAKED,NAKER,NAKFA,NALAS,NALED,NALLA,NAMED,NAMER,NAMES,NAMMA,NANAS,NANCE,NANCY,NANDU,NANNA,NANNY,NANUA,NAPAS,NAPED,NAPES,NAPOO,NAPPA,NAPPE,NAPPY,NARAS,NARCO,NARCS,NARDS,NARES,NARIC,NARIS,NARKS,NARKY,NARRE,NASAL,NASHI,NASTY,NATAL,NATCH,NATES,NATIS,NATTY,NAUCH,NAUNT,NAVAL,NAVAR,NAVEL,NAVES,NAVEW,NAVVY,NAWAB,NAZES,NAZIR,NAZIS,NEAFE,NEALS,NEAPS,NEARS,NEATH,NEATS,NEBEK,NEBEL,NECKS,NEDDY,NEEDS,NEEDY,NEELD,NEELE,NEEMB,NEEMS,NEEPS,NEESE,NEEZE,NEGRO,NEGUS,NEIFS,NEIGH,NEIST,NEIVE,NELIS,NELLY,NEMAS,NEMNS,NEMPT,NENES,NEONS,NEPER,NEPIT,NERAL,NERDS,NERDY,NERKA,NERKS,NEROL,NERTS,NERTZ,NERVE,NERVY,NESTS,NETES,NETOP,NETTS,NETTY,NEUKS,NEUME,NEUMS,NEVEL,NEVER,NEVES,NEVUS,NEWED,NEWEL,NEWER,NEWIE,NEWLY,NEWSY,NEWTS,NEXTS,NEXUS,NGAIO,NGANA,NGATI,NGOMA,NGWEE,NICAD,NICER,NICHE,NICHT,NICKS,NICKY,NICOL,NIDAL,NIDED,NIDES,NIDOR,NIDUS,NIECE,NIEFS,NIEVE,NIFES,NIFFS,NIFFY,NIFTY,NIGER,NIGHS,NIGHT,NIHIL,NIKAU,NILLS,NIMBI,NIMBS,NIMPS,NINES,NINJA,NINNY,NINON,NINTH,NIPAS,NIPPY,NIQAB,NIRLS,NIRLY,NISEI,NISSE,NISUS,NITER,NITES,NITID,NITON,NITRE,NITRO,NITRY,NITTY,NIVAL,NIXED,NIXER,NIXES,NIXIE,NIZAM,NKOSI,NOAHS,NOBBY,NOBLE,NOBLY,NOCKS,NODAL,NODDY,NODES,NODUS,NOELS,NOGGS,NOHOW,NOILS,NOILY,NOINT,NOIRS,NOISE,NOISY,NOLES,NOLLS,NOLOS,NOMAD,NOMAS,NOMEN,NOMES,NOMIC,NOMOI,NOMOS,NONAS,NONCE,NONES,NONET,NONGS,NONIS,NONNY,NONYL,NOOIT,NOOKS,NOOKY,NOONS,NOOPS,NOOSE,NOPAL,NORIA,NORIS,NORKS,NORMA,NORMS,NORTH,NOSED,NOSER,NOSES,NOSEY,NOTAL,NOTCH,NOTED,NOTER,NOTES,NOTUM,NOULD,NOULE,NOULS,NOUNS,NOUNY,NOUPS,NOVAE,NOVAS,NOVEL,NOVUM,NOWAY,NOWED,NOWLS,NOWTS,NOWTY,NOXAL,NOXES,NOYAU,NOYED,NOYES,NUBBY,NUBIA,NUCHA,NUDDY,NUDER,NUDES,NUDGE,NUDIE,NUDZH,NUFFS,NUGAE,NUKED,NUKES,NULLA,NULLS,NUMBS,NUMEN,NUNNY,NURDS,NURDY,NURLS,NURRS,NURSE,NUTSO,NUTSY,NUTTY,NYAFF,NYALA,NYING,NYLON,NYMPH,NYSSA,OAKED,OAKEN,OAKER,OAKUM,OARED,OASES,OASIS,OASTS,OATEN,OATER,OATHS,OAVES,OBANG,OBEAH,OBELI,OBESE,OBEYS,OBIAS,OBIED,OBIIT,OBITS,OBJET,OBOES,OBOLE,OBOLI,OBOLS,OCCAM,OCCUR,OCEAN,OCHER,OCHES,OCHRE,OCHRY,OCKER,OCREA,OCTAD,OCTAL,OCTAN,OCTAS,OCTET,OCTYL,OCULI,ODAHS,ODALS,ODDER,ODDLY,ODEON,ODEUM,ODISM,ODIST,ODIUM,ODORS,ODOUR,ODSOS,ODYLE,ODYLS,OFAYS,OFFAL,OFFED,OFFER,OFLAG,OFTEN,OFTER,OGAMS,OGEES,OGGIN,OGHAM,OGIVE,OGLED,OGLER,OGLES,OGMIC,OGRES,OHIAS,OHING,OHMIC,OHONE,OIDIA,OILED,OILER,OINKS,OINTS,OJIME,OKAPI,OKAYS,OKEHS,OKRAS,OKTAS,OLDEN,OLDER,OLDIE,OLEIC,OLEIN,OLENT,OLEOS,OLEUM,OLIOS,OLIVE,OLLAS,OLLAV,OLLER,OLLIE,OLOGY,OLPAE,OLPES,OMASA,OMBER,OMBRE,OMBUS,OMEGA,OMENS,OMERS,OMITS,OMLAH,OMOVS,OMRAH,ONCER,ONCES,ONCET,ONCUS,ONELY,ONERS,ONERY,ONION,ONIUM,ONKUS,ONLAY,ONNED,ONSET,ONTIC,OOBIT,OOHED,OOMPH,OONTS,OOPED,OORIE,OOSES,OOTID,OOZED,OOZES,OPAHS,OPALS,OPENS,OPEPE,OPERA,OPINE,OPING,OPIUM,OPPOS,OPSIN,OPTED,OPTER,OPTIC,ORACH,ORACY,ORALS,ORANG,ORANT,ORATE,ORBED,ORBIT,ORCAS,ORCIN,ORDER,ORDOS,OREAD,ORFES,ORGAN,ORGIA,ORGIC,ORGUE,ORIBI,ORIEL,ORIXA,ORLES,ORLON,ORLOP,ORMER,ORNIS,ORPIN,ORRIS,ORTHO,ORVAL,ORZOS,OSCAR,OSHAC,OSIER,OSMIC,OSMOL,OSSIA,OSTIA,OTAKU,OTARY,OTHER,OTTAR,OTTER,OTTOS,OUBIT,OUCHT,OUGHT,OUIJA,OULKS,OUMAS,OUNCE,OUNDY,OUPAS,OUPED,OUPHE,OUPHS,OURIE,OUSEL,OUSTS,OUTBY,OUTDO,OUTED,OUTER,OUTGO,OUTRE,OUTRO,OUZEL,OUZOS,OVALS,OVARY,OVATE,OVELS,OVENS,OVERS,OVERT,OVINE,OVIST,OVOID,OVOLI,OVOLO,OVULE,OWCHE,OWING,OWLED,OWLER,OWLET,OWNED,OWNER,OWRES,OWRIE,OWSEN,OXBOW,OXERS,OXEYE,OXIDE,OXIDS,OXIME,OXIMS,OXLIP,OXTER,OYERS,OZEKI,OZONE,OZZIE,PAALS,PACAS,PACED,PACER,PACES,PACEY,PACHA,PACKS,PACOS,PACTA,PACTS,PADDY,PADIS,PADLE,PADMA,PADRE,PADRI,PAEAN,PAEON,PAGAN,PAGED,PAGER,PAGES,PAGLE,PAGOD,PAGRI,PAIKS,PAILS,PAINS,PAINT,PAIRE,PAIRS,PAISA,PAISE,PAKKA,PALAS,PALAY,PALEA,PALED,PALER,PALES,PALET,PALKI,PALLA,PALLS,PALLY,PALMS,PALMY,PALPI,PALPS,PALSY,PAMPA,PANAX,PANCE,PANDA,PANDS,PANDY,PANED,PANEL,PANES,PANGA,PANGS,PANIC,PANIM,PANNE,PANSY,PANTO,PANTS,PANTY,PAOLI,PAOLO,PAPAL,PAPAS,PAPAW,PAPER,PAPES,PAPPI,PAPPY,PARAE,PARAS,PARCH,PARDI,PARDS,PARDY,PARED,PAREO,PARER,PARES,PAREU,PAREV,PARGE,PARGO,PARIS,PARKA,PARKI,PARKS,PARKY,PARLE,PARLY,PAROL,PARPS,PARRA,PARRS,PARRY,PARSE,PARTI,PARTS,PARTY,PARVE,PARVO,PASEO,PASES,PASHA,PASHM,PASPY,PASSE,PASTA,PASTE,PASTS,PASTY,PATCH,PATED,PATEN,PATER,PATES,PATHS,PATIN,PATIO,PATLY,PATSY,PATTE,PATTY,PATUS,PAUAS,PAULS,PAUSE,PAVAN,PAVED,PAVEN,PAVER,PAVES,PAVID,PAVIN,PAVIS,PAWAS,PAWAW,PAWED,PAWER,PAWKS,PAWKY,PAWLS,PAWNS,PAXES,PAYED,PAYEE,PAYER,PAYOR,PAYSD,PEACE,PEACH,PEAGE,PEAGS,PEAKS,PEAKY,PEALS,PEANS,PEARE,PEARL,PEARS,PEART,PEASE,PEATS,PEATY,PEAVY,PEAZE,PEBAS,PECAN,PECHS,PECKE,PECKS,PECKY,PEDAL,PEDES,PEDRO,PEECE,PEEKS,PEELS,PEENS,PEEOY,PEEPE,PEEPS,PEERS,PEERY,PEEVE,PEGGY,PEGHS,PEINS,PEISE,PEIZE,PEKAN,PEKES,PEKIN,PEKOE,PELAS,PELES,PELFS,PELLS,PELMA,PELON,PELTA,PELTS,PENAL,PENCE,PENDS,PENDU,PENED,PENES,PENGO,PENIE,PENIS,PENKS,PENNA,PENNE,PENNI,PENNY,PENTS,PEONS,PEONY,PEPLA,PEPOS,PEPPY,PERAI,PERCE,PERCH,PERDU,PERDY,PEREA,PERES,PERIL,PERIS,PERKS,PERKY,PERMS,PERNS,PERPS,PERRY,PERSE,PERST,PERTS,PERVE,PERVS,PESKY,PESOS,PESTO,PESTS,PESTY,PETAL,PETAR,PETER,PETIT,PETRE,PETTI,PETTO,PETTY,PEWEE,PEWIT,PEYSE,PHAGE,PHANG,PHARE,PHASE,PHEER,PHENE,PHEON,PHESE,PHIAL,PHLOX,PHOCA,PHOHS,PHONE,PHONO,PHONS,PHONY,PHOTO,PHOTS,PHPHT,PHUTS,PHYLA,PHYLE,PIANO,PIANS,PIBAL,PICAL,PICAS,PICCY,PICKS,PICKY,PICOT,PICRA,PICUL,PIECE,PIEND,PIERS,PIERT,PIETA,PIETS,PIETY,PIEZO,PIGGY,PIGHT,PIGMY,PIING,PIKAS,PIKAU,PIKED,PIKER,PIKES,PIKEY,PIKIS,PIKUL,PILAF,PILAO,PILAR,PILAU,PILAW,PILCH,PILEA,PILED,PILEI,PILER,PILES,PILIS,PILLS,PILOT,PILOW,PILUM,PILUS,PIMAS,PIMPS,PINAS,PINCH,PINED,PINES,PINEY,PINGO,PINGS,PINKO,PINKS,PINKY,PINNA,PINNY,PINON,PINOT,PINTA,PINTO,PINTS,PINUP,PIONS,PIONY,PIOUS,PIOYE,PIOYS,PIPAL,PIPAS,PIPED,PIPER,PIPES,PIPET,PIPIS,PIPIT,PIPPY,PIPUL,PIQUE,PIRAI,PIRLS,PIRNS,PIROG,PISCO,PISES,PISKY,PISOS,PISTE,PITAS,PITCH,PITHS,PITHY,PITON,PITTA,PIUMS,PIVOT,PIXEL,PIXES,PIXIE,PIZED,PIZES,PIZZA,PLAAS,PLACE,PLACK,PLAGE,PLAID,PLAIN,PLAIT,PLANE,PLANK,PLANS,PLANT,PLAPS,PLASH,PLASM,PLAST,PLATE,PLATS,PLATY,PLAYA,PLAYS,PLAZA,PLEAD,PLEAS,PLEAT,PLEBE,PLEBS,PLENA,PLEON,PLESH,PLEWS,PLICA,PLIED,PLIER,PLIES,PLIMS,PLING,PLINK,PLOAT,PLODS,PLONG,PLONK,PLOOK,PLOPS,PLOTS,PLOTZ,PLOUK,PLOWS,PLOYS,PLUCK,PLUES,PLUFF,PLUGS,PLUMB,PLUME,PLUMP,PLUMS,PLUMY,PLUNK,PLUSH,PLYER,POACH,POAKA,POAKE,POBOY,POCKS,POCKY,PODAL,PODDY,PODEX,PODGE,PODGY,PODIA,POEMS,POEPS,POESY,POETS,POGEY,POGGE,POGOS,POILU,POIND,POINT,POISE,POKAL,POKED,POKER,POKES,POKEY,POKIE,POLAR,POLED,POLER,POLES,POLEY,POLIO,POLIS,POLJE,POLKA,POLKS,POLLS,POLLY,POLOS,POLTS,POLYP,POLYS,POMBE,POMES,POMMY,POMOS,POMPS,PONCE,PONCY,PONDS,PONES,PONEY,PONGA,PONGO,PONGS,PONGY,PONKS,PONTS,PONTY,PONZU,POOCH,POODS,POOED,POOFS,POOFY,POOHS,POOJA,POOKA,POOKS,POOLS,POONS,POOPS,POORI,POORT,POOTS,POOVE,POOVY,POPES,POPPA,POPPY,POPSY,PORAE,PORAL,PORCH,PORED,PORER,PORES,PORGE,PORGY,PORKS,PORKY,PORNO,PORNS,PORNY,PORTA,PORTS,PORTY,POSED,POSER,POSES,POSEY,POSHO,POSIT,POSSE,POSTS,POTAE,POTCH,POTED,POTES,POTIN,POTOO,POTSY,POTTO,POTTS,POTTY,POUCH,POUFF,POUFS,POUKE,POUKS,POULE,POULP,POULT,POUND,POUPE,POUPT,POURS,POUTS,POUTY,POWAN,POWER,POWIN,POWND,POWNS,POWNY,POWRE,POXED,POXES,POYNT,POYOU,POYSE,POZZY,PRAAM,PRADS,PRAHU,PRAMS,PRANA,PRANG,PRANK,PRAOS,PRASE,PRATE,PRATS,PRATT,PRATY,PRAUS,PRAWN,PRAYS,PREDY,PREED,PREEN,PREES,PREIF,PREMS,PREMY,PRENT,PREOP,PREPS,PRESA,PRESE,PRESS,PREST,PREVE,PREXY,PREYS,PRIAL,PRICE,PRICK,PRICY,PRIDE,PRIED,PRIEF,PRIER,PRIES,PRIGS,PRILL,PRIMA,PRIME,PRIMI,PRIMO,PRIMP,PRIMS,PRIMY,PRINK,PRINT,PRION,PRIOR,PRISE,PRISM,PRISS,PRIVY,PRIZE,PROAS,PROBE,PROBS,PRODS,PROEM,PROFS,PROGS,PROIN,PROKE,PROLE,PROLL,PROMO,PROMS,PRONE,PRONG,PRONK,PROOF,PROPS,PRORE,PROSE,PROSO,PROSS,PROST,PROSY,PROUD,PROUL,PROVE,PROWL,PROWS,PROXY,PROYN,PRUDE,PRUNE,PRUNT,PRUTA,PRYER,PRYSE,PSALM,PSEUD,PSHAW,PSION,PSOAE,PSOAI,PSOAS,PSORA,PSYCH,PSYOP,PUBES,PUBIC,PUBIS,PUCAN,PUCER,PUCES,PUCKA,PUCKS,PUDDY,PUDGE,PUDGY,PUDIC,PUDOR,PUDSY,PUDUS,PUERS,PUFFS,PUFFY,PUGGY,PUGIL,PUHAS,PUJAH,PUJAS,PUKED,PUKER,PUKES,PUKKA,PUKUS,PULAO,PULAS,PULED,PULER,PULES,PULIK,PULIS,PULKA,PULKS,PULLI,PULLS,PULMO,PULPS,PULPY,PULSE,PULUS,PUMAS,PUMIE,PUMPS,PUNAS,PUNCE,PUNCH,PUNGA,PUNGS,PUNJI,PUNKA,PUNKS,PUNKY,PUNNY,PUNTO,PUNTS,PUNTY,PUPAE,PUPAL,PUPAS,PUPIL,PUPPY,PUPUS,PURDA,PURED,PUREE,PURER,PURES,PURGE,PURIM,PURIN,PURIS,PURLS,PURPY,PURRS,PURSE,PURSY,PURTY,PUSES,PUSHY,PUSLE,PUSSY,PUTID,PUTON,PUTTI,PUTTO,PUTTS,PUTTY,PUZEL,PYATS,PYETS,PYGAL,PYGMY,PYINS,PYLON,PYNED,PYNES,PYOID,PYOTS,PYRAL,PYRAN,PYRES,PYREX,PYRIC,PYROS,PYXED,PYXES,PYXIE,PYXIS,PZAZZ,QADIS,QAIDS,QANAT,QIBLA,QOPHS,QORMA,QUACK,QUADS,QUAFF,QUAGS,QUAIL,QUAIR,QUAIS,QUAKE,QUAKY,QUALE,QUALM,QUANT,QUARE,QUARK,QUART,QUASH,QUASI,QUASS,QUATE,QUATS,QUAYD,QUAYS,QUBIT,QUEAN,QUEEN,QUEER,QUELL,QUEME,QUENA,QUERN,QUERY,QUEST,QUEUE,QUEYN,QUEYS,QUICH,QUICK,QUIDS,QUIET,QUIFF,QUILL,QUILT,QUIMS,QUINA,QUINE,QUINO,QUINS,QUINT,QUIPO,QUIPS,QUIPU,QUIRE,QUIRK,QUIRT,QUIST,QUITE,QUITS,QUOAD,QUODS,QUOIF,QUOIN,QUOIT,QUOLL,QUONK,QUOPS,QUOTA,QUOTE,QUOTH,QURSH,QUYTE,RABAT,RABBI,RABIC,RABID,RABIS,RACED,RACER,RACES,RACHE,RACKS,RACON,RADAR,RADGE,RADII,RADIO,RADIX,RADON,RAFFS,RAFTS,RAGAS,RAGDE,RAGED,RAGEE,RAGER,RAGES,RAGGA,RAGGS,RAGGY,RAGIS,RAHED,RAHUI,RAIAS,RAIDS,RAIKS,RAILE,RAILS,RAINE,RAINS,RAINY,RAIRD,RAISE,RAITA,RAITS,RAJAH,RAJAS,RAJES,RAKED,RAKEE,RAKER,RAKES,RAKIS,RAKUS,RALES,RALLY,RALPH,RAMAL,RAMEE,RAMEN,RAMET,RAMIE,RAMIN,RAMIS,RAMMY,RAMPS,RAMUS,RANAS,RANCE,RANCH,RANDS,RANDY,RANEE,RANGE,RANGI,RANGY,RANID,RANIS,RANKE,RANKS,RANTS,RAPED,RAPER,RAPES,RAPHE,RAPID,RAPPE,RARED,RAREE,RARER,RARES,RARKS,RASED,RASER,RASES,RASPS,RASPY,RASSE,RASTA,RATAL,RATAN,RATAS,RATCH,RATED,RATEL,RATER,RATES,RATHA,RATHE,RATHS,RATIO,RATOO,RATOS,RATTY,RATUS,RAUNS,RAUPO,RAVED,RAVEL,RAVEN,RAVER,RAVES,RAVIN,RAWER,RAWIN,RAWLY,RAWNS,RAXED,RAXES,RAYAH,RAYAS,RAYED,RAYLE,RAYNE,RAYON,RAZED,RAZEE,RAZER,RAZES,RAZOO,RAZOR,REACH,REACT,READD,READS,READY,REAKS,REALM,REALO,REALS,REAME,REAMS,REAMY,REANS,REAPS,REARM,REARS,REAST,REATA,REATE,REAVE,REBAR,REBBE,REBEC,REBEL,REBID,REBIT,REBOP,REBUS,REBUT,REBUY,RECAL,RECAP,RECCE,RECCO,RECCY,RECIT,RECKS,RECON,RECTA,RECTI,RECTO,RECUR,RECUT,REDAN,REDDS,REDDY,REDED,REDES,REDIA,REDID,REDIP,REDLY,REDON,REDOS,REDOX,REDRY,REDUB,REDUX,REDYE,REECH,REEDE,REEDS,REEDY,REEFS,REEFY,REEKS,REEKY,REELS,REENS,REEST,REEVE,REFED,REFEL,REFER,REFFO,REFIT,REFIX,REFLY,REFRY,REGAL,REGAR,REGES,REGGO,REGIE,REGMA,REGNA,REGOS,REGUR,REHAB,REHEM,REIFS,REIFY,REIGN,REIKI,REIKS,REINK,REINS,REIRD,REIST,REIVE,REJIG,REJON,REKED,REKES,REKEY,RELAX,RELAY,RELET,RELIC,RELIE,RELIT,REMAN,REMAP,REMEN,REMET,REMEX,REMIT,REMIX,RENAL,RENAY,RENDS,RENEW,RENEY,RENGA,RENIG,RENIN,RENNE,RENTE,RENTS,REOIL,REPAY,REPEG,REPEL,REPIN,REPLA,REPLY,REPOS,REPOT,REPPS,REPRO,RERAN,RERIG,RERUN,RESAT,RESAW,RESAY,RESEE,RESES,RESET,RESEW,RESID,RESIN,RESIT,RESOD,RESOW,RESTO,RESTS,RESTY,RETAG,RETAX,RETCH,RETEM,RETES,RETIA,RETIE,RETRO,RETRY,REUSE,REVEL,REVET,REVIE,REVUE,REWAN,REWAX,REWED,REWET,REWIN,REWON,REWTH,REXES,RHEAS,RHEME,RHEUM,RHIES,RHIME,RHINE,RHINO,RHODY,RHOMB,RHONE,RHUMB,RHYME,RHYNE,RHYTA,RIALS,RIANT,RIATA,RIBAS,RIBBY,RIBES,RICED,RICER,RICES,RICEY,RICHT,RICIN,RICKS,RIDER,RIDES,RIDGE,RIDGY,RIELS,RIEMS,RIEVE,RIFER,RIFFS,RIFLE,RIFTE,RIFTS,RIFTY,RIGGS,RIGHT,RIGID,RIGOL,RIGOR,RILED,RILES,RILEY,RILLE,RILLS,RIMAE,RIMED,RIMER,RIMES,RIMUS,RINDS,RINDY,RINES,RINGS,RINKS,RINSE,RIOJA,RIOTS,RIPED,RIPEN,RIPER,RIPES,RIPPS,RISEN,RISER,RISES,RISHI,RISKS,RISKY,RISPS,RISUS,RITES,RITTS,RITZY,RIVAL,RIVAS,RIVED,RIVEL,RIVEN,RIVER,RIVES,RIVET,RIVOS,RIYAL,RIZAS,ROACH,ROADS,ROAMS,ROANS,ROARS,ROARY,ROAST,ROATE,ROBED,ROBES,ROBIN,ROBLE,ROBOT,ROCKS,ROCKY,RODED,RODEO,RODES,ROGER,ROGUE,ROGUY,ROILS,ROILY,ROINS,ROIST,ROJAK,ROJIS,ROKED,ROKER,ROKES,ROLAG,ROLES,ROLFS,ROLLS,ROMAL,ROMAN,ROMAS,ROMEO,ROMPS,RONDE,RONDO,RONEO,RONES,RONIN,RONNE,RONTE,RONTS,ROODS,ROOFS,ROOFY,ROOKS,ROOKY,ROOMS,ROOMY,ROONS,ROOPS,ROOPY,ROOSA,ROOSE,ROOST,ROOTS,ROOTY,ROPED,ROPER,ROPES,ROPEY,ROQUE,RORAL,RORES,RORIC,RORID,RORIE,RORTS,RORTY,ROSED,ROSES,ROSET,ROSHI,ROSIN,ROSIT,ROSTI,ROSTS,ROTAL,ROTAN,ROTAS,ROTCH,ROTED,ROTES,ROTIS,ROTLS,ROTON,ROTOR,ROTOS,ROTTE,ROUEN,ROUES,ROUGE,ROUGH,ROULE,ROULS,ROUMS,ROUND,ROUPS,ROUPY,ROUSE,ROUST,ROUTE,ROUTH,ROUTS,ROVED,ROVEN,ROVER,ROVES,ROWAN,ROWDY,ROWED,ROWEL,ROWEN,ROWER,ROWME,ROWND,ROWTH,ROWTS,ROYAL,ROYNE,ROYST,ROZET,ROZIT,RUANA,RUBAI,RUBBY,RUBEL,RUBES,RUBIN,RUBLE,RUBUS,RUCHE,RUCKS,RUDAS,RUDDS,RUDDY,RUDER,RUDES,RUDIE,RUERS,RUFFE,RUFFS,RUGAE,RUGAL,RUGBY,RUGGY,RUING,RUINS,RUKHS,RULED,RULER,RULES,RUMAL,RUMBA,RUMBO,RUMEN,RUMES,RUMLY,RUMMY,RUMOR,RUMPO,RUMPS,RUMPY,RUNCH,RUNDS,RUNED,RUNES,RUNGS,RUNIC,RUNNY,RUNTS,RUNTY,RUPEE,RUPIA,RURAL,RURPS,RURUS,RUSAS,RUSES,RUSHY,RUSKS,RUSMA,RUSSE,RUSTS,RUSTY,RUTHS,RUTIN,RUTTY,RYALS,RYBAT,RYKED,RYKES,RYMME,RYNDS,RYOTS,RYPER,SABAL,SABED,SABER,SABES,SABIN,SABIR,SABLE,SABOT,SABRA,SABRE,SACKS,SACRA,SADDO,SADES,SADHE,SADHU,SADIS,SADLY,SADOS,SADZA,SAFED,SAFER,SAFES,SAGAS,SAGER,SAGES,SAGGY,SAGOS,SAGUM,SAHEB,SAHIB,SAICE,SAICK,SAICS,SAIDS,SAIGA,SAILS,SAIMS,SAINE,SAINS,SAINT,SAIRS,SAIST,SAITH,SAJOU,SAKAI,SAKER,SAKES,SAKIA,SAKIS,SALAD,SALAL,SALEP,SALES,SALET,SALIC,SALIX,SALLE,SALLY,SALMI,SALOL,SALON,SALOP,SALPA,SALPS,SALSA,SALSE,SALTO,SALTS,SALTY,SALUE,SALVE,SALVO,SAMAN,SAMAS,SAMBA,SAMBO,SAMEK,SAMEL,SAMEN,SAMES,SAMEY,SAMFU,SAMMY,SAMPI,SAMPS,SANDS,SANDY,SANED,SANER,SANES,SANGA,SANGH,SANGO,SANGS,SANKO,SANSA,SANTO,SANTS,SAPAN,SAPID,SAPOR,SAPPY,SARAN,SARDS,SARED,SAREE,SARGE,SARGO,SARIN,SARIS,SARKS,SARKY,SAROD,SAROS,SARUS,SASER,SASIN,SASSE,SASSY,SATAI,SATAY,SATED,SATEM,SATES,SATIN,SATIS,SATYR,SAUBA,SAUCE,SAUCH,SAUCY,SAUGH,SAULS,SAULT,SAUNA,SAUNT,SAURY,SAUTE,SAUTS,SAVED,SAVER,SAVES,SAVEY,SAVIN,SAVOR,SAVOY,SAVVY,SAWAH,SAWED,SAWER,SAXES,SAYED,SAYER,SAYID,SAYNE,SAYON,SAYST,SAZES,SCABS,SCADS,SCAFF,SCAGS,SCAIL,SCALA,SCALD,SCALE,SCALL,SCALP,SCALY,SCAMP,SCAMS,SCAND,SCANS,SCANT,SCAPA,SCAPE,SCAPI,SCARE,SCARF,SCARP,SCARS,SCART,SCARY,SCATH,SCATS,SCATT,SCAUD,SCAUP,SCAUR,SCAWS,SCEAT,SCENA,SCEND,SCENE,SCENT,SCHAV,SCHMO,SCHUL,SCHWA,SCION,SCLIM,SCODY,SCOFF,SCOGS,SCOLD,SCONE,SCOOG,SCOOP,SCOOT,SCOPA,SCOPE,SCOPS,SCORE,SCORN,SCOTS,SCOUG,SCOUP,SCOUR,SCOUT,SCOWL,SCOWP,SCOWS,SCRAB,SCRAE,SCRAG,SCRAM,SCRAN,SCRAP,SCRAT,SCRAW,SCRAY,SCREE,SCREW,SCRIM,SCRIP,SCROD,SCROG,SCROW,SCRUB,SCRUM,SCUBA,SCUDI,SCUDO,SCUDS,SCUFF,SCUFT,SCUGS,SCULK,SCULL,SCULP,SCULS,SCUMS,SCUPS,SCURF,SCURS,SCUSE,SCUTA,SCUTE,SCUTS,SCUZZ,SCYES,SDAYN,SDEIN,SEALS,SEAME,SEAMS,SEAMY,SEANS,SEARE,SEARS,SEASE,SEATS,SEAZE,SEBUM,SECCO,SECHS,SECTS,SEDAN,SEDER,SEDES,SEDGE,SEDGY,SEDUM,SEEDS,SEEDY,SEEKS,SEELD,SEELS,SEELY,SEEMS,SEEPS,SEEPY,SEERS,SEFER,SEGAR,SEGNI,SEGNO,SEGOL,SEGOS,SEGUE,SEIFS,SEILS,SEINE,SEIRS,SEISE,SEISM,SEITY,SEIZE,SEKOS,SEKTS,SELAH,SELES,SELFS,SELLA,SELLE,SELLS,SELVA,SEMEE,SEMEN,SEMES,SEMIE,SEMIS,SENAS,SENDS,SENGI,SENNA,SENOR,SENSA,SENSE,SENSI,SENTE,SENTI,SENTS,SENVY,SENZA,SEPAD,SEPAL,SEPIA,SEPIC,SEPOY,SEPTA,SEPTS,SERAC,SERAI,SERAL,SERED,SERER,SERES,SERFS,SERGE,SERIC,SERIF,SERIN,SERKS,SERON,SEROW,SERRA,SERRE,SERRS,SERRY,SERUM,SERVE,SERVO,SESEY,SESSA,SETAE,SETAL,SETON,SETTS,SETUP,SEVEN,SEVER,SEWAN,SEWAR,SEWED,SEWEL,SEWEN,SEWER,SEWIN,SEXED,SEXER,SEXES,SEXTO,SEXTS,SEYEN,SHACK,SHADE,SHADS,SHADY,SHAFT,SHAGS,SHAHS,SHAKE,SHAKO,SHAKT,SHAKY,SHALE,SHALL,SHALM,SHALT,SHALY,SHAMA,SHAME,SHAMS,SHAND,SHANK,SHANS,SHAPE,SHAPS,SHARD,SHARE,SHARK,SHARN,SHARP,SHASH,SHAUL,SHAVE,SHAWL,SHAWM,SHAWN,SHAWS,SHAYA,SHAYS,SHCHI,SHEAF,SHEAL,SHEAR,SHEAS,SHEDS,SHEEL,SHEEN,SHEEP,SHEER,SHEET,SHEIK,SHELF,SHELL,SHEND,SHENT,SHEOL,SHERD,SHERE,SHETS,SHEVA,SHEWN,SHEWS,SHIAI,SHIED,SHIEL,SHIER,SHIES,SHIFT,SHILL,SHILY,SHIMS,SHINE,SHINS,SHINY,SHIPS,SHIRE,SHIRK,SHIRR,SHIRS,SHIRT,SHISH,SHISO,SHIST,SHITE,SHITS,SHIUR,SHIVA,SHIVE,SHIVS,SHLEP,SHLUB,SHMEK,SHOAL,SHOAT,SHOCK,SHOED,SHOER,SHOES,SHOGI,SHOGS,SHOJI,SHOLA,SHONE,SHOOK,SHOOL,SHOON,SHOOS,SHOOT,SHOPE,SHOPS,SHORE,SHORL,SHORN,SHORT,SHOTE,SHOTS,SHOTT,SHOUT,SHOVE,SHOWD,SHOWN,SHOWS,SHOWY,SHOYU,SHRED,SHREW,SHRIS,SHROW,SHRUB,SHRUG,SHTIK,SHTUM,SHTUP,SHUCK,SHULE,SHULN,SHULS,SHUNS,SHUNT,SHURA,SHUSH,SHUTE,SHUTS,SHWAS,SHYER,SHYLY,SIALS,SIBBS,SIBYL,SICES,SICHT,SICKO,SICKS,SIDAS,SIDED,SIDER,SIDES,SIDHA,SIDHE,SIDLE,SIEGE,SIELD,SIENS,SIENT,SIETH,SIEUR,SIEVE,SIFTS,SIGHS,SIGHT,SIGIL,SIGLA,SIGMA,SIGNA,SIGNS,SIJOS,SIKAS,SIKER,SIKES,SILDS,SILED,SILEN,SILER,SILES,SILEX,SILKS,SILKY,SILLS,SILLY,SILOS,SILTS,SILTY,SILVA,SIMAR,SIMAS,SIMBA,SIMIS,SIMPS,SIMUL,SINCE,SINDS,SINED,SINES,SINEW,SINGE,SINGS,SINHS,SINKS,SINKY,SINUS,SIPED,SIPES,SIPPY,SIRED,SIREE,SIREN,SIRES,SIRIH,SIRIS,SIROC,SIRRA,SIRUP,SISAL,SISES,SISSY,SISTS,SITAR,SITED,SITES,SITHE,SITKA,SITUP,SITUS,SIVER,SIXER,SIXES,SIXMO,SIXTE,SIXTH,SIXTY,SIZAR,SIZED,SIZEL,SIZER,SIZES,SKAGS,SKAIL,SKALD,SKANK,SKART,SKATE,SKATS,SKATT,SKAWS,SKEAN,SKEAR,SKEED,SKEEF,SKEEN,SKEER,SKEES,SKEET,SKEGG,SKEGS,SKEIN,SKELF,SKELL,SKELM,SKELP,SKENE,SKENS,SKEOS,SKEPS,SKERS,SKETS,SKEWS,SKIDS,SKIED,SKIER,SKIES,SKIEY,SKIFF,SKILL,SKIMO,SKIMP,SKIMS,SKINK,SKINS,SKINT,SKIOS,SKIPS,SKIRL,SKIRR,SKIRT,SKITE,SKITS,SKIVE,SKIVY,SKLIM,SKOAL,SKOFF,SKOLS,SKOOL,SKORT,SKOSH,SKRAN,SKRIK,SKUAS,SKUGS,SKULK,SKULL,SKUNK,SKYED,SKYER,SKYEY,SKYFS,SKYRE,SKYRS,SKYTE,SLABS,SLACK,SLADE,SLAES,SLAGS,SLAID,SLAIN,SLAKE,SLAMS,SLANE,SLANG,SLANK,SLANT,SLAPS,SLART,SLASH,SLATE,SLATS,SLATY,SLAVE,SLAWS,SLAYS,SLEDS,SLEEK,SLEEP,SLEER,SLEET,SLEPT,SLEWS,SLEYS,SLICE,SLICK,SLIDE,SLIER,SLILY,SLIME,SLIMS,SLIMY,SLING,SLINK,SLIPE,SLIPS,SLIPT,SLISH,SLITS,SLIVE,SLOAN,SLOBS,SLOES,SLOGS,SLOID,SLOJD,SLOOM,SLOOP,SLOOT,SLOPE,SLOPS,SLOPY,SLORM,SLOSH,SLOTH,SLOTS,SLOVE,SLOWS,SLOYD,SLUBB,SLUBS,SLUED,SLUES,SLUFF,SLUGS,SLUIT,SLUMP,SLUMS,SLUNG,SLUNK,SLURB,SLURP,SLURS,SLUSE,SLUSH,SLUTS,SLYER,SLYLY,SLYPE,SMAAK,SMACK,SMAIK,SMALL,SMALM,SMALT,SMARM,SMART,SMASH,SMAZE,SMEAR,SMEEK,SMEES,SMELL,SMELT,SMERK,SMEWS,SMILE,SMIRK,SMIRR,SMIRS,SMITE,SMITH,SMITS,SMOCK,SMOGS,SMOKE,SMOKO,SMOKY,SMOLT,SMOOR,SMOOT,SMORE,SMOTE,SMOUT,SMOWT,SMUGS,SMURS,SMUSH,SMUTS,SNABS,SNACK,SNAFU,SNAGS,SNAIL,SNAKE,SNAKY,SNAPS,SNARE,SNARF,SNARK,SNARL,SNARS,SNARY,SNASH,SNATH,SNAWS,SNEAD,SNEAK,SNEAP,SNEBS,SNECK,SNEDS,SNEED,SNEER,SNEES,SNELL,SNIBS,SNICK,SNIDE,SNIES,SNIFF,SNIFT,SNIGS,SNIPE,SNIPS,SNIPY,SNIRT,SNITS,SNOBS,SNODS,SNOEK,SNOEP,SNOGS,SNOKE,SNOOD,SNOOK,SNOOL,SNOOP,SNOOT,SNORE,SNORT,SNOTS,SNOUT,SNOWK,SNOWS,SNOWY,SNUBS,SNUCK,SNUFF,SNUGS,SNUSH,SNYES,SOAKS,SOAPS,SOAPY,SOARE,SOARS,SOAVE,SOBAS,SOBER,SOCAS,SOCKO,SOCKS,SOCLE,SODAS,SODDY,SODIC,SODOM,SOFAR,SOFAS,SOFTA,SOFTS,SOFTY,SOGER,SOGGY,SOILS,SOILY,SOJAS,SOKAH,SOKEN,SOKES,SOKOL,SOLAH,SOLAN,SOLAR,SOLAS,SOLDE,SOLDI,SOLDO,SOLDS,SOLED,SOLEI,SOLER,SOLES,SOLID,SOLON,SOLOS,SOLUM,SOLUS,SOLVE,SOMAN,SOMAS,SONAR,SONCE,SONDE,SONES,SONGS,SONIC,SONLY,SONNE,SONNY,SONSE,SONSY,SOOEY,SOOKS,SOOLE,SOOLS,SOOMS,SOOPS,SOOTE,SOOTH,SOOTS,SOOTY,SOPHS,SOPHY,SOPOR,SOPPY,SOPRA,SORAL,SORAS,SORBO,SORBS,SORDA,SORDO,SORDS,SORED,SOREE,SOREL,SORER,SORES,SOREX,SORGO,SORNS,SORRA,SORRY,SORTA,SORTS,SORUS,SOTHS,SOTOL,SOUCE,SOUCT,SOUGH,SOUKS,SOULS,SOUMS,SOUND,SOUPS,SOUPY,SOURS,SOUSE,SOUTH,SOUTS,SOWAR,SOWCE,SOWED,SOWER,SOWFF,SOWFS,SOWLE,SOWLS,SOWMS,SOWND,SOWNE,SOWPS,SOWSE,SOWTH,SOYAS,SOYLE,SOYUZ,SOZIN,SPACE,SPACY,SPADE,SPADO,SPAED,SPAER,SPAES,SPAGS,SPAHI,SPAIL,SPAIN,SPAIT,SPAKE,SPALD,SPALE,SPALL,SPALT,SPAMS,SPANE,SPANG,SPANK,SPANS,SPARD,SPARE,SPARK,SPARS,SPART,SPASM,SPATE,SPATS,SPAUL,SPAWL,SPAWN,SPAWS,SPAYD,SPAYS,SPAZA,SPAZZ,SPEAK,SPEAL,SPEAN,SPEAR,SPEAT,SPECK,SPECS,SPEED,SPEEL,SPEER,SPEIL,SPEIR,SPEKS,SPELD,SPELK,SPELL,SPELT,SPEND,SPENT,SPEOS,SPERM,SPETS,SPEUG,SPEWS,SPEWY,SPIAL,SPICA,SPICE,SPICK,SPICS,SPICY,SPIDE,SPIED,SPIEL,SPIER,SPIES,SPIFF,SPIFS,SPIKE,SPIKS,SPIKY,SPILE,SPILL,SPILT,SPIMS,SPINA,SPINE,SPINK,SPINS,SPINY,SPIRE,SPIRT,SPIRY,SPITE,SPITS,SPITZ,SPIVS,SPLAT,SPLAY,SPLIT,SPODE,SPODS,SPOIL,SPOKE,SPOOF,SPOOK,SPOOL,SPOOM,SPOON,SPOOR,SPOOT,SPORE,SPORT,SPOSH,SPOTS,SPOUT,SPRAD,SPRAG,SPRAT,SPRAY,SPRED,SPREE,SPREW,SPRIG,SPRIT,SPROD,SPROG,SPRUE,SPRUG,SPUDS,SPUED,SPUER,SPUES,SPUGS,SPULE,SPUME,SPUMY,SPUNK,SPURN,SPURS,SPURT,SPUTA,SPYAL,SPYRE,SQUAB,SQUAD,SQUAT,SQUAW,SQUEG,SQUIB,SQUID,SQUIT,SQUIZ,STABS,STACK,STADE,STAFF,STAGE,STAGS,STAGY,STAID,STAIG,STAIN,STAIR,STAKE,STALE,STALK,STALL,STAMP,STAND,STANE,STANG,STANK,STAPH,STAPS,STARE,STARK,STARN,STARR,STARS,START,STASH,STATE,STATS,STAUN,STAVE,STAWS,STAYS,STEAD,STEAK,STEAL,STEAM,STEAN,STEAR,STEDD,STEDE,STEDS,STEED,STEEK,STEEL,STEEM,STEEN,STEEP,STEER,STEIL,STEIN,STELA,STELE,STELL,STEME,STEMS,STEND,STENO,STENS,STENT,STEPS,STEPT,STERE,STERN,STETS,STEWS,STEWY,STICH,STICK,STIED,STIES,STIFF,STILB,STILE,STILL,STILT,STIME,STIMS,STIMY,STING,STINK,STINT,STIPA,STIPE,STIRE,STIRK,STIRP,STIRS,STIVE,STIVY,STOAE,STOAI,STOAS,STOAT,STOBS,STOCK,STOEP,STOGY,STOIC,STOIT,STOKE,STOLE,STOLN,STOMA,STOMP,STOND,STONE,STONG,STONK,STONN,STONY,STOOD,STOOK,STOOL,STOOP,STOOR,STOPE,STOPS,STOPT,STORE,STORK,STORM,STORY,STOSS,STOTS,STOTT,STOUN,STOUP,STOUR,STOUT,STOVE,STOWN,STOWP,STOWS,STRAD,STRAE,STRAG,STRAP,STRAW,STRAY,STREP,STREW,STRIA,STRIG,STRIP,STROP,STROW,STROY,STRUM,STRUT,STUBS,STUCK,STUDS,STUDY,STUFF,STULL,STULM,STUMM,STUMP,STUMS,STUNG,STUNK,STUNS,STUNT,STUPA,STUPE,STURE,STURT,STYED,STYES,STYLE,STYLI,STYLO,STYME,STYMY,STYRE,STYTE,SUAVE,SUBAH,SUBAS,SUBBY,SUBER,SUBHA,SUCCI,SUCKS,SUCKY,SUCRE,SUDDS,SUDOR,SUDSY,SUEDE,SUENT,SUERS,SUETS,SUETY,SUGAN,SUGAR,SUGHS,SUIDS,SUING,SUINT,SUITE,SUITS,SUJEE,SUKHS,SULCI,SULFA,SULFO,SULKS,SULKY,SULLY,SULUS,SUMAC,SUMMA,SUMOS,SUMPH,SUMPS,SUNKS,SUNNA,SUNNS,SUNNY,SUNUP,SUPER,SUPES,SUPRA,SURAH,SURAL,SURAS,SURAT,SURDS,SURED,SURER,SURES,SURFS,SURFY,SURGE,SURGY,SURLY,SURRA,SUSES,SUSHI,SUSUS,SUTOR,SUTRA,SUTTA,SWABS,SWACK,SWADS,SWAGE,SWAGS,SWAIL,SWAIN,SWALE,SWALY,SWAMI,SWAMP,SWAMY,SWANG,SWANK,SWANS,SWAPS,SWAPT,SWARD,SWARE,SWARF,SWARM,SWART,SWASH,SWATH,SWATS,SWAYL,SWAYS,SWEAL,SWEAR,SWEAT,SWEDE,SWEED,SWEEL,SWEEP,SWEER,SWEES,SWEET,SWEIR,SWELL,SWELT,SWEPT,SWERF,SWEYS,SWIES,SWIFT,SWIGS,SWILL,SWIMS,SWINE,SWING,SWINK,SWIPE,SWIRE,SWIRL,SWISH,SWISS,SWITH,SWITS,SWIVE,SWIZZ,SWOBS,SWOLN,SWONE,SWOON,SWOOP,SWOPS,SWOPT,SWORD,SWORE,SWORN,SWOTS,SWOUN,SWUNG,SYBBE,SYBIL,SYBOE,SYBOW,SYCEE,SYCES,SYENS,SYKER,SYKES,SYLIS,SYLPH,SYLVA,SYMAR,SYNCH,SYNCS,SYNDS,SYNED,SYNES,SYNOD,SYNTH,SYPED,SYPES,SYPHS,SYRAH,SYREN,SYRUP,SYSOP,SYTHE,SYVER,TAALS,TAATA,TABBY,TABER,TABES,TABID,TABIS,TABLA,TABLE,TABOO,TABOR,TABUN,TABUS,TACAN,TACES,TACET,TACHE,TACHO,TACHS,TACIT,TACKS,TACKY,TACOS,TACTS,TAELS,TAFFY,TAFIA,TAGGY,TAGMA,TAHAS,TAHOU,TAHRS,TAIGA,TAIGS,TAILS,TAINS,TAINT,TAIRA,TAISH,TAITS,TAJES,TAKAS,TAKEN,TAKER,TAKES,TAKHI,TAKIN,TAKIS,TALAK,TALAQ,TALAR,TALAS,TALCS,TALCY,TALEA,TALER,TALES,TALKS,TALKY,TALLS,TALLY,TALMA,TALON,TALPA,TALUK,TALUS,TAMAL,TAMED,TAMER,TAMES,TAMIN,TAMIS,TAMMY,TAMPS,TANAS,TANGA,TANGI,TANGO,TANGS,TANGY,TANHS,TANKA,TANKS,TANKY,TANNA,TANSY,TANTI,TANTO,TAPAS,TAPED,TAPEN,TAPER,TAPES,TAPET,TAPIR,TAPIS,TAPPA,TAPUS,TARAS,TARDO,TARDY,TARED,TARES,TARGE,TARNS,TAROC,TAROK,TAROS,TAROT,TARPS,TARRE,TARRY,TARSI,TARTS,TARTY,TASAR,TASER,TASKS,TASSE,TASTE,TASTY,TATAR,TATER,TATES,TATHS,TATIE,TATOU,TATTS,TATTY,TATUS,TAUBE,TAULD,TAUNT,TAUON,TAUPE,TAUTS,TAVAH,TAVAS,TAVER,TAWAI,TAWAS,TAWED,TAWER,TAWIE,TAWNY,TAWSE,TAWTS,TAXED,TAXER,TAXES,TAXIS,TAXOL,TAXON,TAXOR,TAXUS,TAYRA,TAZZA,TAZZE,TEACH,TEADE,TEADS,TEAED,TEAKS,TEALS,TEAMS,TEARS,TEARY,TEASE,TEATS,TEAZE,TECHS,TECHY,TECTA,TEDDY,TEELS,TEEMS,TEEND,TEENE,TEENS,TEENY,TEERS,TEETH,TEFFS,TEGGS,TEGUA,TEGUS,TEHRS,TEIID,TEILS,TEIND,TELAE,TELCO,TELES,TELEX,TELIA,TELIC,TELLS,TELLY,TELOI,TELOS,TEMED,TEMES,TEMPI,TEMPO,TEMPS,TEMPT,TEMSE,TENCH,TENDS,TENDU,TENES,TENET,TENGE,TENIA,TENNE,TENNO,TENNY,TENON,TENOR,TENSE,TENTH,TENTS,TENTY,TENUE,TEPAL,TEPAS,TEPEE,TEPID,TEPOY,TERAI,TERAS,TERCE,TEREK,TERES,TERFE,TERFS,TERGA,TERMS,TERNE,TERNS,TERRA,TERRY,TERSE,TERTS,TESLA,TESTA,TESTE,TESTS,TESTY,TETES,TETHS,TETRA,TETRI,TEUCH,TEUGH,TEWED,TEWEL,TEWIT,TEXAS,TEXES,TEXTS,THACK,THAGI,THAIM,THALI,THANA,THANE,THANK,THANS,THARM,THARS,THAWS,THAWY,THEBE,THECA,THEED,THEEK,THEES,THEFT,THEGN,THEIC,THEIN,THEIR,THELF,THEMA,THEME,THENS,THEOW,THERE,THERM,THESE,THESP,THETA,THETE,THEWS,THEWY,THICK,THIEF,THIGH,THIGS,THILK,THILL,THINE,THING,THINK,THINS,THIOL,THIRD,THIRL,THOFT,THOLE,THOLI,THONG,THORN,THORO,THORP,THOSE,THOUS,THOWL,THRAE,THRAW,THREE,THREW,THRID,THRIP,THROB,THROE,THROW,THRUM,THUDS,THUGS,THUJA,THUMB,THUMP,THUNK,THURL,THUYA,THYME,THYMI,THYMY,TIARA,TIARS,TIBIA,TICAL,TICCA,TICED,TICES,TICHY,TICKS,TICKY,TIDAL,TIDDY,TIDED,TIDES,TIERS,TIFFS,TIFTS,TIGER,TIGES,TIGHT,TIGON,TIKAS,TIKES,TIKIS,TIKKA,TILAK,TILDE,TILED,TILER,TILES,TILLS,TILLY,TILTH,TILTS,TIMBO,TIMED,TIMER,TIMES,TIMID,TIMON,TIMPS,TINCT,TINDS,TINEA,TINED,TINES,TINGE,TINGS,TINKS,TINNY,TINTS,TINTY,TIPIS,TIPPY,TIPSY,TIRED,TIRES,TIRLS,TIROS,TIRRS,TITAN,TITCH,TITER,TITHE,TITIS,TITLE,TITRE,TITTY,TITUP,TIZZY,TOADS,TOADY,TOAST,TOAZE,TOCKS,TOCKY,TOCOS,TODAY,TODDE,TODDY,TOEAS,TOFFS,TOFFY,TOFTS,TOFUS,TOGAE,TOGAS,TOGED,TOGES,TOGUE,TOHOS,TOILE,TOILS,TOING,TOISE,TOITS,TOKAY,TOKED,TOKEN,TOKER,TOKES,TOKOS,TOLAN,TOLAR,TOLAS,TOLED,TOLES,TOLLS,TOLLY,TOLTS,TOLUS,TOLYL,TOMAN,TOMBS,TOMES,TOMIA,TOMMY,TOMOS,TONAL,TONDI,TONDO,TONED,TONER,TONES,TONEY,TONGA,TONGS,TONIC,TONKA,TONKS,TONNE,TONUS,TOOLS,TOOMS,TOONS,TOOTH,TOOTS,TOPAZ,TOPED,TOPEE,TOPEK,TOPER,TOPES,TOPHE,TOPHI,TOPHS,TOPIC,TOPIS,TOPOI,TOPOS,TOQUE,TORAH,TORAN,TORAS,TORCH,TORCS,TORES,TORIC,TORII,TOROS,TOROT,TORRS,TORSE,TORSI,TORSK,TORSO,TORTA,TORTE,TORTS,TORUS,TOSAS,TOSED,TOSES,TOSHY,TOSSY,TOTAL,TOTED,TOTEM,TOTER,TOTES,TOTTY,TOUCH,TOUGH,TOUKS,TOUNS,TOURS,TOUSE,TOUSY,TOUTS,TOUZE,TOUZY,TOWED,TOWEL,TOWER,TOWIE,TOWNS,TOWNY,TOWSE,TOWSY,TOWTS,TOWZE,TOWZY,TOXIC,TOXIN,TOYED,TOYER,TOYON,TOYOS,TOZED,TOZES,TOZIE,TRABS,TRACE,TRACK,TRACT,TRADE,TRADS,TRAGI,TRAIK,TRAIL,TRAIN,TRAIT,TRAMP,TRAMS,TRANK,TRANQ,TRANS,TRANT,TRAPE,TRAPS,TRAPT,TRASH,TRASS,TRATS,TRATT,TRAVE,TRAWL,TRAYS,TREAD,TREAT,TRECK,TREED,TREEN,TREES,TREFA,TREIF,TREKS,TREMA,TREND,TRESS,TREST,TRETS,TREWS,TREYS,TRIAC,TRIAD,TRIAL,TRIBE,TRICE,TRICK,TRIDE,TRIED,TRIER,TRIES,TRIFF,TRIGO,TRIGS,TRIKE,TRILD,TRILL,TRIMS,TRINE,TRINS,TRIOL,TRIOR,TRIOS,TRIPE,TRIPS,TRIPY,TRIST,TRITE,TROAD,TROAK,TROAT,TROCK,TRODE,TRODS,TROGS,TROIS,TROKE,TROLL,TROMP,TRONA,TRONC,TRONE,TRONK,TRONS,TROOP,TROOZ,TROPE,TROTH,TROTS,TROUT,TROVE,TROWS,TROYS,TRUCE,TRUCK,TRUED,TRUER,TRUES,TRUGO,TRUGS,TRULL,TRULY,TRUMP,TRUNK,TRUSS,TRUST,TRUTH,TRYER,TRYKE,TRYMA,TRYPS,TRYST,TSADE,TSADI,TSARS,TSKED,TSUBA,TUANS,TUART,TUATH,TUBAE,TUBAL,TUBAR,TUBAS,TUBBY,TUBED,TUBER,TUBES,TUCKS,TUFAS,TUFFE,TUFFS,TUFTS,TUFTY,TUGRA,TUINA,TUISM,TUKTU,TULES,TULIP,TULLE,TULPA,TUMID,TUMMY,TUMOR,TUMPS,TUMPY,TUNAS,TUNDS,TUNED,TUNER,TUNES,TUNGS,TUNIC,TUNNY,TUPEK,TUPIK,TUPLE,TUQUE,TURBO,TURDS,TURFS,TURFY,TURKS,TURME,TURMS,TURNS,TURPS,TUSHY,TUSKS,TUSKY,TUTEE,TUTOR,TUTTI,TUTTY,TUTUS,TUXES,TUYER,TWAES,TWAIN,TWALS,TWANG,TWANK,TWATS,TWAYS,TWEAK,TWEED,TWEEL,TWEEN,TWEER,TWEET,TWERP,TWICE,TWIER,TWIGS,TWILL,TWILT,TWINE,TWINK,TWINS,TWINY,TWIRE,TWIRL,TWIRP,TWIST,TWITE,TWITS,TWIXT,TWOER,TWYER,TYEES,TYERS,TYING,TYIYN,TYKES,TYLER,TYMPS,TYNDE,TYNED,TYNES,TYPAL,TYPED,TYPES,TYPEY,TYPIC,TYPOS,TYPPS,TYPTO,TYRAN,TYRED,TYRES,TYROS,TYTHE,TZARS,UDALS,UDDER,UDONS,UGALI,UGGED,UHLAN,UHURU,UKASE,ULAMA,ULANS,ULCER,ULEMA,ULMIN,ULNAD,ULNAE,ULNAR,ULNAS,ULPAN,ULTRA,ULVAS,ULYIE,ULZIE,UMAMI,UMBEL,UMBER,UMBLE,UMBOS,UMBRA,UMBRE,UMIAC,UMIAK,UMIAQ,UMPED,UMPIE,UMPTY,UNAIS,UNAPT,UNARM,UNARY,UNAUS,UNBAG,UNBAN,UNBAR,UNBED,UNBID,UNBOX,UNCAP,UNCES,UNCIA,UNCLE,UNCOS,UNCOY,UNCUS,UNCUT,UNDAM,UNDEE,UNDER,UNDID,UNDUE,UNDUG,UNETH,UNFED,UNFIT,UNFIX,UNGAG,UNGET,UNGOD,UNGOT,UNGUM,UNHAT,UNHIP,UNIFY,UNION,UNITE,UNITS,UNITY,UNJAM,UNKED,UNKET,UNKID,UNLAW,UNLAY,UNLED,UNLET,UNLID,UNLIT,UNMAN,UNMET,UNMEW,UNMIX,UNPAY,UNPEG,UNPEN,UNPIN,UNRED,UNRID,UNRIG,UNRIP,UNSAY,UNSET,UNSEW,UNSEX,UNSOD,UNTAX,UNTIE,UNTIL,UNTIN,UNWED,UNWET,UNWIT,UNWON,UNZIP,UPBOW,UPBYE,UPDOS,UPDRY,UPEND,UPJET,UPLAY,UPLED,UPLIT,UPPED,UPPER,UPRAN,UPRUN,UPSEE,UPSET,UPSEY,UPTAK,UPTER,UPTIE,URAEI,URALI,URAOS,URARE,URARI,URASE,URATE,URBAN,URBIA,URDEE,UREAL,UREAS,UREDO,UREIC,URENA,URENT,URGED,URGER,URGES,URIAL,URINE,URITE,URMAN,URNAL,URNED,URPED,URSAE,URSID,URSON,URUBU,URVAS,USAGE,USERS,USHER,USING,USNEA,USQUE,USUAL,USURE,USURP,USURY,UTERI,UTILE,UTTER,UVEAL,UVEAS,UVULA,VACUA,VADED,VADES,VAGAL,VAGUE,VAGUS,VAILS,VAIRE,VAIRS,VAIRY,VAKIL,VALES,VALET,VALID,VALIS,VALOR,VALSE,VALUE,VALVE,VAMPS,VAMPY,VANDA,VANED,VANES,VANGS,VANTS,VAPID,VAPOR,VARAN,VARAS,VARDY,VAREC,VARES,VARIA,VARIX,VARNA,VARUS,VARVE,VASAL,VASES,VASTS,VASTY,VATIC,VATUS,VAUCH,VAULT,VAUNT,VAUTE,VAUTS,VAWTE,VEALE,VEALS,VEALY,VEENA,VEEPS,VEERS,VEERY,VEGAN,VEGAS,VEGES,VEGIE,VEGOS,VEHME,VEILS,VEILY,VEINS,VEINY,VELAR,VELDS,VELDT,VELES,VELLS,VELUM,VENAE,VENAL,VENDS,VENEY,VENGE,VENIN,VENOM,VENTS,VENUE,VENUS,VERBS,VERGE,VERRA,VERRY,VERSE,VERSO,VERST,VERTS,VERTU,VERVE,VESPA,VESTA,VESTS,VETCH,VEXED,VEXER,VEXES,VEXIL,VEZIR,VIALS,VIAND,VIBES,VIBEX,VIBEY,VICAR,VICED,VICES,VICHY,VIDEO,VIERS,VIEWS,VIEWY,VIFDA,VIGAS,VIGIA,VIGIL,VIGOR,VILDE,VILER,VILLA,VILLI,VILLS,VIMEN,VINAL,VINAS,VINCA,VINED,VINER,VINES,VINEW,VINIC,VINOS,VINTS,VINYL,VIOLA,VIOLD,VIOLS,VIPER,VIRAL,VIRED,VIREO,VIRES,VIRGA,VIRGE,VIRID,VIRLS,VIRTU,VIRUS,VISAS,VISED,VISES,VISIE,VISIT,VISNE,VISON,VISOR,VISTA,VISTO,VITAE,VITAL,VITAS,VITEX,VITTA,VIVAS,VIVAT,VIVDA,VIVER,VIVES,VIVID,VIXEN,VIZIR,VIZOR,VLEIS,VLIES,VOARS,VOCAB,VOCAL,VOCES,VODKA,VODOU,VODUN,VOEMA,VOGIE,VOGUE,VOICE,VOIDS,VOILA,VOILE,VOLAE,VOLAR,VOLED,VOLES,VOLET,VOLKS,VOLTA,VOLTE,VOLTI,VOLTS,VOLVA,VOLVE,VOMER,VOMIT,VOTED,VOTER,VOTES,VOUCH,VOUGE,VOULU,VOWED,VOWEL,VOWER,VOXEL,VOZHD,VRAIC,VRILS,VROOM,VROUS,VROUW,VROWS,VUGGS,VUGGY,VUGHS,VUGHY,VULGO,VULNS,VULVA,VUTTY,VYING,WAACS,WACKE,WACKO,WACKS,WACKY,WADDS,WADDY,WADED,WADER,WADES,WADIS,WADTS,WAFER,WAFFS,WAFTS,WAGED,WAGER,WAGES,WAGGA,WAGON,WAHOO,WAIDE,WAIFS,WAIFT,WAILS,WAINS,WAIRS,WAIST,WAITE,WAITS,WAIVE,WAKAS,WAKED,WAKEN,WAKER,WAKES,WAKFS,WALDO,WALDS,WALED,WALER,WALES,WALIS,WALKS,WALLA,WALLS,WALLY,WALTY,WALTZ,WAMED,WAMES,WAMUS,WANDS,WANED,WANES,WANEY,WANGS,WANKS,WANKY,WANLE,WANLY,WANNA,WANTS,WANTY,WANZE,WAQFS,WARBS,WARBY,WARDS,WARED,WARES,WAREZ,WARKS,WARMS,WARNS,WARPS,WARRE,WARST,WARTS,WARTY,WASES,WASHY,WASMS,WASPS,WASPY,WASTE,WASTS,WATAP,WATCH,WATER,WATTS,WAUFF,WAUGH,WAUKS,WAULK,WAULS,WAURS,WAVED,WAVER,WAVES,WAVEY,WAWAS,WAWES,WAWLS,WAXED,WAXEN,WAXER,WAXES,WAYED,WAZIR,WAZOO,WEALD,WEALS,WEAMB,WEANS,WEARS,WEARY,WEAVE,WEBBY,WEBER,WECHT,WEDEL,WEDGE,WEDGY,WEEDS,WEEDY,WEEKE,WEEKS,WEELS,WEEMS,WEENS,WEENY,WEEPS,WEEPY,WEEST,WEETE,WEETS,WEFTE,WEFTS,WEIDS,WEIGH,WEILS,WEIRD,WEIRS,WEISE,WEIZE,WEKAS,WELCH,WELDS,WELKE,WELKS,WELKT,WELLS,WELLY,WELSH,WELTS,WEMBS,WENCH,WENDS,WENGE,WENNY,WENTS,WEROS,WERSH,WESTS,WETAS,WETLY,WEXED,WEXES,WHACK,WHALE,WHAMO,WHAMS,WHANG,WHAPS,WHARE,WHARF,WHATA,WHATS,WHAUP,WHAUR,WHEAL,WHEAR,WHEAT,WHEEL,WHEEN,WHEEP,WHEFT,WHELK,WHELM,WHELP,WHENS,WHERE,WHETS,WHEWS,WHEYS,WHICH,WHIDS,WHIFF,WHIFT,WHIGS,WHILE,WHILK,WHIMS,WHINE,WHINS,WHINY,WHIPS,WHIPT,WHIRL,WHIRR,WHIRS,WHISH,WHISK,WHISS,WHIST,WHITE,WHITS,WHITY,WHIZZ,WHOLE,WHOMP,WHOOF,WHOOP,WHOOT,WHOPS,WHORE,WHORL,WHORT,WHOSE,WHOSO,WHUMP,WHUPS,WICCA,WICKS,WICKY,WIDDY,WIDEN,WIDER,WIDES,WIDOW,WIDTH,WIELD,WIELS,WIFED,WIFES,WIFEY,WIFIE,WIFTY,WIGAN,WIGGA,WIGGY,WIGHT,WILCO,WILDS,WILED,WILES,WILGA,WILIS,WILJA,WILLS,WILLY,WILTS,WIMPS,WIMPY,WINCE,WINCH,WINDS,WINDY,WINED,WINES,WINEY,WINGE,WINGS,WINGY,WINKS,WINNA,WINNS,WINOS,WINZE,WIPED,WIPER,WIPES,WIRED,WIRER,WIRES,WIRRA,WISED,WISER,WISES,WISHA,WISHT,WISPS,WISPY,WISTS,WITAN,WITCH,WITED,WITES,WITHE,WITHS,WITHY,WITTY,WIVED,WIVER,WIVES,WIZEN,WIZES,WOADS,WOALD,WOCKS,WODGE,WOFUL,WOKEN,WOKKA,WOLDS,WOLFS,WOLLY,WOLVE,WOMAN,WOMBS,WOMBY,WOMEN,WOMYN,WONGA,WONGI,WONKS,WONKY,WONTS,WOODS,WOODY,WOOED,WOOER,WOOFS,WOOFY,WOOLD,WOOLS,WOOLY,WOONS,WOOPS,WOOSE,WOOSH,WOOTZ,WOOZY,WORDS,WORDY,WORKS,WORLD,WORMS,WORMY,WORRY,WORSE,WORST,WORTH,WORTS,WOULD,WOUND,WOVEN,WOWED,WOWEE,WOXEN,WRACK,WRANG,WRAPS,WRAPT,WRAST,WRATE,WRATH,WRAWL,WREAK,WRECK,WRENS,WREST,WRICK,WRIED,WRIER,WRIES,WRING,WRIST,WRITE,WRITS,WROKE,WRONG,WROOT,WROTE,WROTH,WRUNG,WRYER,WRYLY,WUDUS,WULLS,WURST,WUSES,WUSHU,WUSSY,WUXIA,WYLED,WYLES,WYNDS,WYNNS,WYTED,WYTES,XEBEC,XENIA,XENIC,XENON,XERIC,XEROX,XERUS,XOANA,XYLAN,XYLEM,XYLIC,XYLOL,XYLYL,XYSTI,XYSTS,YAARS,YABBA,YABBY,YACCA,YACHT,YACKA,YACKS,YAFFS,YAGER,YAGIS,YAHOO,YAIRD,YAKKA,YAKOW,YALES,YAMEN,YAMPY,YAMUN,YANGS,YANKS,YAPOK,YAPON,YAPPS,YAPPY,YARCO,YARDS,YARER,YARFA,YARKS,YARNS,YARRS,YARTA,YARTO,YATES,YAUDS,YAULD,YAUPS,YAWED,YAWEY,YAWLS,YAWNS,YAWNY,YAWPS,YBORE,YCLAD,YCLED,YCOND,YDRAD,YDRED,YEADS,YEAHS,YEALM,YEANS,YEARD,YEARN,YEARS,YEAST,YECCH,YECHS,YECHY,YEDES,YEEDS,YEGGS,YELKS,YELLS,YELMS,YELPS,YELTS,YENTA,YENTE,YERBA,YERDS,YERKS,YESES,YESKS,YESTS,YESTY,YETIS,YETTS,YEUKS,YEUKY,YEVEN,YEVES,YEWEN,YEXED,YEXES,YFERE,YIELD,YIKED,YIKES,YILLS,YINCE,YIPES,YIPPY,YIRDS,YIRKS,YIRRS,YIRTH,YITES,YITIE,YLEMS,YLIKE,YLKES,YMOLT,YMPES,YOBBO,YOCKS,YODEL,YODHS,YODLE,YOGAS,YOGEE,YOGHS,YOGIC,YOGIN,YOGIS,YOICK,YOJAN,YOKED,YOKEL,YOKER,YOKES,YOKUL,YOLKS,YOLKY,YOMIM,YOMPS,YONIC,YONIS,YONKS,YOOFS,YOOPS,YORES,YORKS,YORPS,YOUKS,YOUNG,YOURN,YOURS,YOURT,YOUSE,YOUTH,YOWED,YOWES,YOWIE,YOWLS,YRAPT,YRENT,YRIVD,YRNEH,YSAME,YTOST,YUANS,YUCAS,YUCCA,YUCCH,YUCKO,YUCKS,YUCKY,YUFTS,YUGAS,YUKED,YUKES,YUKKY,YUKOS,YULAN,YULES,YUMMO,YUMMY,YUMPS,YUPON,YUPPY,YURTA,YURTS,YUZUS,ZABRA,ZACKS,ZAIRE,ZAKAT,ZAMAN,ZAMBO,ZAMIA,ZANJA,ZANTE,ZANZA,ZANZE,ZAPPY,ZARFS,ZATIS,ZAXES,ZAYIN,ZAZEN,ZEALS,ZEBEC,ZEBRA,ZEBUB,ZEBUS,ZEINS,ZERDA,ZERKS,ZEROS,ZESTS,ZESTY,ZETAS,ZEXES,ZEZES,ZHOMO,ZIBET,ZIFFS,ZIGAN,ZILAS,ZILCH,ZILLA,ZILLS,ZIMBI,ZIMBS,ZINCO,ZINCS,ZINCY,ZINEB,ZINES,ZINGS,ZINGY,ZINKE,ZINKY,ZIPPO,ZIPPY,ZIRAM,ZITIS,ZIZEL,ZIZIT,ZLOTE,ZLOTY,ZOAEA,ZOBOS,ZOBUS,ZOCCO,ZOEAE,ZOEAL,ZOEAS,ZOISM,ZOIST,ZOMBI,ZONAE,ZONAL,ZONDA,ZONED,ZONER,ZONES,ZONKS,ZOOEA,ZOOEY,ZOOID,ZOOKS,ZOOMS,ZOONS,ZOOTY,ZOPPA,ZOPPO,ZORIL,ZORIS,ZORRO,ZOUKS,ZOWIE,ZULUS,ZUPAN,ZUPAS,ZURFS,ZUZIM,ZYGAL,ZYGON,ZYMES,ZYMIC".Split(','));
    private static readonly int[][] _maritimeFlagsLetterColors = newArray(new[] { 0, 1 }, new[] { 2 }, new[] { 1, 0, 2 }, new[] { 3, 1 }, new[] { 1, 2 }, new[] { 0, 2 }, new[] { 3, 1 }, new[] { 0, 2 }, new[] { 3, 4 }, new[] { 0, 1 }, new[] { 3, 1 }, new[] { 4, 3 }, new[] { 1, 0 }, new[] { 0, 1 }, new[] { 3, 2 }, new[] { 1, 0 }, new[] { 3 }, new[] { 2, 3 }, new[] { 0, 1 }, new[] { 2, 0, 1 }, new[] { 0, 2 }, new[] { 0, 2 }, new[] { 1, 0, 2 }, new[] { 0, 1 }, new[] { 3, 2 }, new[] { 3, 2, 4, 1 });
    private static readonly string[] _morseLetterGroups = "IUSFVH,ARWLPJ,NKDBXCY,MGOZQ".Split(',');
    sealed class GroupInfo<T> { public string Key; public T[] Items; public string Logging; }
    private static readonly GroupInfo<char>[] _semaphoreGroups = @"SW=AHIKLMN;S=ABCDEFG;W=BHOPQRS;NW=CIOTUY;N=DJKPTV;NE=ELQUWX;E=FJMRWYZ;SE=GNSVXZ".Split(';').Select(str => str.Split('=')).Select(arr => new GroupInfo<char> { Key = arr[0], Items = arr[1].ToCharArray() }).ToArray();
    private static readonly string[] _pigpenGroups = @"JKLMNOPQRWXYZ,ABCDEFGHISTUV".Split(',');
    private static readonly string[][] _periodicTable = @"H,,,,,,,,,,,,,,,,,He;Li,Be,,,,,,,,,,,B,C,N,O,F,Ne;Na,Mg,,,,,,,,,,,Al,Si,P,S,Cl,Ar;K,Ca,Sc,Ti,V,Cr,Mn,Fe,Co,Ni,Cu,Zn,Ga,Ge,As,Se,Br,Kr;Rb,Sr,Y,Zr,Nb,Mo,Tc,Ru,Rh,Pd,Ag,Cd,In,Sn,Sb,Te,I,Xe;Cs,Ba,La,Hf,Ta,W,Re,Os,Ir,Pt,Au,Hg,Tl,Pb,Bi,Po,At,Rn;Fr,Ra,Ac,Rf,Db,Sg,Bh,Hs,Mt,Ds,Rg,Cn,Nh,Fl,Mc,Lv,Ts,Og".Split(';').Select(row => row.Split(',')).ToArray();
    private static readonly string[] _periodicTableExtra = @"Ce,Pr,Nd,Pm,Sm,Eu,Gd,Tb,Dy,Ho,Er,Tm,Yb,Lu,Th,Pa,U,Np,Pu,Am,Cm,Bk,Cf,Es,Fm,Md,No,Lr".Split(',');
    private static readonly string[] _usStateAbbrevs = @"AK;AL;AR;AZ;CA;CO;CT;DE;FL;GA;HI;IA;ID;IL;IN;KS;KY;LA;MA;MD;ME;MI;MN;MO;MS;MT;NC;ND;NE;NH;NJ;NM;NV;NY;OH;OK;OR;PA;RI;SC;SD;TN;TX;UT;VA;VT;WA;WI;WV;WY".Split(';');
    private static readonly string[] _countryCodes = @"DZA;AUS;AUT;BEL;BRA;CAN;CHL;CHN;COL;CUB;CZE;DNK;FIN;FRA;DEU;GRL;ISL;IND;JPN;MEX;MAR;NLD;NZL;NOR;PAN;PER;POL;WSM;SEN;KOR;ESP;SDN;SWE;THA;GBR;USA".Split(';');
    private static readonly string[] _currencyCodes = @"AUD;BGN;BRL;CAD;CHF;CLP;CNY;COP;CUP;CZK;DKK;DZD;EUR;GBP;HKD;HRK;HUF;IDR;ILS;INR;ISK;JPY;KRW;MAD;MXN;MYR;NOK;NZD;PAB;PEN;PHP;PLN;RON;RUB;SDG;SEK;SGD;THB;TRY;USD;WST;XOF;ZAR".Split(';');
    private static readonly Dictionary<char, string> _morseCode = new Dictionary<char, string> { { 'A', "   # ###" }, { 'B', "   ### # # #" }, { 'C', "   ### # ### #" }, { 'D', "   ### # #" }, { 'E', "   #" }, { 'F', "   # # ### #" }, { 'G', "   ### ### #" }, { 'H', "   # # # #" }, { 'I', "   # #" }, { 'J', "   # ### ### ###" }, { 'K', "   ### # ###" }, { 'L', "   # ### # #" }, { 'M', "   ### ###" }, { 'N', "   ### #" }, { 'O', "   ### ### ###" }, { 'P', "   # ### ### #" }, { 'Q', "   ### ### # ###" }, { 'R', "   # ### #" }, { 'S', "   # # #" }, { 'T', "   ###" }, { 'U', "   # # ###" }, { 'V', "   # # # ###" }, { 'W', "   # ### ###" }, { 'X', "   ### # # ###" }, { 'Y', "   ### # ### ###" }, { 'Z', "   ### ### # #" }, { '1', "   # ### ### ### ###" }, { '2', "   # # ### ### ###" }, { '3', "   # # # ### ###" }, { '4', "   # # # # ###" }, { '5', "   # # # # #" }, { '6', "   ### # # # #" }, { '7', "   ### ### # # #" }, { '8', "   ### ### ### # #" }, { '9', "   ### ### ### ### #" }, { '0', "   ### ### ### ### ###" } };
    private static readonly int[] _semaphoreLeftFlagOrientations = new[] { 135, 90, 45, 0, 180, 180, 180, 90, 135, 0, 135, 135, 135, 135, 90, 90, 90, 90, 90, 45, 45, 0, -45, -45, 45, 225 };
    private static readonly int[] _semaphoreRightFlagOrientations = new[] { -180, -180, -180, -180, -45, -90, -135, -225, 45, -90, 0, -45, -90, -135, 45, 0, -45, -90, -135, 0, -45, -135, -90, -135, -90, -90 };
    private static readonly string[] _colorNames = new[] { "Swamp", "Navy", "Denim", "Lawn", "Teal", "Azure", "Harlequin", "Spring", "Aqua", "Maroon", "Eggplant", "Violet", "Olive", "Boulder", "Periwinkle", "Chartreuse", "Mint", "Turquoise", "Scarlet", "Rose", "Fuchsia", "Carrot", "Salmon", "Heliotrope", "Lemon", "Dolly", "Ceramic" };
    private static readonly string[] _countryNames = @"Afghanistan;Albania;Algeria;Andorra;Angola;Antigua and Barbuda;Argentina;Armenia;Australia;Austria;Azerbaijan;Bahamas;Bangladesh;Barbados;Belarus;Belgium;Belize;Benin;Bhutan;Bolivia;Bosnia and Herzegovina;Botswana;Brazil;Brunei;Bulgaria;Burkina Faso;Burundi;Cabo Verde;Cambodia;Cameroon;Canada;Central African Republic;Chad;Chile;China;Colombia;Comoros;Republic of the Congo;Costa Rica;Côte d’Ivoire;Croatia;Cuba;Cyprus;Czech Republic;North Korea;Democratic Republic of the Congo;Denmark;Djibouti;Dominica;Dominican Republic;Ecuador;Egypt;El Salvador;Equatorial Guinea;Eritrea;Estonia;Eswatini;Ethiopia;Fiji;Finland;France;Gabon;The Gambia;Georgia;Germany;Ghana;Greece;Grenada;Guatemala;Guinea;Guinea-Bissau;Guyana;Haiti;Honduras;Hungary;Iceland;India;Iran;Iraq;Ireland;Israel;Italy;Jamaica;Japan;Jordan;Kazakhstan;Kenya;Kiribati;Kuwait;Kyrgyzstan;Laos;Latvia;Lebanon;Lesotho;Liberia;Libya;Liechtenstein;Lithuania;Luxembourg;Madagascar;Malawi;Malaysia;Maldives;Mali;Malta;Marshall Islands;Mauritania;Mauritius;Mexico;Federated States of Micronesia;Mongolia;Montenegro;Morocco;Mozambique;Myanmar;Namibia;Nauru;Nepal;Netherlands;New Zealand;Nicaragua;Niger;Nigeria;North Macedonia;Norway;Oman;Pakistan;Palau;Panama;Papua New Guinea;Paraguay;Peru;Philippines;Poland;Portugal;South Korea;Moldova;Romania;Russia;Rwanda;Saint Kitts and Nevis;Saint Lucia;Saint Vincent and the Grenadines;Samoa;San Marino;São Tomé and Príncipe;Saudi Arabia;Senegal;Serbia;Seychelles;Sierra Leone;Singapore;Slovakia;Slovenia;Solomon Islands;Somalia;South Africa;South Sudan;Spain;Sri Lanka;Sudan;Suriname;Sweden;Switzerland;Syria;Tajikistan;Thailand;Timor-Leste;Togo;Tonga;Trinidad and Tobago;Tunisia;Turkey;Turkmenistan;Tuvalu;Uganda;Ukraine;United Arab Emirates;United Kingdom;Tanzania;United States;Uruguay;Uzbekistan;Vanuatu;Venezuela;Vietnam;Yemen;Zambia;Zimbabwe".Split(';');
    private static readonly GroupInfo<string>[][] _countryNameGroups;
    private static readonly string[][] _noteNames = @"C,C♯/D♭,D,D♯/E♭,E,F,F♯/G♭,G,G♯/A♭,A,A♯/B♭,B".Split(',').Select(str => str.Split('/')).ToArray();
    private static readonly string[] _companyCodes = @"ADM;CNA;GSK;HSB;IMB;MKS;NXT;QLT;RMG;SVT;TUI;VOD".Split(';');
    private static readonly string[] _morseWarCodes = @"ABR;RBS;SVR;ZUX;ZAQ;MOI;OPA;VZQ;XRP;OLL;AIR;RHG;MJN;VTT;XZS;SUN".Split(';');

    private static readonly string[] _wordsModules = "Password,Extended Password,Poetry,Tap Code,Braille,Word Search,Anagrams,Word Scramble".Split(',');
    private static readonly string[][] _words = newArray(
        // Password
        "about;after;again;below;could;every;first;found;great;house;large;learn;never;other;place;plant;point;right;small;sound;spell;still;study;their;there;these;thing;think;three;water;where;which;world;would;write".Split(';'),
        // Extended Password
        "adjust;anchor;bowtie;button;cipher;corner;dampen;demote;enlist;evolve;forget;finish;geyser;global;hammer;helium;ignite;indigo;jigsaw;juliet;karate;keypad;lambda;listen;matter;memory;nebula;nickel;overdo;oxygen;peanut;photon;quartz;quebec;resist;riddle;sierra;strike;teapot;twenty;untold;ultima;victor;violet;wither;wrench;xenons;xylose;yellow;yogurt;zenith;zodiac".Split(';'),
        // Poetry
        "clarity;energy;flow;sunshine;crowd;fatigue;ocean;heart;relax;hollow;reflection;weather;dance;bunny;identity;words;weightless;lovely;black;past;morality;romance;cookies;solitary;gaze;future;compassion".Split(';'),
        // Tap Code
        "child;style;shake;alive;axion;wreck;cause;pupil;cheat;watch;jelly;clock;quark;grass;laser;jeans;yacht;rumor;fault;hover;sheet;aware;shell;jolly;giant;vague;image;acute;arena;visit;table;force;chair;quick;suite;large;chord;power;aloof;attic;cover;prize;trail;cycle;sight;zeros;glare;angle;ranch;upset;mixer;drive;xenon;water;venom;right;sweet;gloom;clash;abbey;level;quilt;climb;tease;knock;fairy;queen;zebra;guide;south;funny;proud;young;jumpy;staff;query;trunk;zooms;smart;ghost;judge;yield;brain;helix;small;noise;seize;robot;stain;where;world;shark;beard;disco;yummy;title;story;color;short;fresh".Split(';'),
        // Braille
        "acting;dating;heading;meaning;server;aiming;dealer;hearing;miners;shaking;artist;eating;heating;nearer;sought;asking;eighth;higher;parish;staying;bearing;farmer;insist;parker;strands;beating;farming;lasted;parking;strings;beings;faster;laying;paying;teaching;binding;father;leader;powers;tended;bought;finding;leading;pushed;tender;boxing;finest;leaned;pushing;testing;breach;finish;leaning;rather;throwing;breast;flying;leaving;reaching;towers;breath;foster;linking;reader;vested;breathe;fought;listed;reading;warned;bringing;gaining;listen;resting;warning;brings;gather;living;riding;weaker;carers;gazing;making;rushed;wealth;carter;gender;marked;rushing;winner;charter;growing;marking;saying;winning;crying;headed;master;served;winter".Split(';'),
        // Word Search
        "alarm;beep;blue;call;check;color;done;east;echo;edge;expert;false;find;four;green;jinx;letter;listen;locate;look;next;north;office;oscar;quebec;red;serial;six;solve;spell;submit;tango;timer;twenty;unique;word;xray;yes".Split(';'),
        // Anagrams
        "stream;master;tamers;looped;poodle;pooled;cellar;caller;recall;seated;sedate;teased;rescue;secure;recuse;rashes;shears;shares;barely;barley;bleary;duster;rusted;rudest".Split(';'),
        // Word Scramble
        "archer;attack;banana;blasts;bursts;button;cannon;casing;charge;damage;defuse;device;disarm;flames;kaboom;kevlar;keypad;letter;module;mortar;napalm;ottawa;person;robots;rocket;sapper;semtex;weapon;widget;wiring".Split(';'));

    private static readonly string[] _namesModules = "Human Resources,Ice Cream,Identity Parade,Mafia,Retirement,Schlag den Bomb,Subways".Split(',');
    private static readonly string[][] _names = newArray(
        // Human Resources
        "Rebecca;Damian;Jean;Mike;River;Samuel;Yoshi;Caleb;Ashley;Tim;Eliott;Ursula;Silas;Noah;Quinn;Dylan".Split(';'),
        // Ice Cream
        "Adam;Ashley;Bob;Cheryl;Dave;Gary;George;Jacob;Jade;Jessica;Mike;Pat;Sally;Sam;Sean;Simon;Taylor;Tim;Tom;Victor".Split(';'),
        // Identity Parade
        "Andy;Ben;Chrissie;Dylan;Eddie;Fiona;Gemma;Harriet;Ian;James;Kayleigh;Louise;Megan;Nate;Oscar;Penny;Quentin;Rhiannon".Split(';'),
        // Mafia
        "Rob;Tim;Mary;Briane;Hunter;Macy;John;Will;Lacy;Claire;Kenny;Rick;Walter;Bonnie;Luke;Bill;Sarah;Larry;Kate;Stacy;Diane;Mac;Jim;Clyde;Tommy;Lenny;Molly;Benny;Phil;Bob;Gary;Ted;Kim;Nate;Cher;Ron;Thomas;Sam;Duke;Jack;Ed;Ronny;Terry;Claira;Nick;Cob;Ash;Don;Jerry;Simon".Split(';'),
        // Retirement
        "Eliza;Marg;Ruth;Sandi;Toni;Amie;Ben;Dave;Janet;John;Kirsty;Kris;Lucy;Mark;Sal;Frank;Jane;Lydia;Mike;Pat;Skye;Toby".Split(';'),
        // Schlag den Bomb
        "Albert;Cori;Cory;Daniel;Don;Edgar;Elsa;Eris;Gale;Greg;Greta;Harry;Isolde;Julia;Julie;Lisa;Millie;Ozy;Ozzy;Paula;Peter;Rob;Ron;Spike;Tina;Tommy;Val".Split(';'),
        // Subways
        "Bryan;John;Mike;Emily;Mary;Katie".Split(';'));

    private static readonly string[] _groceryModules = "Cheap Checkout,Grocery Store".Split(',');
    private static readonly string[][] _groceryItems = newArray(
        // Cheap Checkout
        "bananas;broccoli;candy canes;canola oil;cereal;cheese;chicken;chocolate bar;chocolate milk;coffee beans;cookies;deodorant;fruit punch;grape jelly;grapefruit;gum;honey;mints;mustard;oranges;paper towels;pasta sauce;peanut butter;pork;potato chips;potatoes;shampoo;socks;soda;spaghetti;steak;sugar;tea;tissues;ketchup;lemons;lettuce;lollipops;lotion;mayonnaise;tomatoes;toothpaste;turkey;water bottles;white bread;white milk".Split(';'),
        // Grocery Store
        "apples;bananas;bottled water;bread;butter;candy;cat food;cheese;coffee;cookies;detergent;eggs;flour;glass cleaner;hot sauce;jelly;lettuce;milk;paper towels;peanut butter;pepper;pork;potatoes;salt;sausage;soda;soup;steak;sugar;toilet paper;tomatoes;toothpaste;turkey".Split(';'));

    private static readonly Dictionary<Hex, string> _zooAnimals;

    private static readonly string[] _benedictHeadings = @"Bene;Bumble;Burger;Bomba;Bunsen;Cumber;Coddle;Crumple;Cabbage".Split(';');
    private static readonly string[][] _benedictTable = @"dict,bee,king,boom,burner,batch,swort,sack,patch;dryl,boi,dil,bait,swick,thatch,cheese,horn,butt;drive,basher,coot,butt,don,snatch,clock,rash,horn;dink,bong,top,blast,snap,bund,sore,fish,man;bus,buzz,trap,stic,whale,cooch,bath,butt,sprout;juice,stick,burg,dick,rock,sniff,dinck,pants,dong;snatch,pest,boop,buck,box,stick,snoot,crush,ship;ton,blaster,dirk,blow,town,dell,sniff,mite,rash;saur,berry,bub,tonk,shack,bath,some,clomp,snutch;dang,milk,cash,ray,ster,chord,wealth,fish,flage".Split(';').Select(str => str.Split(',')).ToArray();

    private static readonly Dictionary<string, int> _countrySizes = new Dictionary<string, int> { { "Afghanistan", 667 }, { "Albania", 714 }, { "Algeria", 667 }, { "Andorra", 700 }, { "Angola", 667 }, { "Antigua and Barbuda", 667 }, { "Argentina", 643 }, { "Armenia", 500 }, { "Australia", 500 }, { "Austria", 667 }, { "Azerbaijan", 500 }, { "Bahamas", 500 }, { "Bangladesh", 600 }, { "Barbados", 667 }, { "Belarus", 500 }, { "Belgium", 667 }, { "Belize", 667 }, { "Benin", 667 }, { "Bhutan", 667 }, { "Bolivia", 682 }, { "Bosnia and Herzegovina", 500 }, { "Botswana", 667 }, { "Brazil", 700 }, { "Brunei", 500 }, { "Bulgaria", 600 }, { "Burkina Faso", 667 }, { "Burundi", 600 }, { "Cabo Verde", 588 }, { "Cambodia", 667 }, { "Cameroon", 667 }, { "Canada", 500 }, { "Central African Republic", 667 }, { "Chad", 667 }, { "Chile", 667 }, { "China", 667 }, { "Colombia", 667 }, { "Comoros", 600 }, { "Republic of the Congo", 667 }, { "Costa Rica", 600 }, { "Côte d’Ivoire", 667 }, { "Croatia", 500 }, { "Cuba", 500 }, { "Cyprus", 600 }, { "Czech Republic", 667 }, { "North Korea", 500 }, { "Democratic Republic of the Congo", 667 }, { "Denmark", 757 }, { "Djibouti", 667 }, { "Dominica", 500 }, { "Dominican Republic", 625 }, { "Ecuador", 500 }, { "Egypt", 667 }, { "El Salvador", 564 }, { "Equatorial Guinea", 667 }, { "Eritrea", 500 }, { "Estonia", 636 }, { "Eswatini", 667 }, { "Ethiopia", 500 }, { "Fiji", 500 }, { "Finland", 611 }, { "France", 667 }, { "Gabon", 750 }, { "The Gambia", 667 }, { "Georgia", 667 }, { "Germany", 600 }, { "Ghana", 667 }, { "Greece", 667 }, { "Grenada", 600 }, { "Guatemala", 625 }, { "Guinea", 667 }, { "Guinea-Bissau", 500 }, { "Guyana", 600 }, { "Haiti", 600 }, { "Honduras", 500 }, { "Hungary", 500 }, { "Iceland", 720 }, { "India", 667 }, { "Iran", 571 }, { "Iraq", 667 }, { "Ireland", 500 }, { "Israel", 727 }, { "Italy", 667 }, { "Jamaica", 500 }, { "Japan", 667 }, { "Jordan", 500 }, { "Kazakhstan", 500 }, { "Kenya", 667 }, { "Kiribati", 500 }, { "Kuwait", 500 }, { "Kyrgyzstan", 600 }, { "Laos", 667 }, { "Latvia", 500 }, { "Lebanon", 667 }, { "Lesotho", 667 }, { "Liberia", 526 }, { "Libya", 500 }, { "Liechtenstein", 600 }, { "Lithuania", 600 }, { "Luxembourg", 600 }, { "Madagascar", 667 }, { "Malawi", 667 }, { "Malaysia", 500 }, { "Maldives", 667 }, { "Mali", 667 }, { "Malta", 667 }, { "Marshall Islands", 526 }, { "Mauritania", 667 }, { "Mauritius", 667 }, { "Mexico", 571 }, { "Federated States of Micronesia", 526 }, { "Mongolia", 500 }, { "Montenegro", 500 }, { "Morocco", 667 }, { "Mozambique", 667 }, { "Myanmar", 556 }, { "Namibia", 667 }, { "Nauru", 500 }, { "Nepal", 1222 }, { "Netherlands", 667 }, { "New Zealand", 500 }, { "Nicaragua", 600 }, { "Niger", 857 }, { "Nigeria", 500 }, { "North Macedonia", 500 }, { "Norway", 727 }, { "Oman", 500 }, { "Pakistan", 667 }, { "Palau", 625 }, { "Panama", 667 }, { "Papua New Guinea", 750 }, { "Paraguay", 600 }, { "Peru", 667 }, { "Philippines", 500 }, { "Poland", 625 }, { "Portugal", 667 }, { "South Korea", 667 }, { "Moldova", 500 }, { "Romania", 667 }, { "Russia", 667 }, { "Rwanda", 667 }, { "Saint Kitts and Nevis", 667 }, { "Saint Lucia", 500 }, { "Saint Vincent and the Grenadines", 667 }, { "Samoa", 500 }, { "San Marino", 750 }, { "São Tomé and Príncipe", 500 }, { "Saudi Arabia", 667 }, { "Senegal", 667 }, { "Serbia", 667 }, { "Seychelles", 500 }, { "Sierra Leone", 667 }, { "Singapore", 667 }, { "Slovakia", 667 }, { "Slovenia", 500 }, { "Solomon Islands", 500 }, { "Somalia", 667 }, { "South Africa", 667 }, { "South Sudan", 500 }, { "Spain", 667 }, { "Sri Lanka", 500 }, { "Sudan", 500 }, { "Suriname", 667 }, { "Sweden", 625 }, { "Switzerland", 1000 }, { "Syria", 667 }, { "Tajikistan", 500 }, { "Thailand", 667 }, { "Timor-Leste", 500 }, { "Togo", 618 }, { "Tonga", 500 }, { "Trinidad and Tobago", 600 }, { "Tunisia", 667 }, { "Turkey", 667 }, { "Turkmenistan", 667 }, { "Tuvalu", 500 }, { "Uganda", 667 }, { "Ukraine", 667 }, { "United Arab Emirates", 500 }, { "United Kingdom", 500 }, { "Tanzania", 667 }, { "United States", 526 }, { "Uruguay", 667 }, { "Uzbekistan", 500 }, { "Vanuatu", 600 }, { "Venezuela", 667 }, { "Vietnam", 667 }, { "Yemen", 667 }, { "Zambia", 667 }, { "Zimbabwe", 500 } };

    private static readonly string[][] _friendshipSymbolGroups = newArray(
        new[] { "Amethyst Star", "Apple Cinnamon", "Apple Fritter", "Babs Seed", "Berryshine", "Big McIntosh", "Bulk Biceps", "Cadance", "Golden Harvest", "Celestia", "Cheerilee", "Cheese Sandwich", "Cherry Jubilee", "Coco Pommel" },
        new[] { "Vinyl Scratch", "Twist", "Twilight Velvet", "Trouble Shoes", "Trixie", "Trenderhoof", "Tree Hugger", "Toe Tapper", "Time Turner", "Thunderlane", "Sweetie Drops", "Suri Polomare", "Sunset Shimmer", "Sunburst" },
        new[] { "Coloratura", "Daisy", "Daring Do", "Derpy", "Diamond Tiara", "Double Diamond", "Filthy Rich", "Granny Smith", "Hoity Toity", "Lightning Dust", "Lily", "Luna", "Lyra", "Maud Pie" },
        new[] { "Starlight Glimmer", "Spoiled Rich", "Silverstar", "Silver Spoon", "Silver Shill", "Shining Armor", "Screwball", "Rose", "Octavia Melody", "Nurse Redheart", "Night Light", "Ms. Harshwhinny", "Moon Dancer", "Mayor Mare" });
    private static readonly string[] _friendshipSymbolGroupNames = new[] { "top row", "left column", "right column", "bottom row" };

    private static readonly string[][] _londonUndergroundStations = newArray(
        new[] { "Stonebridge Park", "Harlesden", "Willesden Junction", "Kensal Green", "Queen’s Park", "Kilburn Park", "Maida Vale", "Warwick Avenue", "Paddington", "Edgware Road", "Marylebone", "Baker Street", "Regent’s Park", "Oxford Circus", "Piccadilly Circus", "Charing Cross", "Embankment", "Waterloo", "Lambeth North", "Elephant & Castle" },
        new[] { "Hanger Lane", "Ealing Broadway", "West Acton", "North Acton", "East Acton", "White City/Wood Lane", "Shepherd’s Bush", "Holland Park", "Notting Hill Gate", "Queensway", "Lancaster Gate", "Marble Arch", "Bond Street", "Oxford Circus", "Tottenham Court Road", "Holborn", "Chancery Lane", "St. Paul’s", "Monument/Bank", "Liverpool Street", "Bethnal Green", "Mile End", "Stratford", "Leyton", "Leytonstone" },
        new[] { "Hammersmith", "Goldhawk Road", "Shepherd’s Bush Market", "White City/Wood Lane", "Latimer Road", "Ladbroke Grove", "Westbourne Park", "Royal Oak", "Paddington", "Edgware Road", "Bayswater", "Notting Hill Gate", "High Street Kensington", "Gloucester Road", "South Kensington", "Sloane Square", "Victoria", "St. James’s Park", "Westminster", "Embankment", "Temple", "Blackfriars", "Mansion House", "Cannon Street", "Monument/Bank", "Tower Hill", "Aldgate", "Liverpool Street", "Moorgate", "Barbican", "Farringdon", "King’s Cross St. Pancras", "Euston Square", "Great Portland Street", "Baker Street" },
        new[] { "Ealing Broadway", "Ealing Common", "Acton Town", "Chiswick Park", "Turnham Green", "Stamford Brook", "Ravenscourt Park", "Hammersmith", "Barons Court", "West Kensington", "Earl’s Court", "Gloucester Road", "South Kensington", "Sloane Square", "Victoria", "St. James’s Park", "Westminster", "Embankment", "Temple", "Blackfriars", "Mansion House", "Cannon Street", "Monument/Bank", "Tower Hill", "Aldgate East", "Whitechapel", "Stepney Green", "Mile End", "Bow Road", "Bromley-by-Bow", "West Ham", "Plaistow", "Upton Park", "East Ham", "High Street Kensington", "Notting Hill Gate", "Bayswater", "Paddington", "Edgware Road" },
        new[] { "Hammersmith", "Goldhawk Road", "Shepherd’s Bush Market", "White City/Wood Lane", "Latimer Road", "Ladbroke Grove", "Westbourne Park", "Royal Oak", "Paddington", "Edgware Road", "Baker Street", "Great Portland Street", "Euston Square", "King’s Cross St. Pancras", "Farringdon", "Barbican", "Moorgate", "Liverpool Street", "Aldgate East", "Whitechapel", "Stepney Green", "Mile End", "Bow Road", "Bromley-by-Bow", "West Ham", "Plaistow", "Upton Park", "East Ham" },
        new[] { "Neasden", "Dollis Hill", "Willesden Green", "Kilburn", "West Hampstead", "Finchley Road", "Swiss Cottage", "St. John’s Wood", "Baker Street", "Bond Street", "Green Park", "Westminster", "Waterloo", "Southwark", "London Bridge", "Bermondsey", "Canada Water", "Canary Wharf", "North Greenwich", "Canning Town", "West Ham", "Stratford" },
        new[] { "Wembley Park", "Finchley Road", "Baker Street", "Great Portland Street", "Euston Square", "King’s Cross St. Pancras", "Farringdon", "Barbican", "Moorgate", "Liverpool Street", "Aldgate" },
        new[] { "Clapham South", "Clapham Common", "Clapham North", "Stockwell", "Oval", "Kennington", "Waterloo", "Embankment", "Charing Cross", "Leicester Square", "Tottenham Court Road", "Goodge Street", "Warren Street", "Euston", "Mornington Crescent", "Camden Town", "Chalk Farm", "Belsize Park", "Hampstead", "Golders Green", "Brent Cross", "Hendon Central", "Elephant & Castle", "Borough", "London Bridge", "Monument/Bank", "Moorgate", "Old Street", "Angel", "King’s Cross St. Pancras", "Kentish Town", "Tufnell Park", "Archway", "Highgate", "East Finchley" },
        new[] { "Northfields", "South Ealing", "Acton Town", "Turnham Green", "Hammersmith", "Barons Court", "Earl’s Court", "Gloucester Road", "South Kensington", "Knightsbridge", "Hyde Park Corner", "Green Park", "Piccadilly Circus", "Leicester Square", "Covent Garden", "Holborn", "Russell Square", "King’s Cross St. Pancras", "Caledonian Road", "Holloway Road", "Arsenal", "Finsbury Park", "Manor House", "Turnpike Lane", "Wood Green", "Bounds Green" },
        new[] { "Brixton", "Stockwell", "Vauxhall", "Pimlico", "Victoria", "Green Park", "Oxford Circus", "Warren Street", "Euston", "King’s Cross St. Pancras", "Highbury & Islington", "Finsbury Park", "Seven Sisters", "Tottenham Hale", "Blackhorse Road", "Walthamstow Central" });
    private static readonly string[] _londonUndergroundLines = new[] { "Bakerloo Line", "Central Line", "Circle Line", "District Line", "Hammersmith & City Line", "Jubilee Line", "Metropolitan Line", "Northern Line", "Piccadilly Line", "Victoria Line" };

    private static readonly string[][] _simonSpeaksWords = @"black,sort,zwart,nigra,musta,noir,schwarz,fekete,nero;blue,blå,blauw,blua,sininen,bleu,blau,kék,blu;green,grøn,groen,verda,vihreä,vert,grün,zöld,verde;cyan,turkis,turkoois,turkisa,turkoosi,turquoise,türkis,türkiz,turchese;red,rød,rood,,punainen,rouge,rot,piros,rosso;purple,lilla,paars,purpura,purppura,pourpre,lila,bíbor,porpora;yellow,gul,geel,flava,keltainen,jaune,gelb,sárga,giallo;white,hvid,wit,blanka,valkoinen,blanc,weiß,fehér,bianco;gray,grå,grijs,griza,harmaa,gris,grau,szürke,grigio".Split(';').Select(row => row.Split(',')).ToArray();
    private static readonly string[] _simonSpeaksColumns = @"English,Danish,Dutch,Esperanto,Finnish,French,German,Hungarian,Italian".Split(',');
    private static readonly string[] _simonSpeaksRows = @"black,blue,green,cyan,red,purple,yellow,white,gray".Split(',');

    private static readonly string[] _ikeaProducts = @"Säng,Skåp,Stol,Gardiner,Skrivbord,Fläkt,Täcke,Handduk".Split(',');
    private static readonly string[] _ikeaBrands = @"Känga,Skål,Godis,Ost,Färg,Drake,Hörlurar,Köttbulle,Åttahörning,Måla,Valp,Tvättbjörn,Skjorta,Sko,Enhörning,Trollkarl".Split(',');

    private sealed class Lion { public string Name; public int AliveFrom; public int AliveUntil; }
    private static readonly Lion[] _lionsShareLions = @"Taka,2,11;Mufasa,1,5;Uru,1,6;Ahadi,1,4;Zama,1,3;Mohatu,1,2;Kion,13,16;Kiara,12,16;Kopa,12,13;Kovu,11,16;Vitani,10,16;Nuka,9,13;Mheetu,6,16;Zira,6,13;Nala,5,16;Simba,4,15;Sarabi,1,14;Sarafina,1,12"
        .Split(';').Select(l => l.Split(',')).Select(arr => new Lion { Name = arr[0], AliveFrom = int.Parse(arr[1]), AliveUntil = int.Parse(arr[2]) }).ToArray();

    private static readonly int[] _primes = new[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };

    private sealed class DiseaseInfo { public string Disease; public string[] Symptoms; }
    private static readonly DiseaseInfo[] _drDoctorDiseases = newArray(
        new DiseaseInfo { Disease = "Alztimer’s", Symptoms = new[] { "Fever", "Chills", "Dizziness" } },
        new DiseaseInfo { Disease = "Braintenance", Symptoms = new[] { "Headache", "Sleepiness", "Thirstiness" } },
        new DiseaseInfo { Disease = "Color allergy", Symptoms = new[] { "Bloating", "Cough", "Diarrhea" } },
        new DiseaseInfo { Disease = "Detonession", Symptoms = new[] { "Dizziness", "Fatigue", "Fever" } },
        new DiseaseInfo { Disease = "Emojilepsy", Symptoms = new[] { "Headache", "Muscle Cramp", "Nausea" } },
        new DiseaseInfo { Disease = "Foot and Morse", Symptoms = new[] { "Throat irritation", "Constipation", "Foot swelling" } },
        new DiseaseInfo { Disease = "Gout of Life", Symptoms = new[] { "Hallucination", "Cold Hands", "Excessive Crying" } },
        new DiseaseInfo { Disease = "HRV", Symptoms = new[] { "Gas", "Numbness", "Loss of Smell" } },
        new DiseaseInfo { Disease = "Indicitis", Symptoms = new[] { "Bloating", "Fever", "Hallucination" } },
        new DiseaseInfo { Disease = "Jaundry", Symptoms = new[] { "Disappearance of the Ears", "Fever", "Shortness of Breath" } },
        new DiseaseInfo { Disease = "Keypad stones", Symptoms = new[] { "Headache", "Sleepiness", "Fever" } },
        new DiseaseInfo { Disease = "Legomania", Symptoms = new[] { "Cough", "Excessive Crying", "Muscle Cramp" } },
        new DiseaseInfo { Disease = "Microcontusion", Symptoms = new[] { "Fever", "Chills", "Dizziness" } },
        new DiseaseInfo { Disease = "Narcolization", Symptoms = new[] { "Numbness", "Constipation", "Fatigue" } },
        new DiseaseInfo { Disease = "OCd", Symptoms = new[] { "Sleepiness", "Dizziness", "Thirstiness" } },
        new DiseaseInfo { Disease = "Piekinson’s", Symptoms = new[] { "Sleepiness", "Cold Hands", "Thirstiness" } },
        new DiseaseInfo { Disease = "Quackgrounds", Symptoms = new[] { "Chills", "Loss of Smell", "Throat irritation" } },
        new DiseaseInfo { Disease = "Royal Flu", Symptoms = new[] { "Thirstiness", "Fever", "Headache" } },
        new DiseaseInfo { Disease = "Seizure Siphor", Symptoms = new[] { "Constipation", "Bloating", "Hallucination" } },
        new DiseaseInfo { Disease = "Tetrinus", Symptoms = new[] { "Hallucination", "Cold Hands", "Dizziness" } },
        new DiseaseInfo { Disease = "Urinary LEDs", Symptoms = new[] { "Chills", "Nausea", "Numbness" } },
        new DiseaseInfo { Disease = "Verticode", Symptoms = new[] { "Loss of Smell", "Cold Hands", "Sleepiness" } },
        new DiseaseInfo { Disease = "Widgeting", Symptoms = new[] { "Thirstiness", "Cough", "Fatigue" } },
        new DiseaseInfo { Disease = "XMAs", Symptoms = new[] { "Diarrhea", "Sleepiness", "Foot swelling" } },
        new DiseaseInfo { Disease = "Yes-no infection", Symptoms = new[] { "Gas", "Throat irritation", "Muscle Cramp" } },
        new DiseaseInfo { Disease = "Zooties", Symptoms = new[] { "Muscle Cramp", "Constipation", "Sleepiness" } },
        new DiseaseInfo { Disease = "Chronic Talk", Symptoms = new[] { "Throat irritation", "Cough", "Foot swelling" } },
        new DiseaseInfo { Disease = "Jukepox", Symptoms = new[] { "Sleepiness", "Headache", "Dizziness" } },
        new DiseaseInfo { Disease = "Neurolysis", Symptoms = new[] { "Foot swelling", "Excessive Crying", "Nausea" } },
        new DiseaseInfo { Disease = "Perspective Loss", Symptoms = new[] { "Sleepiness", "Bloating", "Dizziness" } },
        new DiseaseInfo { Disease = "Orientitis", Symptoms = new[] { "Gas", "Numbness", "Loss of Smell" } },
        new DiseaseInfo { Disease = "Huntington’s disease", Symptoms = new[] { "Cold Hands", "Sleepiness", "Throat irritation" } });

    private static readonly string[] _dragonEnergyWords = "Angry,Blessing,Child,Curse,Dragon,Dream,Emotion,Energy,Female,Force,Forest,Friend,Happiness,Hate,Heart,Heaven,Hope,Kindness,Longevity,Love,Loyal,Male,Mountain,Night,Pure,River,Soul,Spirit,Urgency,Wind".Split(',');

    static OddOneOutModule()
    {
        _zoniDotNumbers = new List<List<int>>();
        _zoniDashNumbers = new List<List<int>>();
        for (int i = 0; i < 100; i++)
        {
            var numDots = i.ToString().Sum(ch => _zoniCountDots[ch - '0']);
            while (_zoniDotNumbers.Count <= numDots)
                _zoniDotNumbers.Add(new List<int>());
            _zoniDotNumbers[numDots].Add(i);
            var numDashes = i.ToString().Sum(ch => _zoniCountDashes[ch - '0']);
            while (_zoniDashNumbers.Count <= numDashes)
                _zoniDashNumbers.Add(new List<int>());
            _zoniDashNumbers[numDashes].Add(i);
        }

        _zooAnimals = new Dictionary<Hex, string>();
        _zooAnimals[new Hex(0, -4)] = "Cow";
        _zooAnimals[new Hex(1, -4)] = "Tyrannosaurus Rex";
        _zooAnimals[new Hex(2, -4)] = "Rabbit";
        _zooAnimals[new Hex(3, -4)] = "Horse";
        _zooAnimals[new Hex(4, -4)] = "Flamingo";
        _zooAnimals[new Hex(-1, -3)] = "Cat";
        _zooAnimals[new Hex(0, -3)] = "Bat";
        _zooAnimals[new Hex(1, -3)] = "Ant";
        _zooAnimals[new Hex(2, -3)] = "Fly";
        _zooAnimals[new Hex(3, -3)] = "Llama";
        _zooAnimals[new Hex(4, -3)] = "Hyena";
        _zooAnimals[new Hex(-2, -2)] = "Pig";
        _zooAnimals[new Hex(-1, -2)] = "Owl";
        _zooAnimals[new Hex(0, -2)] = "Rhinoceros";
        _zooAnimals[new Hex(1, -2)] = "Tortoise";
        _zooAnimals[new Hex(2, -2)] = "Sea Horse";
        _zooAnimals[new Hex(3, -2)] = "Camel";
        _zooAnimals[new Hex(4, -2)] = "Dimetrodon";
        _zooAnimals[new Hex(-3, -1)] = "Spider";
        _zooAnimals[new Hex(-2, -1)] = "Goose";
        _zooAnimals[new Hex(-1, -1)] = "Snail";
        _zooAnimals[new Hex(0, -1)] = "Monkey";
        _zooAnimals[new Hex(1, -1)] = "Wolf";
        _zooAnimals[new Hex(2, -1)] = "Kangaroo";
        _zooAnimals[new Hex(3, -1)] = "Lobster";
        _zooAnimals[new Hex(4, -1)] = "Dromedary";
        _zooAnimals[new Hex(-4, 0)] = "Bear";
        _zooAnimals[new Hex(-3, 0)] = "Dragonfly";
        _zooAnimals[new Hex(-2, 0)] = "Butterfly";
        _zooAnimals[new Hex(-1, 0)] = "Fox";
        _zooAnimals[new Hex(0, 0)] = "Dolphin";
        _zooAnimals[new Hex(1, 0)] = "Eagle";
        _zooAnimals[new Hex(2, 0)] = "Porcupine";
        _zooAnimals[new Hex(3, 0)] = "Otter";
        _zooAnimals[new Hex(4, 0)] = "Warthog";
        _zooAnimals[new Hex(-4, 1)] = "Ferret";
        _zooAnimals[new Hex(-3, 1)] = "Lion";
        _zooAnimals[new Hex(-2, 1)] = "Squirrel";
        _zooAnimals[new Hex(-1, 1)] = "Giraffe";
        _zooAnimals[new Hex(0, 1)] = "Koala";
        _zooAnimals[new Hex(1, 1)] = "Crab";
        _zooAnimals[new Hex(2, 1)] = "Frog";
        _zooAnimals[new Hex(3, 1)] = "Swallow";
        _zooAnimals[new Hex(-4, 2)] = "Stegosaurus";
        _zooAnimals[new Hex(-3, 2)] = "Pterodactyl";
        _zooAnimals[new Hex(-2, 2)] = "Cobra";
        _zooAnimals[new Hex(-1, 2)] = "Hippopotamus";
        _zooAnimals[new Hex(0, 2)] = "Triceratops";
        _zooAnimals[new Hex(1, 2)] = "Duck";
        _zooAnimals[new Hex(2, 2)] = "Starfish";
        _zooAnimals[new Hex(-4, 3)] = "Elephant";
        _zooAnimals[new Hex(-3, 3)] = "Rooster";
        _zooAnimals[new Hex(-2, 3)] = "Woodpecker";
        _zooAnimals[new Hex(-1, 3)] = "Apatosaurus";
        _zooAnimals[new Hex(0, 3)] = "Beaver";
        _zooAnimals[new Hex(1, 3)] = "Gorilla";
        _zooAnimals[new Hex(-4, 4)] = "Mouse";
        _zooAnimals[new Hex(-3, 4)] = "Seal";
        _zooAnimals[new Hex(-2, 4)] = "Skunk";
        _zooAnimals[new Hex(-1, 4)] = "Viper";
        _zooAnimals[new Hex(0, 4)] = "Salamander";

        _countryNameGroups = newArray(
            // group by first letter
            _countryNames.GroupBy(cn => cn.Substring(0, 1).ToUpperInvariant()).Select(gr => new GroupInfo<string> { Key = gr.Key, Items = gr.ToArray(), Logging = string.Format("Countries that start with {0}", gr.Key) }).ToArray(),
            // group by last letter
            _countryNames.GroupBy(cn => cn.Substring(cn.Length - 1, 1).ToUpperInvariant()).Select(gr => new GroupInfo<string> { Key = gr.Key, Items = gr.ToArray(), Logging = string.Format("Countries that end with {0}", gr.Key) }).ToArray(),
            // group by whether it contains an “E” or not
            _countryNames.GroupBy(cn => cn.ContainsIgnoreCase("E") ? "contain" : "do not contain").Select(gr => new GroupInfo<string> { Key = gr.Key, Items = gr.ToArray(), Logging = string.Format("Countries that {0} the letter “E”", gr.Key) }).ToArray());
    }

    private static readonly Func<StageInfo>[] _generators = newArray<Func<StageInfo>>(
        // NUMBER PUZZLES
        () => new Func<StageInfo>[] { NumberModuloPuzzle, NumberZoniPuzzle, NumberPrimesPuzzle }.PickRandom()(),

        // LETTER PUZZLES
        () => new Func<StageInfo>[] { LetterDistancePuzzle, LetterAtbashRot13Puzzle, LetterMorsePuzzle, LetterMaritimeFlagPuzzle, LetterSemaphorePuzzle, LetterPigpenPuzzle }.PickRandom()(),

        // LETTER CODES
        () => new Func<StageInfo>[] { FakeChemicalElementPuzzle, ChemicalElementRowColumnPuzzle, USStateAbbreviationsPuzzle, CountryISOCodesPuzzle, CurrencyISOCodesPuzzle, MorseWarPuzzle, StockMarketPuzzle }.PickRandom()(),

        // ENCODED LETTERS
        EncodedLettersPuzzle,

        // COLORS PUZZLES
        () => new Func<StageInfo>[] { ColorsWithNamesPuzzle, ColorsWithNumbersPuzzle }.PickRandom()(),

        // WORDS/NAMES FROM OTHER MODULES
        () => new Func<StageInfo>[] { ModuleWordsPuzzle, ModuleNamesPuzzle, GroceryItemsPuzzle, BenedictCumberbatchPuzzle }.PickRandom()(),

        // MORE WORDS/NAMES
        () => new Func<StageInfo>[] { MusicNotesPuzzle, LondonUndergroundPuzzle, SimonSpeaksWordsPuzzle, IkeaPuzzle, LionsSharePuzzle, DrDoctorPuzzle }.PickRandom()(),

        // SYMBOLS/GRAPHICS
        () => new Func<StageInfo>[] { CountryFlagsPuzzle, FriendshipSymbolsPuzzle, ZooAnimalsPuzzle, ThreeDTunnelsSymbolsPuzzle, QuestionMarkSymbolsPuzzle, DragonEnergyPuzzle }.PickRandom()()
    );

    #region Puzzles
    private static StageInfo NumberModuloPuzzle()
    {
        while (true)
        {
            var mod = _modNumbers.PickRandom();
            var target = Rnd.Range(0, mod);
            var numbers = Enumerable.Range(0, int.MaxValue).Select(_ => Rnd.Range(0, 100 / mod) * mod + target).Distinct().Take(5).ToList();
            var badNumber = Rnd.Range(0, (100 - mod) / mod) * mod + target + 1 + Rnd.Range(0, mod - 1);
            var ix = Rnd.Range(0, 6);
            numbers.Insert(ix, badNumber);
            if (!isValidNumberOfDigitsPuzzle(numbers) && !isValidZoniPuzzle(numbers))
                return new StageInfo
                {
                    CorrectIndex = ix,
                    Setup = (m, i) =>
                    {
                        m.setButtonLabel(i, numbers[i].ToString(), size: 92);
                        m._puzzleLedColor = 1;
                    },
                    Logging = string.Format("Numbers that are {1} modulo {0}", mod, target)
                };
        }
    }
    private static StageInfo NumberZoniPuzzle()
    {
        while (true)
        {
            var useDots = Rnd.Range(0, 2) != 0;
            var targetIx = (useDots ? Enumerable.Range(0, _zoniDotNumbers.Count).Where(i => _zoniDotNumbers[i].Count >= 5) : Enumerable.Range(0, _zoniDashNumbers.Count).Where(i => _zoniDashNumbers[i].Count > 5)).PickRandom();
            var numbers = (useDots ? _zoniDotNumbers : _zoniDashNumbers)[targetIx].ToArray().Shuffle().Take(5).ToList();
            var badTarget = Enumerable.Range(0, (useDots ? _zoniDotNumbers : _zoniDashNumbers).Count).Where(i => i != targetIx && (useDots ? _zoniDotNumbers : _zoniDashNumbers)[i].Count > 0).PickRandom();
            var ix = Rnd.Range(0, 6);
            numbers.Insert(ix, (useDots ? _zoniDotNumbers : _zoniDashNumbers)[badTarget].PickRandom());
            if (!isValidNumberOfDigitsPuzzle(numbers) && !isValidModuloPuzzle(numbers))
                return new StageInfo
                {
                    CorrectIndex = ix,
                    Setup = (m, i) =>
                    {
                        m.setButtonLabel(i, numbers[i].ToString(), size: 92);
                        m._puzzleLedColor = 2;
                    },
                    Logging = string.Format("Numbers with {0} {1} in Zoni", targetIx, useDots ? "dots" : "dashes")
                };
        }
    }
    private static StageInfo NumberPrimesPuzzle()
    {
        var usePrimes = Rnd.Range(0, 2) != 0;
        var goodNumbers = (usePrimes ? _primes : Enumerable.Range(2, 98).Except(_primes)).ToList().Shuffle();
        var badNumber = (usePrimes ? Enumerable.Range(2, 98).Except(_primes) : _primes).PickRandom();
        var ix = Rnd.Range(0, 6);
        goodNumbers.RemoveRange(5, goodNumbers.Count - 5);
        goodNumbers.Insert(ix, badNumber);
        return new StageInfo
        {
            CorrectIndex = ix,
            Logging = usePrimes ? "Prime numbers" : "Composite numbers",
            Setup = (m, i) =>
            {
                m.setButtonLabel(i, goodNumbers[i].ToString(), size: 92);
                m._puzzleLedColor = 3;
            }
        };
    }
    private static StageInfo LetterDistancePuzzle()
    {
        // The letters form a sequence of letters equidistant in the alphabet, except for one.
        while (true)
        {
            var start = Rnd.Range(0, 26);
            int step = Rnd.Range(1, 13);
            var letters = Enumerable.Range(0, 7).Select(i => (char) ('A' + (start + i * step) % 26)).ToList();
            var badLetter = Enumerable.Range(0, 26).Select(i => (char) ('A' + i)).Where(ch => !letters.Contains(ch)).PickRandom();
            letters.RemoveAt(6);
            letters.RemoveAt(0);
            letters.Shuffle();
            var ix = Rnd.Range(0, 6);
            letters.Insert(ix, badLetter);
            if (!isValidRot13Puzzle(letters) && !isValidAtbashPuzzle(letters) && !isValidMorsePuzzle(letters) && !isValidMaritimeFlagsPuzzle(letters).Any() && !isValidSemaphorePuzzle(letters) && !isValidPigpenPuzzle(letters))
                return new StageInfo
                {
                    CorrectIndex = ix,
                    Setup = (m, i) =>
                    {
                        m.setButtonLabel(i, letters[i].ToString());
                        m._puzzleLedColor = 1;
                    },
                    Logging = string.Format("Letters {0} away from each other (with wrap around)", step)
                };
        }
    }
    private static StageInfo LetterAtbashRot13Puzzle()
    {
        // The letters are ROT13 or Atbash of a five-letter English word with one letter inserted. Press the only letter that can be removed to make a common 5-letter word.
        while (true)
        {
            string oldWord, newWord;
            int ix;
            generateWordPuzzle(out oldWord, out newWord, out ix);
            var atbash = Rnd.Range(0, 2) != 0;
            var letters = newWord.Select(ch => (char) ((atbash ? 25 - (ch - 'A') : (ch - 'A' + 13) % 26) + 'A')).ToList();
            if (!isValidLetterSequence(letters) && !(atbash ? isValidRot13Puzzle(letters) : isValidAtbashPuzzle(letters)) && !isValidMorsePuzzle(letters) && !isValidMaritimeFlagsPuzzle(letters).Any() && !isValidSemaphorePuzzle(letters) && !isValidPigpenPuzzle(letters))
                return new StageInfo
                {
                    CorrectIndex = ix,
                    Setup = (m, i) =>
                    {
                        m.setButtonLabel(i, letters[i].ToString());
                        m._puzzleLedColor = atbash ? 2 : 3;
                    },
                    Logging = string.Format("{0} of {1}", atbash ? "Atbash" : "Rot13", oldWord)
                };
        }
    }
    private static StageInfo LetterMorsePuzzle()
    {
        // The letters all start with the same two signs (dots/dashes) in Morse
        while (true)
        {
            var goodGroupIx = Rnd.Range(0, _morseLetterGroups.Length);
            var badLetter = (_morseLetterGroups.Where((g, i) => i != goodGroupIx).Join("") + "ET").PickRandom();
            var letters = _morseLetterGroups[goodGroupIx].ToList().Shuffle();
            var ix = Rnd.Range(0, 6);
            letters.RemoveRange(5, letters.Count - 5);
            letters.Insert(ix, badLetter);
            if (!isValidLetterSequence(letters) && !isValidRot13Puzzle(letters) && !isValidAtbashPuzzle(letters) && !isValidMaritimeFlagsPuzzle(letters).Any() && !isValidSemaphorePuzzle(letters) && !isValidPigpenPuzzle(letters))
                return new StageInfo
                {
                    CorrectIndex = ix,
                    Setup = (m, i) =>
                    {
                        m.setButtonLabel(i, letters[i].ToString());
                        m._puzzleLedColor = 4;
                    },
                    Logging = string.Format("Letters that start with {0} in Morse", "...--.--".Substring(2 * goodGroupIx, 2))
                };
        }
    }
    private static StageInfo LetterMaritimeFlagPuzzle()
    {
        // The letters all have red/blue/yellow/white in their maritime flag, except one.
        while (true)
        {
            var colorGroups = Enumerable.Range(0, 5).Select(c => Enumerable.Range(0, 26).Where(i => _maritimeFlagsLetterColors[i].Contains(c)).Select(i => (char) (i + 'A')).Join("")).ToArray();
            var targetColor = Rnd.Range(0, 5);
            var groupIx = Enumerable.Range(0, colorGroups.Length).Where(i => colorGroups[i].Length >= 5).PickRandom();
            var letters = colorGroups[groupIx].ToList().Shuffle();
            var badLetter = Enumerable.Range(0, 26).Select(i => (char) (i + 'A')).Where(ltr => !letters.Contains(ltr)).PickRandom();
            var ix = Rnd.Range(0, 6);
            letters.RemoveRange(5, letters.Count - 5);
            letters.Insert(ix, badLetter);

            if (!isValidLetterSequence(letters) && !isValidRot13Puzzle(letters) && !isValidAtbashPuzzle(letters) && !isValidMorsePuzzle(letters) && isValidMaritimeFlagsPuzzle(letters).SequenceEqual(new[] { targetColor }) && !isValidSemaphorePuzzle(letters) && !isValidPigpenPuzzle(letters))
                return new StageInfo
                {
                    CorrectIndex = ix,
                    Setup = (m, i) =>
                    {
                        m.setButtonLabel(i, letters[i].ToString());
                        m._puzzleLedColor = 5;
                    },
                    Logging = string.Format("Letters that have {0} in their international maritime signalling flag", "white,blue,red,yellow,black".Split(',')[targetColor])
                };
        }
    }
    private static StageInfo LetterSemaphorePuzzle()
    {
        // The letters all share a specific semaphore direction, except one.
        while (true)
        {
            var targetGroupIx = Rnd.Range(0, _semaphoreGroups.Length);
            var letters = _semaphoreGroups[targetGroupIx].Items.ToList().Shuffle();
            var badLetter = Enumerable.Range(0, 26).Select(i => (char) (i + 'A')).Where(ltr => !letters.Contains(ltr)).PickRandom();
            var ix = Rnd.Range(0, 6);
            letters.RemoveRange(5, letters.Count - 5);
            letters.Insert(ix, badLetter);

            if (!isValidLetterSequence(letters) && !isValidRot13Puzzle(letters) && !isValidAtbashPuzzle(letters) && !isValidMorsePuzzle(letters) && !isValidMaritimeFlagsPuzzle(letters).Any() && !isValidPigpenPuzzle(letters))
                return new StageInfo
                {
                    CorrectIndex = ix,
                    Setup = (m, i) =>
                    {
                        m.setButtonLabel(i, letters[i].ToString());
                        m._puzzleLedColor = 6;
                    },
                    Logging = string.Format("Letters with {0} in their semaphore", _semaphoreGroups[targetGroupIx].Key)
                };
        }
    }
    private static StageInfo LetterPigpenPuzzle()
    {
        while (true)
        {
            var targetGroupIx = Rnd.Range(0, _pigpenGroups.Length);
            var letters = _pigpenGroups[targetGroupIx].ToList().Shuffle();
            var badLetter = Enumerable.Range(0, 26).Select(i => (char) (i + 'A')).Where(ltr => !letters.Contains(ltr)).PickRandom();
            var ix = Rnd.Range(0, 6);
            letters.RemoveRange(5, letters.Count - 5);
            letters.Insert(ix, badLetter);

            if (!isValidLetterSequence(letters) && !isValidRot13Puzzle(letters) && !isValidAtbashPuzzle(letters) && !isValidMorsePuzzle(letters) && !isValidMaritimeFlagsPuzzle(letters).Any() && !isValidSemaphorePuzzle(letters))
                return new StageInfo
                {
                    CorrectIndex = ix,
                    Setup = (m, i) =>
                    {
                        m.setButtonLabel(i, letters[i].ToString());
                        m._puzzleLedColor = 7;
                    },
                    Logging = string.Format("Letters that {0} a dot in pigpen cipher", "have,don’t have".Split(',')[targetGroupIx])
                };
        }
    }
    private static StageInfo FakeChemicalElementPuzzle()
    {
        var goodSymbols = _periodicTable.SelectMany(s => s).Where(sy => sy != "").Concat(_periodicTableExtra).ToList().Shuffle();
        string badSymbol;
        do { badSymbol = (char) ('A' + Rnd.Range(0, 26)) + "" + (char) ('a' + Rnd.Range(0, 26)); } while (goodSymbols.Contains(badSymbol));
        var ix = Rnd.Range(0, 6);
        goodSymbols.RemoveRange(5, goodSymbols.Count - 5);
        goodSymbols.Insert(ix, badSymbol);
        return new StageInfo { CorrectIndex = ix, Setup = (m, i) => { m.setButtonLabel(i, goodSymbols[i], size: 64); }, Logging = string.Format("Chemical element symbols") };
    }
    private static StageInfo ChemicalElementRowColumnPuzzle()
    {
        tryAgain:
        var isCol = Rnd.Range(0, 2) != 0;
        var rowCol = isCol ? new[] { 0, 1, 2, 12, 13, 14, 15, 16, 17 }.PickRandom() : Rnd.Range(0, _periodicTable.Length);
        var goodSymbols = (isCol ? Enumerable.Range(0, _periodicTable.Length).Select(row => _periodicTable[row][rowCol]) : _periodicTable[rowCol]).Where(sy => sy != "").ToList().Shuffle();
        if (goodSymbols.Count < 5)
            goto tryAgain;
        var badSymbol = _periodicTable.SelectMany(s => s).Where(sy => sy != "" && !goodSymbols.Contains(sy)).PickRandom();
        var ix = Rnd.Range(0, 6);
        goodSymbols.RemoveRange(5, goodSymbols.Count - 5);
        goodSymbols.Insert(ix, badSymbol);
        return new StageInfo { CorrectIndex = ix, Setup = (m, i) => { m.setButtonLabel(i, goodSymbols[i], size: 64); }, Logging = string.Format("Chemical elements from {0} {1} of the periodic table", isCol ? "column" : "row", rowCol + 1) };
    }
    private static StageInfo USStateAbbreviationsPuzzle()
    {
        var goodAbbrevs = _usStateAbbrevs.ToList().Shuffle();
        string badAbbrev;
        do { badAbbrev = (char) ('A' + Rnd.Range(0, 26)) + "" + (char) ('A' + Rnd.Range(0, 26)); } while (goodAbbrevs.Contains(badAbbrev));
        var ix = Rnd.Range(0, 6);
        goodAbbrevs.RemoveRange(5, goodAbbrevs.Count - 5);
        goodAbbrevs.Insert(ix, badAbbrev);
        return new StageInfo { CorrectIndex = ix, Setup = (m, i) => { m.setButtonLabel(i, goodAbbrevs[i], size: 64); }, Logging = string.Format("US state abbreviations") };
    }
    private static StageInfo CountryISOCodesPuzzle()
    {
        while (true)
        {
            var goodCodes = _countryCodes.ToList().Shuffle();
            string badCode;
            do { badCode = (char) ('A' + Rnd.Range(0, 26)) + "" + (char) ('A' + Rnd.Range(0, 26)) + (char) ('A' + Rnd.Range(0, 26)); } while (goodCodes.Contains(badCode));
            var ix = Rnd.Range(0, 6);
            goodCodes.RemoveRange(5, goodCodes.Count - 5);
            goodCodes.Insert(ix, badCode);
            if (!isValidCodePuzzle(goodCodes, _currencyCodes) && !isValidCodePuzzle(goodCodes, _companyCodes) && !isValidCodePuzzle(goodCodes, _morseWarCodes))
                return new StageInfo { CorrectIndex = ix, Setup = (m, i) => { m.setOnHover(i, goodCodes[i]); }, Logging = string.Format("ISO codes of countries in “Flags”") };
        }
    }
    private static StageInfo CurrencyISOCodesPuzzle()
    {
        while (true)
        {
            var goodCodes = _currencyCodes.ToList().Shuffle();
            string badCode;
            do { badCode = (char) ('A' + Rnd.Range(0, 26)) + "" + (char) ('A' + Rnd.Range(0, 26)) + (char) ('A' + Rnd.Range(0, 26)); } while (goodCodes.Contains(badCode));
            var ix = Rnd.Range(0, 6);
            goodCodes.RemoveRange(5, goodCodes.Count - 5);
            goodCodes.Insert(ix, badCode);
            if (!isValidCodePuzzle(goodCodes, _countryCodes) && !isValidCodePuzzle(goodCodes, _companyCodes) && !isValidCodePuzzle(goodCodes, _morseWarCodes))
                return new StageInfo { CorrectIndex = ix, Setup = (m, i) => { m.setOnHover(i, goodCodes[i]); }, Logging = string.Format("ISO codes of currencies in “Flags” and “Foreign Exchange Rates”") };
        }
    }
    private static StageInfo MorseWarPuzzle()
    {
        while (true)
        {
            var goodCodes = _morseWarCodes.ToList().Shuffle();
            string badCode;
            do { badCode = (char) ('A' + Rnd.Range(0, 26)) + "" + (char) ('A' + Rnd.Range(0, 26)) + (char) ('A' + Rnd.Range(0, 26)); } while (goodCodes.Contains(badCode));
            var ix = Rnd.Range(0, 6);
            goodCodes.RemoveRange(5, goodCodes.Count - 5);
            goodCodes.Insert(ix, badCode);
            if (!isValidCodePuzzle(goodCodes, _countryCodes) && !isValidCodePuzzle(goodCodes, _currencyCodes) && !isValidCodePuzzle(goodCodes, _companyCodes))
                return new StageInfo { CorrectIndex = ix, Setup = (m, i) => { m.setOnHover(i, goodCodes[i]); }, Logging = string.Format("Codes from “Morse War”") };
        }
    }
    private static StageInfo StockMarketPuzzle()
    {
        while (true)
        {
            var goodCodes = _companyCodes.ToList().Shuffle();
            string badCode;
            do { badCode = (char) ('A' + Rnd.Range(0, 26)) + "" + (char) ('A' + Rnd.Range(0, 26)) + (char) ('A' + Rnd.Range(0, 26)); } while (goodCodes.Contains(badCode));
            var ix = Rnd.Range(0, 6);
            goodCodes.RemoveRange(5, goodCodes.Count - 5);
            goodCodes.Insert(ix, badCode);
            if (!isValidCodePuzzle(goodCodes, _countryCodes) && !isValidCodePuzzle(goodCodes, _currencyCodes) && !isValidCodePuzzle(goodCodes, _morseWarCodes))
                return new StageInfo { CorrectIndex = ix, Setup = (m, i) => { m.setOnHover(i, goodCodes[i]); }, Logging = string.Format("Company codes from “Stock Market”") };
        }
    }
    private static StageInfo EncodedLettersPuzzle()
    {
        string puzzle, origWord;
        int ix;
        switch (Rnd.Range(0, 2))
        {
            case 0: // all same letter except one
                var goodLetter = (char) ('A' + Rnd.Range(0, 26));
                ix = Rnd.Range(0, 6);
                char badLetter;
                do { badLetter = (char) ('A' + Rnd.Range(0, 26)); } while (badLetter == goodLetter);
                puzzle = new string(goodLetter, ix) + badLetter + new string(goodLetter, 5 - ix);
                origWord = new string(goodLetter, 5);
                break;

            default:    // 5-letter word
                generateWordPuzzle(out origWord, out puzzle, out ix);
                break;
        }

        var encodings = Enumerable.Range(0, 10).ToList().Shuffle();
        return new StageInfo
        {
            CorrectIndex = ix,
            Logging = string.Format("{0} (encoded)", origWord),
            Setup = (m, i) =>
            {
                switch (encodings[i])
                {
                    case 0:
                        m._showMorse[i] = puzzle[i];
                        m.ButtonRenderers[i].material.color = m.MorseOnOff[0];
                        break;

                    case 1:
                        m.setButtonImage(i, m.MaritimeFlagTextures[puzzle[i] - 'A']);
                        break;

                    case 2:
                        m.setSemaphoreFlag(i, puzzle[i], left: true);
                        m.setSemaphoreFlag(i, puzzle[i], left: false);
                        break;

                    case 3:
                        m.setButtonImage(i, m.BrailleTextures[puzzle[i] - 'A']);
                        m.ButtonImages[2 * i].transform.localScale = new Vector3(.01f, .015f, .0125f);
                        break;

                    case 4:
                        m.setButtonLabel(i, puzzle[i].ToString(), m.ZoniFont, m.ZoniFontMaterial, size: 96, z: -0.0025f);
                        break;

                    case 5:
                        m.setButtonLabel(i, puzzle[i].ToString(), m.LombaxFont, m.LombaxFontMaterial, size: 100, x: .001f, z: -0.0014f);
                        break;

                    case 6:
                        m.setButtonLabel(i, puzzle[i].ToString(), m.SgaFont, m.SgaFontMaterial, size: 128, x: .001f);
                        break;

                    case 7:
                        m.setButtonImage(i, m.PigpenTextures[puzzle[i] - 'A']);
                        break;

                    case 8:
                        m.setButtonLabel(i, (puzzle[i] - 'A' + 1).ToString(), m.StandardFont, m.StandardFontMaterial, 92);
                        break;

                    case 9:
                        m.setButtonLabel(i, Convert.ToString(puzzle[i] - 'A' + 1, 2).PadLeft(5, '0').Insert(2, "\n"), m.StandardFont, m.StandardFontMaterial, 60, z: 0.001f);
                        break;
                }
            }
        };
    }
    private static StageInfo ColorsWithNamesPuzzle()
    {
        var powers = new[] { 1, 3, 9 };
        tryAgain:
        var trit = Rnd.Range(0, 3);
        var targetValue = Rnd.Range(0, 3);
        var goodColors = Enumerable.Range(0, 27).Where(color => (color / powers[trit]) % 3 == targetValue).ToList().Shuffle();
        var badColor = Enumerable.Range(0, 27).Where(color => !goodColors.Contains(color)).PickRandom();
        goodColors.RemoveRange(5, goodColors.Count - 5);
        var ix = Rnd.Range(0, 6);
        goodColors.Insert(ix, badColor);

        // Make sure that the puzzle isn’t accidentally ambiguous
        for (int testTrit = 0; testTrit < 3; testTrit++)
            for (int testValue = 0; testValue < 3; testValue++)
                if ((testTrit != trit || testValue != targetValue) && goodColors.Count(clr => (clr / powers[testTrit]) % 3 == testValue) == 5)
                    goto tryAgain;

        return new StageInfo
        {
            CorrectIndex = ix,
            Logging = string.Format("Named colors where {0} has value {1}", "blue,green,red".Split(',')[trit], targetValue),
            Setup = (m, i) =>
            {
                m.ButtonRenderers[i].material.color = new Color(((goodColors[i] / 9) % 3) * .5f, ((goodColors[i] / 3) % 3) * .5f, (goodColors[i] % 3) * .5f);
                m.setOnHover(i, _colorNames[goodColors[i]]);
            }
        };
    }
    private static StageInfo ColorsWithNumbersPuzzle()
    {
        var colors = Enumerable.Range(0, 8).ToList().Shuffle();
        var ix = Rnd.Range(0, 6);
        var offset = Rnd.Range(11, 93);
        var colorNames = "black,blue,green,cyan,red,magenta,yellow,white".Split(',');

        return new StageInfo
        {
            CorrectIndex = ix,
            Logging = string.Format("Numbered colors with offset {0}", offset),
            Setup = (m, i) =>
            {
                m.ButtonRenderers[i].material.color = new Color(colors[i] / 4, (colors[i] / 2) % 2, colors[i] % 2);
                var number = colors[(i == ix) ? 6 : i];
                m.setButtonLabel(i, (number + offset).ToString(), m.StandardFont, m.StandardFontMaterial, 92, white: colors[i] == 0);
                m.setOnHover(i, colorNames[colors[i]]);
            }
        };
    }
    private static StageInfo ModuleWordsPuzzle()
    {
        return generateItemizedPuzzle(_words, "Words from {0}", _wordsModules);
    }
    private static StageInfo ModuleNamesPuzzle()
    {
        return generateItemizedPuzzle(_names, "Names from {0}", _namesModules);
    }
    private static StageInfo GroceryItemsPuzzle()
    {
        return generateItemizedPuzzle(_groceryItems, "Grocery items from {0}", _groceryModules);
    }
    private static StageInfo BenedictCumberbatchPuzzle()
    {
        var w = _benedictHeadings.Length;
        var coords = Enumerable.Range(0, w * _benedictTable.Length).ToList().Shuffle().Take(6).ToList();
        var ix = Rnd.Range(0, 6);
        var badHeading = Enumerable.Range(0, w)
            // Prevent other headings where the same word is still valid
            .Except(Enumerable.Range(0, _benedictTable.Length * w).Where(i => _benedictTable[i / w][i % w] == _benedictTable[coords[ix] / w][coords[ix] % w]).Select(i => i % w))
            .PickRandom();
        return new StageInfo
        {
            CorrectIndex = ix,
            Setup = (m, i) => { m.setOnHover(i, _benedictHeadings[i == ix ? badHeading : coords[i] % w] + _benedictTable[coords[i] / w][coords[i] % w]); },
            Logging = "Names from Benedict Cumberbatch"
        };
    }
    private static StageInfo MusicNotesPuzzle()
    {
        var offset = Rnd.Range(0, 12);
        var majorScale = new[] { 0, 2, 4, 5, 7 }.Select(n => (n + offset) % 12).ToList().Shuffle();
        var badNote = Enumerable.Range(0, 12).Where(n => n != (9 + offset) % 12 && n != (11 + offset) % 12 && !majorScale.Contains(n)).PickRandom();
        var ix = Rnd.Range(0, 6);
        majorScale.Insert(ix, badNote);
        var noteNames = majorScale.Select(note => _noteNames[note].PickRandom()).ToArray();
        return new StageInfo
        {
            CorrectIndex = ix,
            Setup = (m, i) => { m.setButtonLabel(i, noteNames[i], m.MusicFont, m.MusicFontMaterial, 92); },
            Logging = string.Format("First five notes of the {0} major scale", _noteNames[offset])
        };
    }
    private static StageInfo LondonUndergroundPuzzle()
    {
        return generateItemizedPuzzle(_londonUndergroundStations, "Stations from the {0}", _londonUndergroundLines);
    }
    private static StageInfo SimonSpeaksWordsPuzzle()
    {
        tryAgain:
        var isCol = Rnd.Range(0, 2) != 0;
        var rowCol = Rnd.Range(0, 9);
        var goodWords = (isCol ? Enumerable.Range(0, _simonSpeaksWords.Length).Select(row => _simonSpeaksWords[row][rowCol]) : _simonSpeaksWords[rowCol]).Where(sy => sy != "").ToList();
        if (goodWords.Count < 5)
            goto tryAgain;
        var badWord = _simonSpeaksWords.SelectMany(s => s).Where(sy => sy != "" && !goodWords.Contains(sy)).PickRandom();
        var ix = Rnd.Range(0, 6);
        goodWords.RemoveRange(5, goodWords.Count - 5);
        goodWords.Insert(ix, badWord);
        return new StageInfo
        {
            CorrectIndex = ix,
            Setup = (m, i) => { m.setOnHover(i, goodWords[i]); },
            Logging = isCol ? string.Format("{0} words from Simon Speaks", _simonSpeaksColumns[rowCol]) : string.Format("Words from Simon Speaks that mean {0}", _simonSpeaksRows[rowCol])
        };
    }
    private static StageInfo IkeaPuzzle()
    {
        var isProduct = Rnd.Range(0, 2) != 0;
        var goodWords = (isProduct ? _ikeaProducts : _ikeaBrands).ToList().Shuffle();
        var badWord = (isProduct ? _ikeaBrands : _ikeaProducts).PickRandom();
        goodWords.RemoveRange(5, goodWords.Count - 5);
        var ix = Rnd.Range(0, 6);
        goodWords.Insert(ix, badWord);
        return new StageInfo
        {
            CorrectIndex = ix,
            Logging = string.Format("IKEA {0} names", isProduct ? "product" : "brand"),
            Setup = (m, i) => { m.setOnHover(i, goodWords[i]); }
        };
    }
    private static StageInfo LionsSharePuzzle()
    {
        tryAgain:
        var year = Rnd.Range(1, 17);
        var goodLions = _lionsShareLions.Where(l => l.AliveFrom <= year && l.AliveUntil >= year).ToList().Shuffle();
        var badLion = _lionsShareLions.Where(l => l.AliveFrom > year || l.AliveUntil < year).PickRandom();
        goodLions.RemoveRange(5, goodLions.Count - 5);
        var ix = Rnd.Range(0, 6);
        goodLions.Insert(ix, badLion);

        // Make sure the puzzle is not accidentally ambiguous
        for (int y = 1; y <= 16; y++)
            if (y != year && goodLions.Count(l => l.AliveFrom <= y && l.AliveUntil >= y) == 5 && goodLions.First(l => l.AliveFrom > y || l.AliveUntil < y) != badLion)
                goto tryAgain;

        return new StageInfo
        {
            CorrectIndex = ix,
            Logging = string.Format(@"Lions that are alive in Year {0} in Lion’s Share", year),
            Setup = (m, i) => { m.setOnHover(i, goodLions[i].Name); }
        };
    }
    private static StageInfo DrDoctorPuzzle()
    {
        var symptoms = _drDoctorDiseases.SelectMany(d => d.Symptoms).Distinct().ToArray();
        tryAgain:
        var symptom = symptoms.PickRandom();
        var goodDiseases = _drDoctorDiseases.Where(d => d.Symptoms.Contains(symptom)).ToList().Shuffle();
        if (goodDiseases.Count < 5)
            goto tryAgain;
        var badDisease = _drDoctorDiseases.Where(d => !d.Symptoms.Contains(symptom)).PickRandom();
        var ix = Rnd.Range(0, 6);
        goodDiseases.RemoveRange(5, goodDiseases.Count - 5);
        goodDiseases.Insert(ix, badDisease);

        // Make sure the puzzle is not accidentally ambiguous
        foreach (var sy in symptoms)
            if (sy != symptom && goodDiseases.Count(d => d.Symptoms.Contains(sy)) == 5 && goodDiseases.First(d => !d.Symptoms.Contains(sy)) != badDisease)
                goto tryAgain;

        return new StageInfo
        {
            CorrectIndex = ix,
            Logging = string.Format("Dr. Doctor diseases that have {0} as a symptom", symptom),
            Setup = (m, i) => { m.setOnHover(i, goodDiseases[i].Disease); }
        };
    }
    private static StageInfo CountryFlagsPuzzle()
    {
        tryAgain:
        var groupSet = _countryNameGroups.PickRandom();
        var goodGroup = groupSet.Where(g => g.Items.Length >= 5).PickRandom();
        var badCountry = groupSet.Where(gr => gr != goodGroup).SelectMany(gr => gr.Items).PickRandom();
        var goodCountries = goodGroup.Items.ToList().Shuffle();
        var ix = Rnd.Range(0, 6);
        goodCountries.RemoveRange(5, goodCountries.Count - 5);
        goodCountries.Insert(ix, badCountry);

        // Make sure the puzzle is not accidentally ambiguous
        foreach (var otherGroupSet in _countryNameGroups)
            if (otherGroupSet != groupSet && otherGroupSet.Any(gr => goodCountries.Count(cn => gr.Items.Contains(cn)) == 5))
                goto tryAgain;

        return new StageInfo
        {
            CorrectIndex = ix,
            Setup = (m, i) => { m.setCountryFlag(i, goodCountries[i]); },
            Logging = goodGroup.Logging
        };
    }
    private static StageInfo FriendshipSymbolsPuzzle()
    {
        // This code is the same as generateItemizedPuzzle() except that it uses textures instead of text
        var goodRowIx = Rnd.Range(0, _friendshipSymbolGroups.Length);
        var goodFriendshipSymbols = _friendshipSymbolGroups[goodRowIx].ToList().Shuffle();
        goodFriendshipSymbols.RemoveRange(5, goodFriendshipSymbols.Count - 5);
        var badFriendshipSymbol = Enumerable.Range(0, _friendshipSymbolGroups.Length).Where(i => i != goodRowIx).SelectMany(i => _friendshipSymbolGroups[i]).PickRandom();
        var ix = Rnd.Range(0, 6);
        goodFriendshipSymbols.Insert(ix, badFriendshipSymbol);
        return new StageInfo
        {
            CorrectIndex = ix,
            Setup = (m, i) => { m.setButtonImage(i, goodFriendshipSymbols[i], m.FriendshipSymbols, size: .015f); },
            Logging = string.Format("Symbols from the {0} in Friendship", _friendshipSymbolGroupNames[goodRowIx])
        };
    }
    private static StageInfo ZooAnimalsPuzzle()
    {
        var inf = Hex.LargeHexagon(5)
            .SelectMany(hex => Enumerable.Range(0, 6).Select(direction =>
                ((hex + 5 * Hex.GetDirection(direction)).Distance >= 5)
                    ? null
                    : new { StartHex = hex, Direction = direction, Line = Enumerable.Range(0, 5).Select(dist => hex + dist * Hex.GetDirection(direction)).ToArray() }))
            .Where(h => h != null)
            .PickRandom();

        var goodAnimals = inf.Line.Select(hex => _zooAnimals[hex]).ToList().Shuffle();
        var ix = Rnd.Range(0, 6);
        goodAnimals.Insert(ix, _zooAnimals.Where(kvp => kvp.Key != inf.StartHex + 5 * Hex.GetDirection(inf.Direction) && kvp.Key != inf.StartHex - Hex.GetDirection(inf.Direction) && !inf.Line.Contains(kvp.Key)).PickRandom().Value);
        return new StageInfo
        {
            CorrectIndex = ix,
            Logging = string.Format("Line of Zoo animals from {0} going {1}", _zooAnimals[inf.StartHex], "NW,N,NE,SE,S,SW".Split(',')[inf.Direction]),
            Setup = (m, i) => { m.setButtonImage(i, goodAnimals[i], m.ZooAnimalTextures, .015f); }
        };
    }
    private static StageInfo ThreeDTunnelsSymbolsPuzzle()
    {
        var dimIx = Rnd.Range(0, 3);
        var dim = new[] { 1, 3, 9 }[dimIx];
        var val = Rnd.Range(0, 3);
        var goodSymbols = Enumerable.Range(0, 27).Where(i => (i / dim) % 3 == val).ToList().Shuffle().Take(5).ToList();
        var badSymbol = Enumerable.Range(0, 27).Where(i => (i / dim) % 3 != val).PickRandom();
        var ix = Rnd.Range(0, 6);
        goodSymbols.Insert(ix, badSymbol);
        return new StageInfo
        {
            CorrectIndex = ix,
            Setup = (m, i) => { m.setButtonLabel(i, goodSymbols[i] == 26 ? "." : ((char) ('a' + goodSymbols[i])).ToString(), m.TunnelFont, m.TunnelFontMaterial, size: 104, z: .0004f); },
            Logging = string.Format("3D Tunnels symbols where {0} is {1}", "XYZ"[dimIx], val)
        };
    }
    private static StageInfo QuestionMarkSymbolsPuzzle()
    {
        var goodRow = Rnd.Range(0, 3);
        int badRow;
        do { badRow = Rnd.Range(0, 3); } while (badRow == goodRow);
        var row = Enumerable.Range(0, 5).Select(i => (goodRow + 1) + "-" + (i + 1)).ToList().Shuffle();
        var ix = Rnd.Range(0, 6);
        row.Insert(ix, (badRow + 1) + "-" + Rnd.Range(1, 6));
        return new StageInfo
        {
            CorrectIndex = ix,
            Setup = (m, i) => { m.setButtonImage(i, row[i], m.QuestionMarkTextures); },
            Logging = string.Format("Symbols from row {0} in Question Mark", goodRow + 1)
        };
    }
    private static StageInfo DragonEnergyPuzzle()
    {
        var isCol = Rnd.Range(0, 2) != 0;
        var rowCol = Rnd.Range(0, isCol ? 5 : 6);
        var goodWords = (isCol ? Enumerable.Range(0, 6).Select(row => _dragonEnergyWords[row * 5 + rowCol]) : Enumerable.Range(0, 5).Select(col => _dragonEnergyWords[rowCol * 5 + col])).ToList().Shuffle();
        var badWords = _dragonEnergyWords.Except(goodWords).PickRandom();
        var ix = Rnd.Range(0, 6);
        goodWords.RemoveRange(5, goodWords.Count - 5);
        goodWords.Insert(ix, badWords);
        return new StageInfo
        {
            CorrectIndex = ix,
            Setup = (m, i) => { m.setButtonImage(i, goodWords[i], m.DragonEnergyTextures); },
            Logging = string.Format("Dragon Energy words from {0} {1} in the manual", isCol ? "column" : "row", rowCol + 1)
        };
    }
    #endregion

    private void setCountryFlag(int i, string country)
    {
        var w = .012f;
        var s = _countrySizes[country];
        var b = Mathf.Sqrt(2 * w * w / (1 + Mathf.Pow(s * .001f, 2)));
        setButtonImage(i, CountryFlagTextures.First(c => c.name == country), w: b, h: s * b * .001f);
    }

    private static StageInfo generateItemizedPuzzle(string[][] groups, string loggingFmt, string[] groupNames)
    {
        // This code handles only text strings. FriendshipSymbolsPuzzle() is the same but for textures.
        tryAgain:
        var goodGroupIx = Rnd.Range(0, groups.Length);
        var goodGroup = groups[goodGroupIx].ToList().Shuffle();
        var badItem = groups.SelectMany(w => w).Where(w => !goodGroup.Contains(w)).PickRandom();
        var ix = Rnd.Range(0, 6);
        goodGroup.RemoveRange(5, goodGroup.Count - 5);
        goodGroup.Insert(ix, badItem);

        // Make sure it’s not accidentally ambiguous
        for (int i = 0; i < groups.Length; i++)
            if (i != goodGroupIx && goodGroup.Count(item => groups[i].Contains(item)) == 5)
                goto tryAgain;

        return new StageInfo
        {
            CorrectIndex = ix,
            Setup = (m, i) => { m.setOnHover(i, goodGroup[i]); },
            Logging = string.Format(loggingFmt, groupNames[goodGroupIx])
        };
    }

    private void setOnHover(int i, string display)
    {
        _showOnHover[i] = display;
        if (_curHover == i)
            setHoverText(_showOnHover[i]);
    }

    private static void generateWordPuzzle(out string oldWord, out string newWord, out int ix)
    {
        tryAgain:
        oldWord = _common5LetterWords[Rnd.Range(0, _common5LetterWords.Length)];
        ix = Rnd.Range(0, 6);
        newWord = oldWord.Insert(ix, ((char) ('A' + Rnd.Range(0, 26))).ToString());

        // Check that the new word can’t be turned into a valid 5-letter word by removing any other letter
        for (int i = 0; i < 6; i++)
        {
            if (i == ix)
                continue;
            var removed = newWord.Remove(i, 1);
            if (_all5LetterWords.Contains(removed))
                goto tryAgain;
        }
    }

    private void setButtonLabel(int i, string label, Font font = null, Material fontMaterial = null, int size = 116, float x = 0, float z = 0, bool white = false)
    {
        ButtonLabels[i].text = label;
        ButtonLabels[i].font = font ?? StandardFont;
        ButtonLabels[i].fontSize = size;
        ButtonLabels[i].color = white ? Color.white : Color.black;
        ButtonLabels[i].GetComponent<MeshRenderer>().sharedMaterial = fontMaterial ?? StandardFontMaterial;
        ButtonLabels[i].gameObject.SetActive(true);
        ButtonLabels[i].transform.localPosition = new Vector3(x, 0.00501f, z);
    }

    private void setButtonLabels<T>(List<T> items, Font font = null, Material fontMaterial = null, int fontSize = 116, float x = 0, float z = 0)
    {
        for (int i = 0; i < 6; i++)
            setButtonLabel(i, items[i].ToString(), font ?? StandardFont, fontMaterial ?? StandardFontMaterial, fontSize, z: z);
    }

    private void setSemaphoreFlag(int i, char letter, bool left)
    {
        var angle = (left ? _semaphoreLeftFlagOrientations : _semaphoreRightFlagOrientations)[letter - 'A'];
        var flag = ButtonImages[2 * i + (left ? 0 : 1)];
        flag.material.mainTexture = SemaphoreTexture;
        flag.transform.localPosition = new Vector3(left ? -.001f : .001f, 0.00501f, 0);
        flag.transform.localEulerAngles = new Vector3(90, 0, angle);
        flag.transform.localScale = new Vector3((left ? (angle < 0 || angle > 180) : !(angle > 0 || angle < -180)) ? -1 : 1, 1, 1) * 0.014f;
        flag.gameObject.SetActive(true);
    }

    private void setButtonImage(int i, Texture texture, float? w = null, float? h = null)
    {
        ButtonImages[2 * i].transform.localEulerAngles = new Vector3(90, 0, 0);
        ButtonImages[2 * i].transform.localScale = new Vector3(w ?? .0125f, h ?? .0125f, .01f);
        ButtonImages[2 * i].material.mainTexture = texture;
        ButtonImages[2 * i].gameObject.SetActive(true);
    }

    private void setButtonImage(int i, string identifier, Texture[] textures, float? size = null)
    {
        setButtonImage(i, textures.First(c => c.name == identifier), size, size);
    }

    private static bool isValidCodePuzzle(List<string> codes, string[] reference)
    {
        return codes.Count(code => reference.Contains(code)) == 5;
    }

    private static bool isValidPigpenPuzzle(List<char> letters)
    {
        foreach (var group in _pigpenGroups)
            if (letters.Count(l => group.Contains(l)) == 5)
                return true;
        return false;
    }

    private static bool isValidSemaphorePuzzle(List<char> letters)
    {
        foreach (var group in _semaphoreGroups)
            if (letters.Count(l => group.Items.Contains(l)) == 5)
                return true;
        return false;
    }

    private static IEnumerable<int> isValidMaritimeFlagsPuzzle(List<char> letters)
    {
        for (int color = 0; color < 5; color++)
            if (letters.Count(l => _maritimeFlagsLetterColors[l - 'A'].Contains(color)) == 5)
                yield return color;
    }

    private static bool isValidMorsePuzzle(List<char> letters)
    {
        foreach (var group in _morseLetterGroups)
            if (letters.Count(ch => group.Contains(ch)) == 5)
                return true;
        return false;
    }

    private static bool isValidRot13Puzzle(List<char> letters)
    {
        for (int i = 0; i < 6; i++)
            if (_all5LetterWords.Contains(letters.Take(i).Concat(letters.Skip(i + 1)).Select(ch => (char) ((ch - 'A' + 13) % 26 + 'A')).Join("")))
                return true;
        return false;
    }

    private static bool isValidAtbashPuzzle(List<char> letters)
    {
        for (int i = 0; i < 6; i++)
            if (_all5LetterWords.Contains(letters.Take(i).Concat(letters.Skip(i + 1)).Select(ch => (char) (26 - (ch - 'A') + 'A')).Join("")))
                return true;
        return false;
    }

    private static bool isValidLetterSequence(List<char> letters)
    {
        foreach (var ch in letters)
        {
            for (int offset = 1; offset < 25; offset++)
            {
                for (int i = 0; i < 5; i++)
                    if (!letters.Contains((char) ((ch - 'A' + i * offset) % 26 + 'A')))
                        goto busted;
                if (letters.Contains((char) ((ch - 'A' + 6 * offset) % 26 + 'A')) || letters.Contains((char) ((ch - 'A' - offset + 26) % 26 + 'A')))
                    goto busted;
                return true;

                busted:;
            }
        }
        return false;
    }

    private static bool isValidModuloPuzzle(List<int> numbers)
    {
        return _modNumbers.Any(mod =>
        {
            var modCounts = new int[mod];
            for (int i = 0; i < numbers.Count; i++)
                modCounts[numbers[i] % mod]++;
            Array.Sort(modCounts);
            return modCounts[mod - 1] == 5 && modCounts[mod - 2] == 1 && modCounts.Take(mod - 2).All(c => c == 0);
        });
    }

    private static bool isValidNumberOfDigitsPuzzle(List<int> numbers)
    {
        return
            (numbers.Count(n => n < 10) == 1 && numbers.Count(n => n >= 10 && n < 100) == 5) ||
            (numbers.Count(n => n >= 10 && n < 100) == 1 && numbers.Count(n => n < 10) == 5);
    }

    private static bool isValidZoniPuzzle(List<int> numbers)
    {
        foreach (var set in _zoniDotNumbers.Concat(_zoniDashNumbers))
            if (numbers.Count(n => set.Contains(n)) == 5)
                return true;
        return false;
    }

    private static T[] newArray<T>(params T[] array) { return array; }

    void Start()
    {
        _moduleId = _moduleIdCounter++;
        _stages = new StageInfo[6];

        ColorblindIndicator.gameObject.SetActive(ColorblindMode.ColorblindModeActive);

        retry:
        var matches = new int[6];
        var generatorIxs = Enumerable.Range(0, _generators.Length).ToList().Shuffle();
        for (int i = 0; i < 5; i++)
        {
            _stages[i] = _generators[generatorIxs[i]]();
            matches[_stages[i].CorrectIndex]++;
        }

        var unique = matches.Distinct().Where(c => matches.Count(i => i == c) == 1).ToArray();
        if (unique.Length != 1)
            goto retry;

        _stages[5] = new StageInfo { CorrectIndex = Array.IndexOf(matches, unique[0]), Setup = (m, i) => { }, Logging = "Final stage" };
        SetStage(0);

        for (int i = 0; i < Buttons.Length; i++)
        {
            Buttons[i].OnInteract = pressedDown(i);
            Buttons[i].OnInteractEnded = pressedUp(i);
            Buttons[i].OnHighlight = setHover(i);
            Buttons[i].OnHighlightEnded = delegate { _curHover = null; Display.text = ""; };
        }

        StartCoroutine(Morse());
    }

    private Action setHover(int i)
    {
        return delegate
        {
            _curHover = i;
            setHoverText(_showOnHover[i]);
        };
    }

    private void setHoverText(string text)
    {
        Display.text = text ?? "";

        // Determine the width of the text mesh
        var oldParent = Display.transform.parent;
        Display.transform.parent = null;
        Display.transform.localPosition = new Vector3(0, 0, 0);
        Display.transform.localRotation = Quaternion.identity;
        Display.transform.localScale = new Vector3(1, 1, 1);
        var bounds = Display.gameObject.GetComponent<Renderer>().bounds.size;

        // Make sure that it fits
        Display.transform.parent = oldParent;
        Display.transform.localPosition = new Vector3(0, 0.0001f, 0);
        Display.transform.localEulerAngles = new Vector3(90, 0, 0);
        Display.transform.localScale = new Vector3(.0015f * (bounds.x > 72 ? 72 / bounds.x : 1), 0.0015f, 0.0015f);
    }

    private IEnumerator Morse()
    {
        var cycle = 0;
        var dotLength = .3f;
        while (true)
        {
            yield return new WaitForSeconds(dotLength);
            for (int i = 0; i < 6; i++)
                if (_showMorse[i] != null)
                {
                    var morseCode = _morseCode[_showMorse[i].Value];
                    ButtonRenderers[i].material.color = MorseOnOff[morseCode[cycle % morseCode.Length] == '#' ? 1 : 0];
                }
            cycle++;
        }
    }

    private void SetStage(int stage)
    {
        _curStage = stage;
        for (int i = 0; i < 5; i++)
            Leds[i].sharedMaterial = i >= _curStage ? LedOff : LedOn;
        if (_curStage >= 6) // solved
        {
            Module.HandlePass();
            _curCoroutine = StartCoroutine(SetStageCoroutine(true, true));
            return;
        }
        if (_stages[_curStage].Logging != null)
            Debug.LogFormat(@"[Odd One Out #{0}] Stage {1}: {2} (correct button: {3})", _moduleId, _curStage + 1, _stages[_curStage].Logging, "TL,TM,TR,BL,BM,BR".Split(',')[_stages[_curStage].CorrectIndex]);
        _curCoroutine = StartCoroutine(SetStageCoroutine(stage == 0));
    }

    private IEnumerator SetStageCoroutine(bool first, bool last = false)
    {
        _puzzleLedColor = 0;
        LedPuzzleIndicator.material.color = PuzzleIndicatorColors[0];
        ColorblindIndicator.text = "";

        // Set defaults:
        for (int i = 0; i < 6; i++)
        {
            _showMorse[i] = null;
            _showOnHover[i] = null;
            ButtonRenderers[i].material.color = new Color32(0xad, 0xbd, 0xcc, 0xff);
            ButtonLabels[i].gameObject.SetActive(false);
            ButtonImages[2 * i].gameObject.SetActive(false);
            ButtonImages[2 * i + 1].gameObject.SetActive(false);
            if (_curHover == i)
                Display.text = "";
            if (!first)
                yield return new WaitForSeconds(.147f);
        }

        if (first)
        {
            Display.text = "";
            yield return new WaitForSeconds(.74f);
        }

        if (!last)
            for (int i = 0; i < 6; i++)
            {
                _stages[_curStage].Setup(this, i);
                yield return new WaitForSeconds(.147f);
            }

        LedPuzzleIndicator.material.color = PuzzleIndicatorColors[_puzzleLedColor];
        ColorblindIndicator.text = _puzzleLedColor == 0 ? "" : "RYGTBPI".Substring(_puzzleLedColor - 1, 1);
    }

    private KMSelectable.OnInteractHandler pressedDown(int i)
    {
        return delegate
        {
            Audio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.ButtonPress, Buttons[i].transform);
            Buttons[i].AddInteractionPunch();
            if (_longPressCoroutine != null)
            {
                StopCoroutine(_longPressCoroutine);
                _longPressCoroutine = null;
            }

            if (_curStage >= 6) // module is solved
                return false;

            _longPressCoroutine = StartCoroutine(handleLongPress(Buttons[i].transform));
            return false;
        };
    }

    private IEnumerator handleLongPress(Transform btn)
    {
        _longPress = false;
        yield return new WaitForSeconds(.5f);
        Audio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.ButtonRelease, btn);
        _longPress = true;
        for (int i = 0; i < 5; i++)
            Leds[i].sharedMaterial = LedOnRed;
    }

    private Action pressedUp(int i)
    {
        return delegate
        {
            if (_longPressCoroutine != null)
            {
                StopCoroutine(_longPressCoroutine);
                _longPressCoroutine = null;
            }
            if (_curCoroutine != null)
            {
                StopCoroutine(_curCoroutine);
                _curCoroutine = null;
            }

            if (_curStage >= 6) // module is solved
                return;

            if (_longPress)
            {
                Debug.LogFormat(@"[Odd One Out #{0}] Module reset.", _moduleId);
                SetStage(0);
            }
            else if (i == _stages[_curStage].CorrectIndex)
                SetStage(_curStage + 1);
            else
            {
                Module.HandleStrike();
                SetStage(0);
            }
        };
    }


#pragma warning disable 414
    private readonly string TwitchHelpMessage = @"!{0} press 1 [number in reading order] | !{0} press TL [TL, TM, TR, BL, BM, BR] | !{0} cycle | !{0} reset | !{0} colorblind";
#pragma warning restore 414

    IEnumerator ProcessTwitchCommand(string command)
    {
        if (Regex.IsMatch(command, @"^\s*colorblind\s*$", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))
        {
            ColorblindIndicator.gameObject.SetActive(true);
            yield return null;
            yield break;
        }

        if (Regex.IsMatch(command, @"^\s*reset\s*$", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))
        {
            yield return null;
            yield return Buttons[0];
            yield return new WaitForSeconds(.8f);
            yield return Buttons[0];
            yield break;
        }

        if (Regex.IsMatch(command, @"^\s*cycle\s*$", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))
        {
            yield return null;

            MethodInfo highlightMethod = null;
            object enumValue = null;

            for (int i = 0; i < 6; i++)
            {
                // Hacky time! Use Reflection to get the game to show the button highlight
                var h = Buttons[i].Highlight.GetComponent("Highlightable");
                if (highlightMethod == null)
                {
                    var e = h.GetType().GetNestedType("HighlightTypeEnum", BindingFlags.Public);
                    highlightMethod = h.GetType().GetMethod("On", BindingFlags.NonPublic | BindingFlags.Instance, null, new[] { typeof(bool), e }, null);
                    enumValue = Enum.ToObject(e, 1);
                }

                highlightMethod.Invoke(h, new[] { true, enumValue });
                if (_showOnHover[i] != null)
                    setHoverText(_showOnHover[i]);

                yield return new WaitForSeconds(1.5f);

                highlightMethod.Invoke(h, new[] { false, enumValue });
            }
            _curHover = null;
            Display.text = "";
            yield return new WaitForSeconds(.5f);
            yield break;
        }

        var match = Regex.Match(command, @"^\s*press\s+([1-6]|[TB][LMCR]|[LMCR][TB])\s*$", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);
        if (!match.Success)
            yield break;

        yield return null;
        switch (match.Groups[1].Value.ToLowerInvariant())
        {
            case "1": case "tl": case "lt": yield return new[] { Buttons[0] }; break;
            case "2": case "tm": case "mt": case "tc": case "ct": yield return new[] { Buttons[1] }; break;
            case "3": case "tr": case "rt": yield return new[] { Buttons[2] }; break;
            case "4": case "bl": case "lb": yield return new[] { Buttons[3] }; break;
            case "5": case "bm": case "mb": case "bc": case "cb": yield return new[] { Buttons[4] }; break;
            case "6": case "br": case "rb": yield return new[] { Buttons[5] }; break;
        }
    }
}
